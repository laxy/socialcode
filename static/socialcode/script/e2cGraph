    1 -main: int (int argc, char **argv), <upload-pack.c 800>
    2 --strcmp: <>
    3 --strlen: <>
    4 --encode_85: void (char *buf, const unsigned char *data, int bytes), <base85.c 79>
    5 ---say: <>
    6 ---say1: <>
    7 --printf: <>
    8 --decode_85: int (char *dst, const char *buffer, int len), <base85.c 40>
    9 ---prep_base85: void (void), <base85.c 29>
   10 ----ARRAY_SIZE: <>
   11 ---say2: <>
   12 ---error: int (const char *err, ...), <usage.c 142>
   13 ----va_start: <>
   14 ----error_routine: void (*) (const char *err, va_list params), <usage.c 60>
   15 ----va_end: <>
   16 ---say1: <>
   17 ---say: <>
   18 --read_cache: <>
   19 --lstat: <>
   20 --error: 12
   21 --strerror: <>
   22 --ce_match_stat: <>
   23 --OPT_INTEGER: <>
   24 --OPT_STRING: <>
   25 --OPT_END: <>
   26 --parse_options: int (int argc, const char **argv, const char *prefix, const struct option *options, const char *const usagestr[], int flags), <parse-options.c 506>
   27 ---parse_options_start: void (struct parse_opt_ctx_t ctx, int argc, const char **argv, const char *prefix, const struct option *options, int flags), <parse-options.c 395>
   28 ----memset: <>
   29 ----die: void NORETURN (const char *err, ...), <usage.c 93>
   30 -----die_is_recursing: int (*) (void), <usage.c 62>
   31 -----fputs: <>
   32 -----exit: <>
   33 -----va_start: <>
   34 -----die_routine: NORETURN_PTR void (*) (const char *err, va_list params), <usage.c 59>
   35 -----va_end: <>
   36 ----parse_options_check: void (const struct option *opts), <parse-options.c 351>
   37 -----memset: <>
   38 -----optbug: int (const struct option *opt, const char *reason), <parse-options.c 15>
   39 ------error: 12
   40 -----strcspn: <>
   41 -----strlen: <>
   42 -----exit: <>
   43 ---parse_options_step: int (struct parse_opt_ctx_t ctx, const struct option *options, const char *const usagestr[]), <parse-options.c 416>
   44 ----parse_nodash_opt: int (struct parse_opt_ctx_t p, const char *arg, const struct option *options), <parse-options.c 317>
   45 -----get_value: int (struct parse_opt_ctx_t p, const struct option *opt, const struct option *all_opts, int flags), <parse-options.c 82>
   46 ------opterror: int (const struct option *opt, const char *reason, int flags), <parse-options.c 650>
   47 -------error: 12
   48 ------opt_command_mode_error: int (const struct option *opt, const struct option *all_opts, int flags), <parse-options.c 50>
   49 -------strbuf_addf: void (struct strbuf sb, const char *fmt, ...), <strbuf.c 214>
   50 --------va_start: <>
   51 --------strbuf_vaddf: void (struct strbuf sb, const char *fmt, va_list ap), <strbuf.c 271>
   52 ---------strbuf_avail: <>
   53 ---------strbuf_grow: void (struct strbuf sb, size_t extra), <strbuf.c 58>
   54 ----------unsigned_add_overflows: <>
   55 ----------die: 29
   56 ----------ALLOC_GROW: <>
   57 ---------va_copy: <>
   58 ---------vsnprintf: <>
   59 ---------va_end: <>
   60 ---------die: 29
   61 ---------strbuf_setlen: <>
   62 --------va_end: <>
   63 -------strbuf_release: void (struct strbuf sb), <strbuf.c 29>
   64 --------free: <>
   65 --------strbuf_init: void (struct strbuf sb, size_t hint), <strbuf.c 21>
   66 ---------strbuf_grow: 53
   67 -------opterror: 46
   68 ------get_arg: int (struct parse_opt_ctx_t p, const struct option *opt, int flags, const char **arg), <parse-options.c 26>
   69 -------opterror: 46
   70 ------fix_filename: void (const char *prefix, const char **file), <parse-options.c 42>
   71 -------is_absolute_path: <>
   72 -------strcmp: <>
   73 -------xstrdup: char * (const char *str), <wrapper.c 41>
   74 --------strdup: <>
   75 --------try_to_free_routine: void (*) (size_t size), <wrapper.c 10>
   76 --------strlen: <>
   77 --------die: 29
   78 -------prefix_filename: const char * (const char *pfx, int pfx_len, const char *arg), <abspath.c 160>
   79 --------is_absolute_path: <>
   80 --------strbuf_reset: <>
   81 --------strbuf_add: void (struct strbuf sb, const void *data, size_t len), <strbuf.c 193>
   82 ---------strbuf_grow: 53
   83 ---------memcpy: <>
   84 ---------strbuf_setlen: <>
   85 --------strbuf_addstr: <>
   86 -------strlen: <>
   87 ------strtol: <>
   88 ------die: 29
   89 ----parse_options_usage: int (struct parse_opt_ctx_t ctx, const char *const *usagestr, const struct option *opts, int err), <parse-options.c 642>
   90 -----usage_with_options_internal: int (struct parse_opt_ctx_t ctx, const char *const *usagestr, const struct option *opts, int full, int err), <parse-options.c 552>
   91 ------fprintf: <>
   92 ------fprintf_ln: int (FILE *fp, const char *fmt, ...), <strbuf.c 624>
   93 -------va_start: <>
   94 -------vfprintf: <>
   95 -------va_end: <>
   96 -------putc: <>
   97 ------putchar: <>
   98 ------fputc: <>
   99 ------utf8_fprintf: int (FILE *stream, const char *format, ...), <utf8.c 423>
  100 -------va_start: <>
  101 -------strbuf_vaddf: 51
  102 -------va_end: <>
  103 -------fputs: <>
  104 -------utf8_strwidth: int (const char *string), <utf8.c 223>
  105 --------utf8_strnwidth: int (const char *string, int len, int skip_ansi), <utf8.c 206>
  106 ---------strlen: <>
  107 ---------display_mode_esc_sequence_len: size_t (const char *s), <utf8.c 12>
  108 ----------isdigit: <>
  109 ---------utf8_width: int (const char **start, size_t *remainder_p), <utf8.c 193>
  110 ----------pick_one_utf8_char: ucs_char_t (const char **start, size_t *remainder_p), <utf8.c 117>
  111 ----------git_wcwidth: int (ucs_char_t ch), <utf8.c 79>
  112 -----------bisearch: int (ucs_char_t ucs, const struct interval *table, int max), <utf8.c 27>
  113 -------strbuf_release: 63
  114 ------usage_argh: int (const struct option *opts, FILE *outfile), <parse-options.c 535>
  115 -------utf8_fprintf: 99
  116 ------fputs: <>
  117 ----parse_short_opt: int (struct parse_opt_ctx_t p, const struct option *options), <parse-options.c 188>
  118 -----get_value: 45
  119 -----isdigit: <>
  120 -----xmemdupz: void * (const void *data, size_t len), <wrapper.c 121>
  121 ------memcpy: <>
  122 ------xmallocz: void * (size_t size), <wrapper.c 105>
  123 -------do_xmallocz: void * (size_t size, int gentle), <wrapper.c 89>
  124 --------unsigned_add_overflows: <>
  125 --------error: 12
  126 --------die: 29
  127 --------do_xmalloc: void * (size_t size, int gentle), <wrapper.c 53>
  128 ---------memory_limit_check: int (size_t size, int gentle), <wrapper.c 12>
  129 ----------git_env_ulong: unsigned long (const char *k, unsigned long val), <config.c 1172>
  130 -----------getenv: <>
  131 -----------git_parse_ulong: int (const char *value, unsigned long *ret), <config.c 573>
  132 ------------git_parse_unsigned: int (const char *value, uintmax_t *ret, uintmax_t max), <config.c 528>
  133 -------------strtoumax: <>
  134 -------------parse_unit_factor: int (const char *end, uintmax_t *val), <config.c 479>
  135 --------------strcasecmp: <>
  136 ------------maximum_unsigned_value_of_type: <>
  137 -----------die: 29
  138 ----------error: 12
  139 ----------die: 29
  140 ---------malloc: <>
  141 ---------try_to_free_routine: void (*) (size_t size), <wrapper.c 10>
  142 ---------die: 29
  143 ---------error: 12
  144 ---------memset: <>
  145 -----free: <>
  146 ----check_typos: void (const char *arg, const struct option *options), <parse-options.c 331>
  147 -----strlen: <>
  148 -----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
  149 -----error: 12
  150 -----exit: <>
  151 ----xstrdup: 73
  152 ----strcmp: <>
  153 ----usage_with_options_internal: 90
  154 ----parse_long_opt: int (struct parse_opt_ctx_t p, const char *arg, const struct option *options), <parse-options.c 222>
  155 -----strchrnul: <>
  156 -----skip_prefix: <>
  157 -----opterror: 46
  158 -----strncmp: <>
  159 -----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
  160 -----get_value: 45
  161 -----error: 12
  162 ---exit: <>
  163 ---error: 12
  164 ---isascii: <>
  165 ---usage_with_options: void NORETURN (const char *const *usagestr, const struct option *opts), <parse-options.c 627>
  166 ----usage_with_options_internal: 90
  167 ----exit: <>
  168 ---precompose_argv: void (int argc, const char **argv), <compat/precompose_utf8.c 60>
  169 ----iconv_open: <>
  170 ----has_non_ascii: size_t (const char *s, size_t maxlen, size_t *strlen_c), <compat/precompose_utf8.c 16>
  171 ----reencode_string_iconv: char * (const char *in, size_t insz, iconv_t conv, int *outsz_p), <utf8.c 450>
  172 -----xmalloc: void * (size_t size), <wrapper.c 84>
  173 ------do_xmalloc: 127
  174 -----iconv: <>
  175 -----free: <>
  176 -----xrealloc: void * (void *ptr, size_t size), <wrapper.c 132>
  177 ------memory_limit_check: 128
  178 ------realloc: <>
  179 ------try_to_free_routine: void (*) (size_t size), <wrapper.c 10>
  180 ------die: 29
  181 ----iconv_close: <>
  182 ---parse_options_end: int (struct parse_opt_ctx_t ctx), <parse-options.c 499>
  183 ----memmove: <>
  184 --usage_with_options: 165
  185 --expand_user_path: char * (const char *path), <path.c 265>
  186 ---strchrnul: <>
  187 ---getenv: <>
  188 ---strbuf_addstr: <>
  189 ---getpw_str: struct passwd (const char *username, size_t len), <path.c 251>
  190 ---strbuf_detach: char * (struct strbuf sb, size_t *sz), <strbuf.c 37>
  191 ----strbuf_grow: 53
  192 ----strbuf_init: 65
  193 ---strbuf_release: 63
  194 --die: 29
  195 --do_cache: void (const char *socket, const char *action, int timeout, int flags), <credential-cache.c 61>
  196 ---strbuf_addf: 49
  197 ---strbuf_read: ssize_t (struct strbuf sb, int fd, size_t hint), <strbuf.c 360>
  198 ----strbuf_grow: 53
  199 ----xread: ssize_t (int fd, void *buf, size_t len), <wrapper.c 197>
  200 -----read: <>
  201 ----strbuf_release: 63
  202 ----strbuf_setlen: <>
  203 ---die_errno: void NORETURN (const char *fmt, ...), <usage.c 107>
  204 ----die_is_recursing: int (*) (void), <usage.c 62>
  205 ----fputs: <>
  206 ----exit: <>
  207 ----strerror: <>
  208 ----snprintf: <>
  209 ----va_start: <>
  210 ----die_routine: NORETURN_PTR void (*) (const char *err, va_list params), <usage.c 59>
  211 ----va_end: <>
  212 ---send_request: int (const char *socket, const struct strbuf *out), <credential-cache.c 11>
  213 ----unix_stream_connect: int (const char *path), <unix-socket.c 74>
  214 -----unix_sockaddr_init: int (struct sockaddr_un sa, const char *path, struct unix_sockaddr_context ctx), <unix-socket.c 38>
  215 ------strlen: <>
  216 ------find_last_dir_sep: <>
  217 ------strbuf_getcwd: int (struct strbuf sb), <strbuf.c 417>
  218 -------strbuf_grow: 53
  219 -------getcwd: <>
  220 -------strbuf_setlen: <>
  221 -------strlen: <>
  222 -------strbuf_release: 63
  223 -------strbuf_reset: <>
  224 ------strbuf_detach: 190
  225 ------chdir_len: int (const char *orig, int len), <unix-socket.c 12>
  226 -------xmemdupz: 120
  227 -------chdir: <>
  228 -------free: <>
  229 ------memset: <>
  230 ------memcpy: <>
  231 -----unix_stream_socket: int (void), <unix-socket.c 4>
  232 ------socket: <>
  233 ------die_errno: 203
  234 -----connect: <>
  235 -----unix_sockaddr_cleanup: void (struct unix_sockaddr_context ctx), <unix-socket.c 24>
  236 ------chdir: <>
  237 ------die: 29
  238 ------free: <>
  239 -----close: <>
  240 ----write_in_full: ssize_t (int fd, const void *buf, size_t count), <wrapper.c 265>
  241 -----xwrite: ssize_t (int fd, const void *buf, size_t len), <wrapper.c 215>
  242 ------write: <>
  243 ----die_errno: 203
  244 ----shutdown: <>
  245 ----read_in_full: ssize_t (int fd, void *buf, size_t count), <wrapper.c 246>
  246 -----xread: 199
  247 ----write_or_die: void (int fd, const void *buf, size_t count), <write_or_die.c 74>
  248 -----write_in_full: 240
  249 -----check_pipe: void (int err), <write_or_die.c 3>
  250 ------signal: <>
  251 ------raise: <>
  252 ------exit: <>
  253 -----die_errno: 203
  254 ---spawn_daemon: void (const char *socket), <credential-cache.c 38>
  255 ----start_command: int (struct child_process cmd), <run-command.c 278>
  256 -----pipe: int (int filedes[2]), <compat/mingw.c 668>
  257 ------CreatePipe: <>
  258 ------err_win_to_posix: int (DWORD winerr), <compat/mingw.c 11>
  259 ------GetLastError: <>
  260 ------CloseHandle: <>
  261 ------close: <>
  262 -----close: <>
  263 -----close_pair: inline void (int fd[2]), <run-command.c 72>
  264 ------close: <>
  265 -----error: 12
  266 -----strerror: <>
  267 -----argv_array_clear: void (struct argv_array array), <argv-array.c 61>
  268 ------free: <>
  269 ------argv_array_init: void (struct argv_array array), <argv-array.c 7>
  270 -----trace_argv_printf: void (const char **argv, const char *format, ...), <trace.c 209>
  271 ------va_start: <>
  272 ------trace_argv_vprintf_fl: void (const char *file, int line, const char **argv, const char *format, va_list ap), <trace.c 143>
  273 -------prepare_trace_line: int (const char *file, int line, struct trace_key key, struct strbuf buf), <trace.c 88>
  274 --------TRACE_KEY_INIT: <>
  275 --------trace_want: int (struct trace_key key), <trace.c 320>
  276 ---------get_trace_fd: int (struct trace_key key), <trace.c 29>
  277 ----------getenv: <>
  278 ----------strcmp: <>
  279 ----------strcasecmp: <>
  280 ----------strlen: <>
  281 ----------isdigit: <>
  282 ----------atoi: <>
  283 ----------is_absolute_path: <>
  284 ----------open: <>
  285 ----------fprintf: <>
  286 ----------strerror: <>
  287 --------set_try_to_free_routine: try_to_free_t (try_to_free_t routine), <wrapper.c 32>
  288 ---------try_to_free_routine: void (*) (size_t size), <wrapper.c 10>
  289 ---------do_nothing: void (size_t size), <wrapper.c 6>
  290 --------gettimeofday: int (struct timeval tv, void *tz), <compat/mingw.c 656>
  291 ---------GetSystemTimeAsFileTime: <>
  292 ---------filetime_to_hnsec: inline long long (const FILETIME *ft), <compat/mingw.c 426>
  293 --------localtime_r: struct tm (const time_t *timep, struct tm result), <compat/mingw.c 699>
  294 --------strbuf_addf: 49
  295 --------strbuf_addch: <>
  296 -------strbuf_vaddf: 51
  297 -------sq_quote_argv: void (struct strbuf dst, const char **argv, size_t maxlen), <quote.c 45>
  298 --------strbuf_grow: 53
  299 --------strbuf_addch: <>
  300 --------sq_quote_buf: void (struct strbuf dst, const char *src), <quote.c 23>
  301 ---------strbuf_detach: 190
  302 ---------strbuf_addch: <>
  303 ---------strcspn: <>
  304 ---------strbuf_add: 81
  305 ---------need_bs_quote: inline int (char c), <quote.c 18>
  306 ---------strbuf_addstr: <>
  307 ---------free: <>
  308 --------die: 29
  309 -------print_trace_line: void (struct trace_key key, struct strbuf buf), <trace.c 123>
  310 --------strbuf_complete_line: <>
  311 --------write_or_whine_pipe: int (int fd, const void *buf, size_t count, const char *msg), <write_or_die.c 82>
  312 ---------write_in_full: 240
  313 ---------check_pipe: 249
  314 ---------fprintf: <>
  315 ---------strerror: <>
  316 --------get_trace_fd: 276
  317 --------strbuf_release: 63
  318 ------va_end: <>
  319 -----fflush: <>
  320 -----fork: <>
  321 -----dup: <>
  322 -----set_cloexec: inline void (int fd), <run-command.c 228>
  323 ------fcntl: <>
  324 -----set_die_routine: void (NORETURN_PTR void (*routine) (const char *err, va_list params)), <usage.c 64>
  325 ------die_routine: NORETURN_PTR void (*) (const char *err, va_list params), <usage.c 59>
  326 -----die_child: NORETURN void (const char *err, va_list params), <run-command.c 216>
  327 ------vwritef: void (int fd, const char *prefix, const char *err, va_list params), <usage.c 16>
  328 -------vsnprintf: <>
  329 -------write_in_full: 240
  330 -------strlen: <>
  331 ------exit: <>
  332 -----set_error_routine: void (void (*routine) (const char *err, va_list params)), <usage.c 69>
  333 ------error_routine: void (*) (const char *err, va_list params), <usage.c 60>
  334 -----error_child: void (const char *err, va_list params), <run-command.c 222>
  335 ------vwritef: 327
  336 -----atexit: <>
  337 -----notify_parent: void (void), <run-command.c 206>
  338 ------xwrite: 241
  339 -----dup_devnull: inline void (int to), <run-command.c 79>
  340 ------open: <>
  341 ------die_errno: 203
  342 ------dup2: <>
  343 ------close: <>
  344 -----dup2: <>
  345 -----chdir: <>
  346 -----die_errno: 203
  347 -----strchr: <>
  348 -----putenv: <>
  349 -----unsetenv: <>
  350 -----execv_git_cmd: int (const char **argv), <exec_cmd.c 127>
  351 ------prepare_git_cmd: const char ** (const char **argv), <exec_cmd.c 111>
  352 -------xmalloc: 172
  353 ------trace_argv_printf: 270
  354 ------sane_execvp: int (const char *file, char *const argv[]), <run-command.c 129>
  355 -------execvp: <>
  356 -------strchr: <>
  357 -------exists_in_PATH: int (const char *file), <run-command.c 122>
  358 --------locate_in_PATH: char * (const char *file), <run-command.c 90>
  359 ---------getenv: <>
  360 ---------strchrnul: <>
  361 ---------strbuf_reset: <>
  362 ---------strbuf_add: 81
  363 ---------strbuf_addch: <>
  364 ---------strbuf_addstr: <>
  365 ---------access: <>
  366 ---------strbuf_detach: 190
  367 ---------strbuf_release: 63
  368 --------free: <>
  369 ------trace_printf: void (const char *format, ...), <trace.c 193>
  370 -------va_start: <>
  371 -------trace_vprintf_fl: void (const char *file, int line, struct trace_key key, const char *format, va_list ap), <trace.c 131>
  372 --------prepare_trace_line: 273
  373 --------strbuf_vaddf: 51
  374 --------print_trace_line: 309
  375 -------va_end: <>
  376 ------strerror: <>
  377 ------free: <>
  378 -----execv_shell_cmd: int (const char **argv), <run-command.c 192>
  379 ------prepare_shell_cmd: const char ** (const char **argv), <run-command.c 154>
  380 -------xmalloc: 172
  381 -------die: 29
  382 -------strcspn: <>
  383 -------strlen: <>
  384 -------strbuf_addf: 49
  385 -------strbuf_detach: 190
  386 ------trace_argv_printf: 270
  387 ------sane_execvp: 354
  388 ------free: <>
  389 -----sane_execvp: 354
  390 -----exit: <>
  391 -----mark_child_for_cleanup: void (pid_t pid), <run-command.c 43>
  392 ------xmalloc: 172
  393 ------atexit: <>
  394 ------cleanup_children_on_exit: void (void), <run-command.c 38>
  395 -------cleanup_children: void (int sig), <run-command.c 21>
  396 --------kill: <>
  397 --------free: <>
  398 ------sigchain_push_common: void (sigchain_fun f), <sigchain.c 45>
  399 -------sigchain_push: int (int sig, sigchain_fun f), <sigchain.c 19>
  400 --------check_signum: void (int sig), <sigchain.c 13>
  401 ---------die: 29
  402 --------ALLOC_GROW: <>
  403 --------signal: <>
  404 ------cleanup_children_on_signal: void (int sig), <run-command.c 31>
  405 -------cleanup_children: 395
  406 -------sigchain_pop: int (int sig), <sigchain.c 32>
  407 --------check_signum: 400
  408 --------signal: <>
  409 -------raise: <>
  410 -----read: <>
  411 -----wait_or_whine: int (pid_t pid, const char *argv0), <run-command.c 235>
  412 ------waitpid: pid_t (pid_t pid, int *status, int options), <compat/mingw.c 1866>
  413 -------OpenProcess: <>
  414 -------WaitForSingleObject: <>
  415 -------CloseHandle: <>
  416 -------GetExitCodeProcess: <>
  417 -------EnterCriticalSection: <>
  418 -------free: <>
  419 -------LeaveCriticalSection: <>
  420 ------error: 12
  421 ------strerror: <>
  422 ------WIFSIGNALED: <>
  423 ------WTERMSIG: <>
  424 ------WIFEXITED: <>
  425 ------WEXITSTATUS: <>
  426 ------clear_child_for_cleanup: void (pid_t pid), <run-command.c 57>
  427 -------free: <>
  428 -----open: <>
  429 -----prepare_git_cmd: 351
  430 -----prepare_shell_cmd: 379
  431 -----mingw_spawnvpe: pid_t (const char *cmd, const char **argv, char **deltaenv, const char *dir, int fhin, int fhout, int fherr), <compat/mingw.c 1059>
  432 ------get_path_split: char ** (void), <compat/mingw.c 817>
  433 -------mingw_getenv: char * (const char *name), <compat/mingw.c 1254>
  434 --------bsearchenv: int (char **env, const char *name, size_t size), <compat/mingw.c 1209>
  435 ---------compareenv: int (const void *v1, const void *v2), <compat/mingw.c 1190>
  436 ----------tolower: <>
  437 --------strchr: <>
  438 -------xstrdup: 73
  439 -------strchr: <>
  440 -------xmalloc: 172
  441 -------strlen: <>
  442 -------free: <>
  443 ------path_lookup: char * (const char *cmd, char **path, int exe_only), <compat/mingw.c 887>
  444 -------strlen: <>
  445 -------strcasecmp: <>
  446 -------strchr: <>
  447 -------xstrdup: 73
  448 -------lookup_prog: char * (const char *dir, const char *cmd, int isexe, int exe_only), <compat/mingw.c 869>
  449 --------snprintf: <>
  450 --------access: <>
  451 --------xstrdup: 73
  452 --------strlen: <>
  453 --------GetFileAttributes: <>
  454 ------parse_interpreter: const char * (const char *cmd), <compat/mingw.c 779>
  455 -------strlen: <>
  456 -------strcasecmp: <>
  457 -------open: <>
  458 -------read: <>
  459 -------close: <>
  460 -------strcspn: <>
  461 -------strrchr: <>
  462 -------strchr: <>
  463 ------mingw_spawnve_fd: pid_t (const char *cmd, const char **argv, char **deltaenv, const char *dir, int prepend_cmd, int fhin, int fhout, int fherr), <compat/mingw.c 950>
  464 -------BOOL: <>
  465 -------CreateFile: <>
  466 -------CloseHandle: <>
  467 -------memset: <>
  468 -------winansi_get_osfhandle: HANDLE (int fd), <compat/winansi.c 572>
  469 --------isatty: <>
  470 --------GetFileType: <>
  471 -------xutftowcs_path: <>
  472 -------strbuf_init: 65
  473 -------quote_arg: const char * (const char *arg), <compat/mingw.c 724>
  474 --------isspace: <>
  475 --------xmalloc: 172
  476 -------strbuf_addstr: <>
  477 -------free: <>
  478 -------strbuf_addch: <>
  479 -------xmalloc: 172
  480 -------xutftowcs: <>
  481 -------strbuf_release: 63
  482 -------make_environment_block: wchar_t * (char **deltaenv), <compat/mingw.c 913>
  483 --------xmalloc: 172
  484 --------memcpy: <>
  485 --------do_putenv: int (char **env, const char *name, int size, int free_old), <compat/mingw.c 1230>
  486 ---------bsearchenv: 434
  487 ---------free: <>
  488 ---------strchr: <>
  489 ---------memmove: <>
  490 --------strlen: <>
  491 --------ALLOC_GROW: <>
  492 --------xutftowcs: <>
  493 --------free: <>
  494 -------CreateProcessW: <>
  495 -------EnterCriticalSection: <>
  496 -------LeaveCriticalSection: <>
  497 ------free: <>
  498 ------free_path_split: void (char **path), <compat/mingw.c 853>
  499 -------free: <>
  500 -----free: <>
  501 ----die_errno: 203
  502 ----read_in_full: 245
  503 ----memcmp: <>
  504 ----die: 29
  505 ----close: <>
  506 ---strbuf_release: 63
  507 --OPT_BOOL: <>
  508 --N_: <>
  509 --check_socket_directory: void (const char *path), <credential-cache--daemon.c 232>
  510 ---xstrdup: 73
  511 ---dirname: <>
  512 ---stat: <>
  513 ---die: 29
  514 ---free: <>
  515 ---safe_create_leading_directories_const: enum scld_error (const char *path), <sha1_file.c 164>
  516 ---die_errno: 203
  517 ---mkdir: <>
  518 --atexit: <>
  519 --cleanup_socket: void (void), <credential-cache--daemon.c 9>
  520 ---unlink: <>
  521 --sigchain_push_common: 398
  522 --cleanup_socket_on_signal: void (int sig), <credential-cache--daemon.c 15>
  523 ---cleanup_socket: 519
  524 ---sigchain_pop: 406
  525 ---raise: <>
  526 --serve_cache: void (const char *socket_path, int debug), <credential-cache--daemon.c 205>
  527 ---unix_stream_listen: int (const char *path), <unix-socket.c 96>
  528 ----unlink: <>
  529 ----unix_sockaddr_init: 214
  530 ----unix_stream_socket: 231
  531 ----bind: <>
  532 ----listen: <>
  533 ----unix_sockaddr_cleanup: 235
  534 ----close: <>
  535 ---die_errno: 203
  536 ---printf: <>
  537 ---fclose: <>
  538 ---freopen: <>
  539 ---serve_cache_loop: int (int fd), <credential-cache--daemon.c 163>
  540 ----check_expirations: int (void), <credential-cache--daemon.c 63>
  541 -----time: <>
  542 -----credential_clear: void (struct credential c), <credential.c 14>
  543 ------free: <>
  544 ------string_list_clear: void (struct string_list list, int free_util), <string-list.c 149>
  545 -------free: <>
  546 ------credential_init: void (struct credential c), <credential.c 8>
  547 -------memset: <>
  548 -----memcpy: <>
  549 ----poll: <>
  550 ----die_errno: 203
  551 ----accept: <>
  552 ----warning: void (const char *warn, ...), <usage.c 152>
  553 -----va_start: <>
  554 -----warn_routine: void (*) (const char *err, va_list params), <usage.c 61>
  555 -----va_end: <>
  556 ----strerror: <>
  557 ----dup: <>
  558 ----close: <>
  559 ----xfdopen: FILE * (int fd, const char *mode), <wrapper.c 314>
  560 -----fdopen: <>
  561 -----die_errno: 203
  562 ----serve_one_client: void (FILE *in, FILE *out), <credential-cache--daemon.c 127>
  563 -----read_request: int (FILE *fh, struct credential c, struct strbuf action, int *timeout), <credential-cache--daemon.c 107>
  564 ------strbuf_getline: int (struct strbuf sb, FILE *fp, int term), <strbuf.c 459>
  565 -------strbuf_getwholeline: int (struct strbuf sb, FILE *fp, int term), <strbuf.c 438>
  566 --------feof: <>
  567 --------strbuf_reset: <>
  568 --------fgetc: <>
  569 --------strbuf_grow: 53
  570 -------strbuf_setlen: <>
  571 ------skip_prefix: <>
  572 ------error: 12
  573 ------strbuf_addstr: <>
  574 ------atoi: <>
  575 ------credential_read: int (struct credential c, FILE *fp), <credential.c 141>
  576 -------strbuf_getline: 564
  577 -------strchr: <>
  578 -------warning: 552
  579 -------strbuf_release: 63
  580 -------strcmp: <>
  581 -------free: <>
  582 -------xstrdup: 73
  583 -------credential_from_url: void (struct credential c, const char *url), <credential.c 321>
  584 --------credential_clear: 542
  585 --------strstr: <>
  586 --------strchr: <>
  587 --------strchrnul: <>
  588 --------url_decode_mem: char * (const char *url, int len), <url.c 94>
  589 ---------memchr: <>
  590 ---------strbuf_add: 81
  591 ---------url_decode_internal: char * (const char **query, int len, const char *stop_at, struct strbuf out, int decode_plus), <url.c 51>
  592 ----------strchr: <>
  593 ----------url_decode_char: int (const char *q), <url.c 32>
  594 ----------strbuf_addch: <>
  595 ----------strbuf_detach: 190
  596 --------xmemdupz: 120
  597 --------url_decode: char * (const char *url), <url.c 89>
  598 ---------url_decode_mem: 588
  599 ---------strlen: <>
  600 --------strlen: <>
  601 -------git_config_bool: int (const char *name, const char *value), <config.c 659>
  602 --------git_config_bool_or_int: int (const char *name, const char *value, int *is_bool), <config.c 648>
  603 ---------git_config_maybe_bool_text: int (const char *name, const char *value), <config.c 621>
  604 ----------strcasecmp: <>
  605 ---------git_config_int: int (const char *name, const char *value), <config.c 597>
  606 -----strcmp: <>
  607 -----lookup_credential: struct credential_cache_entry (const struct credential *c), <credential-cache--daemon.c 43>
  608 -----fprintf: <>
  609 -----exit: <>
  610 -----remove_credential: void (const struct credential *c), <credential-cache--daemon.c 54>
  611 ------lookup_credential: struct credential_cache_entry (const struct credential *c), <credential-cache--daemon.c 43>
  612 -----warning: 552
  613 -----cache_credential: void (struct credential c, int timeout), <credential-cache--daemon.c 30>
  614 ------ALLOC_GROW: <>
  615 ------memcpy: <>
  616 ------memset: <>
  617 ------time: <>
  618 -----credential_clear: 542
  619 -----strbuf_release: 63
  620 ----fclose: <>
  621 ---close: <>
  622 ---unlink: <>
  623 --usage: void NORETURN (const char *err), <usage.c 88>
  624 ---usagef: void NORETURN (const char *err, ...), <usage.c 79>
  625 ----va_start: <>
  626 ----usage_routine: NORETURN_PTR void (*) (const char *err, va_list params), <usage.c 58>
  627 ----va_end: <>
  628 --umask: <>
  629 --credential_read: 575
  630 --lookup_credential: int (const char *fn, struct credential c), <credential-store.c 112>
  631 ---parse_credential_file: void (const char *fn, struct credential c, void (*match_cb) (struct credential *), void (*other_cb) (struct strbuf *)), <credential-store.c 9>
  632 ----fopen: <>
  633 ----die_errno: 203
  634 ----strbuf_getline: 564
  635 ----credential_from_url: 583
  636 ----credential_match: int (const struct credential *want, const struct credential *have), <credential.c 26>
  637 -----CHECK: <>
  638 ----credential_clear: 542
  639 ----strbuf_release: 63
  640 ----fclose: <>
  641 ---print_entry: void (struct credential c), <credential-store.c 43>
  642 ----printf: <>
  643 --remove_credential: void (const char *fn, struct credential c), <credential-store.c 98>
  644 ---rewrite_credential_file: void (const char *fn, struct credential c, struct strbuf extra), <credential-store.c 55>
  645 ----hold_lock_file_for_update: int (struct lock_file lk, const char *path, int flags), <lockfile.c 182>
  646 -----lock_file: int (struct lock_file lk, const char *path, int flags), <lockfile.c 102>
  647 ------strlen: <>
  648 ------sigchain_push_common: 398
  649 ------remove_lock_files_on_signal: void (int signo), <lockfile.c 30>
  650 -------remove_lock_files: void (int skip_fclose), <lockfile.c 10>
  651 --------getpid: <>
  652 --------rollback_lock_file: void (struct lock_file lk), <lockfile.c 330>
  653 ---------close_lock_file: int (struct lock_file lk), <lockfile.c 248>
  654 ----------ferror: <>
  655 ----------fclose: <>
  656 ----------close: <>
  657 ----------rollback_lock_file: 652
  658 ---------unlink_or_warn: int (const char *file), <wrapper.c 506>
  659 ----------warn_if_unremovable: int (const char *op, const char *file, int rc), <wrapper.c 481>
  660 -----------warning: 552
  661 -----------strerror: <>
  662 ----------unlink: <>
  663 ---------strbuf_reset: <>
  664 -------sigchain_pop: 406
  665 -------raise: <>
  666 ------atexit: <>
  667 ------remove_lock_files_on_exit: void (void), <lockfile.c 25>
  668 -------remove_lock_files: 650
  669 ------die: 29
  670 ------strbuf_init: 65
  671 ------strbuf_add_absolute_path: void (struct strbuf sb, const char *path), <strbuf.c 587>
  672 -------die: 29
  673 -------is_absolute_path: <>
  674 -------xgetcwd: char * (void), <wrapper.c 560>
  675 --------strbuf_getcwd: 217
  676 --------die_errno: 203
  677 --------strbuf_detach: 190
  678 -------getenv: <>
  679 -------strcmp: <>
  680 -------stat: <>
  681 -------strbuf_addstr: <>
  682 -------is_dir_sep: <>
  683 -------strbuf_addch: <>
  684 -------free: <>
  685 ------strbuf_add: 81
  686 ------resolve_symlink: void (struct strbuf path), <lockfile.c 77>
  687 -------strbuf_readlink: int (struct strbuf sb, const char *path, size_t hint), <strbuf.c 389>
  688 --------strbuf_grow: 53
  689 --------readlink: <>
  690 --------strbuf_setlen: <>
  691 --------strbuf_release: 63
  692 -------is_absolute_path: <>
  693 -------strbuf_reset: <>
  694 -------trim_last_path_component: void (struct strbuf path), <lockfile.c 44>
  695 --------strbuf_setlen: <>
  696 -------strbuf_addbuf: <>
  697 ------strbuf_release: 63
  698 ------strbuf_addstr: <>
  699 ------open: <>
  700 ------strbuf_reset: <>
  701 ------getpid: <>
  702 ------adjust_shared_perm: int (const char *path), <path.c 410>
  703 -------get_st_mode_bits: int (const char *path, int *mode), <path.c 8>
  704 --------lstat: <>
  705 -------calc_shared_perm: int (int mode), <path.c 387>
  706 -------S_ISDIR: <>
  707 -------chmod: <>
  708 ------error: 12
  709 ------rollback_lock_file: 652
  710 -----unable_to_lock_die: NORETURN void (const char *path, int err), <lockfile.c 173>
  711 ------unable_to_lock_message: void (const char *path, int err, struct strbuf buf), <lockfile.c 160>
  712 -------strbuf_addf: 49
  713 -------absolute_path: const char * (const char *path), <abspath.c 147>
  714 --------strbuf_reset: <>
  715 --------strbuf_add_absolute_path: 671
  716 -------strerror: <>
  717 ------die: 29
  718 ----die_errno: 203
  719 ----print_line: void (struct strbuf buf), <credential-store.c 49>
  720 -----strbuf_addch: <>
  721 -----write_or_die: 247
  722 ----parse_credential_file: 631
  723 ----commit_lock_file: int (struct lock_file lk), <lockfile.c 310>
  724 -----die: 29
  725 -----strcmp: <>
  726 -----strbuf_add: 81
  727 -----commit_lock_file_to: int (struct lock_file lk, const char *path), <lockfile.c 290>
  728 ------die: 29
  729 ------close_lock_file: 653
  730 ------rename: <>
  731 ------rollback_lock_file: 652
  732 ------strbuf_reset: <>
  733 -----strbuf_reset: <>
  734 --store_credential: void (const char *fn, struct credential c), <credential-store.c 67>
  735 ---strbuf_addf: 49
  736 ---strbuf_addstr_urlencode: void (struct strbuf sb, const char *s, int reserved), <strbuf.c 562>
  737 ----strbuf_add_urlencode: void (struct strbuf sb, const char *s, size_t len, int reserved), <strbuf.c 548>
  738 -----strbuf_grow: 53
  739 -----is_rfc3986_unreserved: int (char ch), <strbuf.c 542>
  740 ------isalnum: <>
  741 -----is_rfc3986_reserved: int (char ch), <strbuf.c 531>
  742 -----strbuf_addch: <>
  743 -----strbuf_addf: 49
  744 ----strlen: <>
  745 ---strbuf_addch: <>
  746 ---rewrite_credential_file: 644
  747 ---strbuf_release: 63
  748 --git_setup_gettext: void (void), <gettext.c 157>
  749 ---getenv: <>
  750 ---bindtextdomain: <>
  751 ---setlocale: <>
  752 ---init_gettext_charset: void (const char *domain), <gettext.c 69>
  753 ----setlocale: <>
  754 ----locale_charset: <>
  755 ----bind_textdomain_codeset: <>
  756 ----test_vsnprintf: int (const char *fmt, ...), <gettext.c 57>
  757 -----va_start: <>
  758 -----vsnprintf: <>
  759 -----va_end: <>
  760 ---textdomain: <>
  761 --git_extract_argv0_path: const char * (const char *argv0), <exec_cmd.c 40>
  762 ---strlen: <>
  763 ---is_dir_sep: <>
  764 ---xstrndup: char * (const char *str, size_t len), <wrapper.c 126>
  765 ----memchr: <>
  766 ----xmemdupz: 120
  767 --skip_prefix: <>
  768 --string_list_append: inline void (string_list_ty *slp, const char *s), <sh-i18n--envsubst.c 206>
  769 ---REALLOC_ARRAY: <>
  770 --xstrdup_tolower: char * (const char *string), <strbuf.c 636>
  771 ---strlen: <>
  772 ---xmalloc: 172
  773 ---tolower: <>
  774 --strtoul: <>
  775 --atoi: <>
  776 --enable_service: void (const char *name, int ena), <daemon.c 484>
  777 ---ARRAY_SIZE: <>
  778 ---strcmp: <>
  779 ---die: 29
  780 --make_service_overridable: void (const char *name, int ena), <daemon.c 496>
  781 ---ARRAY_SIZE: <>
  782 ---strcmp: <>
  783 ---die: 29
  784 --openlog: <>
  785 --set_die_routine: 324
  786 --daemon_die: void NORETURN (const char *err, va_list params), <daemon.c 118>
  787 ---logreport: void (int priority, const char *err, va_list params), <daemon.c 79>
  788 ----vsnprintf: <>
  789 ----syslog: <>
  790 ----fprintf: <>
  791 ----getpid: <>
  792 ----vfprintf: <>
  793 ----fputc: <>
  794 ----fflush: <>
  795 ---exit: <>
  796 --setvbuf: <>
  797 --prepare_credentials: struct credentials (const char *user_name, const char *group_name), <daemon.c 1146>
  798 --is_directory: int (const char *path), <abspath.c 8>
  799 ---stat: <>
  800 ---S_ISDIR: <>
  801 --freopen: <>
  802 --die_errno: 203
  803 --execute: int (void), <daemon.c 672>
  804 ---getenv: <>
  805 ---hostinfo_init: void (struct hostinfo hi), <daemon.c 655>
  806 ----memset: <>
  807 ----strbuf_init: 65
  808 ---loginfo: void (const char *err, ...), <daemon.c 108>
  809 ----va_start: <>
  810 ----logreport: 787
  811 ----va_end: <>
  812 ---alarm: <>
  813 ---packet_read: int (int fd, char **src_buf, size_t *src_len, char *buffer, unsigned size, int options), <pkt-line.c 164>
  814 ----get_packet_data: int (int fd, char **src_buf, size_t *src_size, void *dst, unsigned size, int options), <pkt-line.c 108>
  815 -----die: 29
  816 -----memcpy: <>
  817 -----read_in_full: 245
  818 -----die_errno: 203
  819 ----packet_length: int (const char *linelen), <pkt-line.c 139>
  820 ----die: 29
  821 ----packet_trace: void (const char *buf, unsigned int len, int write), <pkt-line.c 13>
  822 -----trace_want: 275
  823 -----strbuf_init: 65
  824 -----strbuf_addf: 49
  825 -----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
  826 -----strbuf_addstr: <>
  827 -----trace_disable: void (struct trace_key key), <trace.c 76>
  828 ------close: <>
  829 -----strbuf_addch: <>
  830 -----trace_strbuf: void (struct trace_key key, const struct strbuf *data), <trace.c 217>
  831 ------trace_strbuf_fl: void (const char *file, int line, struct trace_key key, const struct strbuf *data), <trace.c 158>
  832 -------prepare_trace_line: 273
  833 -------strbuf_addbuf: <>
  834 -------print_trace_line: 309
  835 -----strbuf_release: 63
  836 ---strlen: <>
  837 ---parse_host_arg: void (struct hostinfo hi, char *extra_args, int buflen), <daemon.c 568>
  838 ----strncasecmp: <>
  839 ----strlen: <>
  840 ----parse_host_and_port: void (char *hostport, char **host, char **port), <daemon.c 508>
  841 -----strchr: <>
  842 -----die: 29
  843 -----strrchr: <>
  844 ----sanitize_client: void (struct strbuf out, const char *in), <daemon.c 541>
  845 -----strbuf_addch: <>
  846 -----strbuf_setlen: <>
  847 ----canonicalize_client: void (struct strbuf out, const char *in), <daemon.c 559>
  848 -----sanitize_client: 844
  849 -----strbuf_tolower: void (struct strbuf sb), <strbuf.c 110>
  850 ------tolower: <>
  851 ----die: 29
  852 ---ARRAY_SIZE: <>
  853 ---skip_prefix: <>
  854 ---run_service: int (const char *dir, struct daemon_service service, struct hostinfo hi), <daemon.c 352>
  855 ----loginfo: 808
  856 ----logerror: <>
  857 ----daemon_error: int (const char *dir, const char *msg), <daemon.c 281>
  858 -----packet_write: void (int fd, const char *fmt, ...), <pkt-line.c 87>
  859 ------strbuf_reset: <>
  860 ------va_start: <>
  861 ------format_packet: void (struct strbuf out, const char *fmt, va_list args), <pkt-line.c 67>
  862 -------strbuf_addstr: <>
  863 -------strbuf_vaddf: 51
  864 -------die: 29
  865 -------packet_trace: 821
  866 ------va_end: <>
  867 ------write_or_die: 247
  868 ----path_ok: const char * (const char *directory, struct hostinfo hi), <daemon.c 160>
  869 -----daemon_avoid_alias: int (const char *p), <path.c 775>
  870 -----logerror: <>
  871 -----strlen: <>
  872 -----strchr: <>
  873 -----loginfo: 808
  874 -----snprintf: <>
  875 -----strbuf_expand: void (struct strbuf sb, const char *format, expand_fn_t fn, void *context), <strbuf.c 292>
  876 ------strchrnul: <>
  877 ------strbuf_add: 81
  878 ------strbuf_addch: <>
  879 -----expand_path: size_t (struct strbuf sb, const char *placeholder, void *ctx), <daemon.c 129>
  880 ------strbuf_addbuf: <>
  881 ------strbuf_addstr: <>
  882 ------get_canon_hostname: const char * (struct hostinfo hi), <daemon.c 67>
  883 -------lookup_hostname: void (struct hostinfo hi), <daemon.c 601>
  884 --------memset: <>
  885 --------getaddrinfo: <>
  886 --------inet_ntop: const char * (int af, const void *src, char *dst, size_t size), <compat/inet_ntop.c 171>
  887 ---------inet_ntop4: const char * (const u_char *src, char *dst, size_t size), <compat/inet_ntop.c 47>
  888 ----------snprintf: <>
  889 ----------strcpy: <>
  890 ---------inet_ntop6: const char * (const u_char *src, char *dst, size_t size), <compat/inet_ntop.c 72>
  891 ----------memset: <>
  892 ----------inet_ntop4: 887
  893 ----------strlen: <>
  894 ----------snprintf: <>
  895 ----------strcpy: <>
  896 --------strbuf_addstr: <>
  897 --------sanitize_client: 844
  898 --------strbuf_addbuf: <>
  899 --------freeaddrinfo: <>
  900 --------gethostbyname: <>
  901 --------htons: <>
  902 --------memcpy: <>
  903 ------get_ip_address: const char * (struct hostinfo hi), <daemon.c 73>
  904 -------lookup_hostname: 883
  905 -----strlcpy: <>
  906 -----strbuf_release: 63
  907 -----enter_repo: const char * (const char *path, int strict), <path.c 315>
  908 ------strlen: <>
  909 ------strncpy: <>
  910 ------strcpy: <>
  911 ------expand_user_path: 185
  912 ------free: <>
  913 ------stat: <>
  914 ------S_ISREG: <>
  915 ------S_ISDIR: <>
  916 ------is_git_directory: int (const char *suspect), <setup.c 239>
  917 -------strlen: <>
  918 -------die: 29
  919 -------strcpy: <>
  920 -------getenv: <>
  921 -------access: <>
  922 -------validate_headref: int (const char *path), <path.c 200>
  923 --------lstat: <>
  924 --------S_ISLNK: <>
  925 --------readlink: <>
  926 --------memcmp: <>
  927 --------open: <>
  928 --------read_in_full: 245
  929 --------close: <>
  930 --------isspace: <>
  931 --------get_sha1_hex: int (const char *hex, unsigned char *sha1), <hex.c 38>
  932 ---------hexval: <>
  933 ------strcat: <>
  934 ------read_gitfile: const char * (const char *path), <setup.c 339>
  935 -------stat: <>
  936 -------S_ISREG: <>
  937 -------open: <>
  938 -------die_errno: 203
  939 -------xmalloc: 172
  940 -------read_in_full: 245
  941 -------close: <>
  942 -------die: 29
  943 -------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
  944 -------is_absolute_path: <>
  945 -------strrchr: <>
  946 -------strncpy: <>
  947 -------free: <>
  948 -------is_git_directory: 916
  949 -------real_path: const char * (const char *path), <abspath.c 133>
  950 --------real_path_internal: const char * (const char *path, int die_on_error), <abspath.c 34>
  951 ---------die: 29
  952 ---------strbuf_reset: <>
  953 ---------strbuf_addstr: <>
  954 ---------is_directory: 798
  955 ---------find_last_dir_sep: <>
  956 ---------xstrdup: 73
  957 ---------strbuf_setlen: <>
  958 ---------xmemdupz: 120
  959 ---------strbuf_getcwd: 217
  960 ---------die_errno: 203
  961 ---------chdir: <>
  962 ---------is_dir_sep: <>
  963 ---------strbuf_addch: <>
  964 ---------free: <>
  965 ---------lstat: <>
  966 ---------S_ISLNK: <>
  967 ---------strbuf_readlink: 687
  968 ---------strbuf_swap: <>
  969 ---------strbuf_release: 63
  970 ------chdir: <>
  971 ------access: <>
  972 ------validate_headref: 922
  973 ------set_git_dir: int (const char *path), <environment.c 277>
  974 -------setenv: <>
  975 -------error: 12
  976 -------setup_git_env: void (void), <environment.c 144>
  977 --------getenv: <>
  978 --------read_gitfile: 934
  979 --------xstrdup: 73
  980 --------git_path_from_env: char * (const char *envvar, const char *path), <environment.c 138>
  981 ---------getenv: <>
  982 ---------xstrdup: 73
  983 ---------git_pathdup: char * (const char *fmt, ...), <path.c 82>
  984 ----------va_start: <>
  985 ----------vsnpath: char * (char *buf, size_t n, const char *fmt, va_list args), <path.c 52>
  986 -----------get_git_dir: const char * (void), <environment.c 172>
  987 ------------setup_git_env: 976
  988 -----------strlen: <>
  989 -----------memcpy: <>
  990 -----------is_dir_sep: <>
  991 -----------vsnprintf: <>
  992 -----------cleanup_path: char * (char *path), <path.c 26>
  993 ------------memcmp: <>
  994 -----------strlcpy: <>
  995 ----------va_end: <>
  996 ----------xstrdup: 73
  997 --------expand_namespace: char * (const char *raw_namespace), <environment.c 117>
  998 ---------xstrdup: 73
  999 ---------strbuf_addstr: <>
 1000 ---------strbuf_split: <>
 1001 ---------strbuf_reset: <>
 1002 ---------strcmp: <>
 1003 ---------strbuf_addf: 49
 1004 ---------strbuf_list_free: void (struct strbuf sbs), <strbuf.c 144>
 1005 ----------strbuf_release: 63
 1006 ----------free: <>
 1007 ---------check_refname_format: int (const char *refname, int flags), <refs.c 108>
 1008 ----------strcmp: <>
 1009 ----------check_refname_component: int (const char *refname, int flags), <refs.c 73>
 1010 -----------memcmp: <>
 1011 ---------die: 29
 1012 ---------strbuf_addch: <>
 1013 ---------strbuf_detach: 190
 1014 --------strlen: <>
 1015 --------set_alternate_shallow_file: void (const char *path, int override), <shallow.c 18>
 1016 ---------die: 29
 1017 ---------free: <>
 1018 ---------xstrdup_or_null: <>
 1019 ------check_repository_format: int (void), <setup.c 820>
 1020 -------check_repository_format_gently: int (const char *gitdir, int *nongit_ok), <setup.c 307>
 1021 --------snprintf: <>
 1022 --------git_config_early: int (config_fn_t fn, void *data, const char *repo_config), <config.c 1185>
 1023 ---------home_config_paths: void (char **global, char **xdg, char *file), <path.c 133>
 1024 ----------getenv: <>
 1025 ----------mkpathdup: char * (const char *fmt, ...), <path.c 92>
 1026 -----------va_start: <>
 1027 -----------strbuf_vaddf: 51
 1028 -----------va_end: <>
 1029 -----------xstrdup: 73
 1030 -----------cleanup_path: 992
 1031 -----------strbuf_release: 63
 1032 ----------free: <>
 1033 ---------git_config_system: int (void), <config.c 1180>
 1034 ----------git_env_bool: int (const char *k, int def), <config.c 1162>
 1035 -----------getenv: <>
 1036 -----------git_config_bool: 601
 1037 ---------access_or_die: int (const char *path, int mode, unsigned flag), <wrapper.c 540>
 1038 ----------access: <>
 1039 ----------access_error_is_ok: int (int err, unsigned flag), <wrapper.c 526>
 1040 ----------die_errno: 203
 1041 ---------git_etc_gitconfig: const char * (void), <config.c 1150>
 1042 ----------system_path: char * (const char *path), <exec_cmd.c 9>
 1043 -----------is_absolute_path: <>
 1044 -----------xstrdup: 73
 1045 -----------assert: <>
 1046 -----------strip_path_suffix: char * (const char *path, const char *suffix), <path.c 752>
 1047 ------------strlen: <>
 1048 ------------is_dir_sep: <>
 1049 ------------chomp_trailing_dir_sep: inline int (const char *path, int len), <path.c 740>
 1050 -------------is_dir_sep: <>
 1051 ------------xstrndup: 764
 1052 -----------trace_printf: 369
 1053 -----------strbuf_addf: 49
 1054 -----------strbuf_detach: 190
 1055 ---------git_config_from_file: int (config_fn_t fn, const char *filename, void *data), <config.c 1084>
 1056 ----------fopen: <>
 1057 ----------do_config_from_file: int (config_fn_t fn, const char *name, const char *path, FILE *f, void *data), <config.c 1063>
 1058 -----------config_file_fgetc: int (struct config_source conf), <config.c 50>
 1059 ------------fgetc: <>
 1060 -----------config_file_ungetc: int (int c, struct config_source conf), <config.c 55>
 1061 ------------ungetc: <>
 1062 -----------config_file_ftell: long (struct config_source conf), <config.c 60>
 1063 ------------ftell: <>
 1064 -----------do_config_from: int (struct config_source top, config_fn_t fn, void *data), <config.c 1041>
 1065 ------------strbuf_init: 65
 1066 ------------git_parse_source: int (config_fn_t fn, void *data), <config.c 413>
 1067 -------------get_next_char: int (void), <config.c 234>
 1068 -------------isspace: <>
 1069 -------------strbuf_reset: <>
 1070 -------------get_base_var: int (struct strbuf name), <config.c 397>
 1071 --------------get_next_char: 1067
 1072 --------------isspace: <>
 1073 --------------get_extended_base_var: int (struct strbuf name, int c), <config.c 361>
 1074 ---------------get_next_char: 1067
 1075 ---------------isspace: <>
 1076 ---------------strbuf_addch: <>
 1077 --------------iskeychar: inline int (int c), <config.c 318>
 1078 ---------------isalnum: <>
 1079 --------------strbuf_addch: <>
 1080 --------------tolower: <>
 1081 -------------strbuf_addch: <>
 1082 -------------isalpha: <>
 1083 -------------strbuf_setlen: <>
 1084 -------------tolower: <>
 1085 -------------get_value: int (config_fn_t fn, void *data, struct strbuf name), <config.c 323>
 1086 --------------get_next_char: 1067
 1087 --------------iskeychar: 1077
 1088 --------------strbuf_addch: <>
 1089 --------------tolower: <>
 1090 --------------parse_value: char * (void), <config.c 257>
 1091 ---------------strbuf_reset: <>
 1092 ---------------get_next_char: 1067
 1093 ---------------isspace: <>
 1094 ---------------strbuf_addch: <>
 1095 -------------die: 29
 1096 -------------error: 12
 1097 ------------strbuf_release: 63
 1098 ----------fclose: <>
 1099 ---------git_config_from_parameters: int (config_fn_t fn, void *data), <config.c 203>
 1100 ----------getenv: <>
 1101 ----------xstrdup: 73
 1102 ----------sq_dequote_to_argv: int (char *arg, const char ***argv, int *nr, int *alloc), <quote.c 130>
 1103 -----------sq_dequote_to_argv_internal: int (char *arg, const char ***argv, int *nr, int *alloc, struct argv_array array), <quote.c 107>
 1104 ------------sq_dequote_step: char * (char *arg, char **next), <quote.c 59>
 1105 -------------need_bs_quote: inline int (char c), <quote.c 18>
 1106 -------------isspace: <>
 1107 ------------ALLOC_GROW: <>
 1108 ------------argv_array_push: void (struct argv_array array, const char *value), <argv-array.c 24>
 1109 -------------argv_array_push_nodup: void (struct argv_array array, const char *value), <argv-array.c 14>
 1110 --------------ALLOC_GROW: <>
 1111 -------------xstrdup: 73
 1112 ----------free: <>
 1113 ----------error: 12
 1114 ----------git_config_parse_parameter: int (const char *text, config_fn_t fn, void *data), <config.c 172>
 1115 -----------strbuf_split_str: <>
 1116 -----------error: 12
 1117 -----------strbuf_setlen: <>
 1118 -----------strbuf_trim: void (struct strbuf sb), <strbuf.c 71>
 1119 ------------strbuf_rtrim: void (struct strbuf sb), <strbuf.c 76>
 1120 -------------isspace: <>
 1121 ------------strbuf_ltrim: void (struct strbuf sb), <strbuf.c 83>
 1122 -------------isspace: <>
 1123 -------------memmove: <>
 1124 -----------strbuf_list_free: 1004
 1125 -----------strbuf_tolower: 849
 1126 ---------die: 29
 1127 ---------free: <>
 1128 --------check_repository_format_version: int (const char *var, const char *value, void *cb), <setup.c 800>
 1129 ---------strcmp: <>
 1130 ---------git_config_int: int (const char *name, const char *value), <config.c 597>
 1131 ---------git_config_perm: int (const char *var, const char *value), <setup.c 749>
 1132 ----------strcmp: <>
 1133 ----------strtol: <>
 1134 ----------git_config_bool: 601
 1135 ----------die: 29
 1136 ---------git_config_bool: 601
 1137 ---------config_error_nonbool: int (const char *var), <config.c 2314>
 1138 ----------error: 12
 1139 ---------free: <>
 1140 ---------xstrdup: 73
 1141 --------die: 29
 1142 --------warning: 552
 1143 -------get_git_dir: 986
 1144 -----memcmp: <>
 1145 ----access: <>
 1146 ----strbuf_addf: 49
 1147 ----git_config_get_bool: int (const char *key, int *dest), <config.c 1569>
 1148 -----git_config_check_init: void (void), <config.c 1514>
 1149 ------git_configset_init: void (struct config_set cs), <config.c 1374>
 1150 -------hashmap_init: void (struct hashmap map, hashmap_cmp_fn equals_function, size_t initial_size), <hashmap.c 123>
 1151 --------always_equal: int (const void *unused1, const void *unused2, const void *unused3), <hashmap.c 118>
 1152 --------alloc_table: void (struct hashmap map, unsigned int size), <hashmap.c 59>
 1153 ---------xcalloc: void * (size_t nmemb, size_t size), <wrapper.c 151>
 1154 ----------memory_limit_check: 128
 1155 ----------calloc: <>
 1156 ----------try_to_free_routine: void (*) (size_t size), <wrapper.c 10>
 1157 ----------die: 29
 1158 -------config_set_element_cmp: int (const struct config_set_element *e1, const struct config_set_element *e2, const void *unused), <config.c 1368>
 1159 --------strcmp: <>
 1160 ------git_config_raw: void (config_fn_t fn, void *data), <config.c 1263>
 1161 -------git_config_with_options: int (config_fn_t fn, void *data, struct git_config_source config_source, int respect_includes), <config.c 1230>
 1162 --------git_config_include: int (const char *var, const char *value, void *data), <config.c 141>
 1163 ---------strcmp: <>
 1164 ---------handle_path_include: int (const char *path, struct config_include_data inc), <config.c 98>
 1165 ----------config_error_nonbool: 1137
 1166 ----------expand_user_path: 185
 1167 ----------error: 12
 1168 ----------is_absolute_path: <>
 1169 ----------find_last_dir_sep: <>
 1170 ----------strbuf_add: 81
 1171 ----------strbuf_addstr: <>
 1172 ----------access_or_die: 1037
 1173 ----------die: 29
 1174 ----------git_config_from_file: 1055
 1175 ----------git_config_include: 1162
 1176 ----------strbuf_release: 63
 1177 ----------free: <>
 1178 --------git_config_from_stdin: int (config_fn_t fn, void *data), <config.c 1079>
 1179 ---------do_config_from_file: 1057
 1180 --------git_config_from_file: 1055
 1181 --------git_config_from_blob_ref: int (config_fn_t fn, const char *name, void *data), <config.c 1139>
 1182 ---------get_sha1: int (const char *name, unsigned char *sha1), <sha1_name.c 1182>
 1183 ----------get_sha1_with_context: int (const char *str, unsigned flags, unsigned char *sha1, struct object_context orc), <sha1_name.c 1470>
 1184 -----------get_sha1_with_context_1: int (const char *name, unsigned flags, const char *prefix, unsigned char *sha1, struct object_context oc), <sha1_name.c 1344>
 1185 ------------strlen: <>
 1186 ------------memset: <>
 1187 ------------get_sha1_1: int (const char *name, int len, unsigned char *sha1, unsigned lookup_flags), <sha1_name.c 774>
 1188 -------------get_parent: int (const char *name, int len, unsigned char *result, int idx), <sha1_name.c 581>
 1189 --------------get_sha1_1: 1187
 1190 --------------lookup_commit_reference: struct commit (const unsigned char *sha1), <commit.c 31>
 1191 --------------parse_commit: int (struct commit item), <commit.c 356>
 1192 ---------------read_sha1_file: <>
 1193 ---------------error: 12
 1194 ---------------sha1_to_hex: char * (const unsigned char *sha1), <hex.c 59>
 1195 ---------------free: <>
 1196 ---------------parse_commit_buffer: int (struct commit item, const void *buffer, unsigned long size), <commit.c 301>
 1197 ----------------memcmp: <>
 1198 ----------------error: 12
 1199 ----------------sha1_to_hex: 1194
 1200 ----------------get_sha1_hex: 931
 1201 ----------------lookup_tree: struct tree (const unsigned char *sha1), <tree.c 188>
 1202 ----------------lookup_commit_graft: struct commit_graft (const unsigned char *sha1), <commit.c 200>
 1203 ----------------lookup_commit: struct commit (const unsigned char *sha1), <commit.c 48>
 1204 ----------------commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 1205 ----------------parse_commit_date: unsigned long (const char *buf, const char *tail), <commit.c 69>
 1206 -----------------memcmp: <>
 1207 -----------------strtoul: <>
 1208 ---------------set_commit_buffer: void (struct commit commit, void *buffer, unsigned long size), <commit.c 238>
 1209 ----------------buffer_slab_at: <>
 1210 --------------hashcpy: <>
 1211 -------------get_nth_ancestor: int (const char *name, int len, unsigned char *result, int generation), <sha1_name.c 609>
 1212 --------------get_sha1_1: 1187
 1213 --------------lookup_commit_reference: struct commit (const unsigned char *sha1), <commit.c 31>
 1214 --------------parse_commit: 1191
 1215 --------------hashcpy: <>
 1216 -------------peel_onion: int (const char *name, int len, unsigned char *sha1), <sha1_name.c 657>
 1217 --------------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 1218 --------------get_sha1_1: 1187
 1219 --------------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 1220 --------------deref_tag: struct object (struct object o, const char *warn, int warnlen), <tag.c 9>
 1221 --------------hashcpy: <>
 1222 --------------peel_to_type: struct object (const char *name, int namelen, struct object o, enum object_type expected_type), <sha1_name.c 632>
 1223 --------------xstrndup: 764
 1224 --------------commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 1225 --------------get_sha1_oneline: int (const char *prefix, unsigned char *sha1, struct commit_list list), <sha1_name.c 852>
 1226 ---------------die: 29
 1227 ---------------regcomp: <>
 1228 ---------------commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 1229 ---------------pop_most_recent_commit: struct commit (struct commit_list list, unsigned int mark), <commit.c 488>
 1230 ---------------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 1231 ---------------get_commit_buffer: const void * (const struct commit *commit, unsigned long *sizep), <commit.c 253>
 1232 ----------------get_cached_commit_buffer: const void * (const struct commit *commit, unsigned long *sizep), <commit.c 245>
 1233 -----------------buffer_slab_at: <>
 1234 ----------------read_sha1_file: <>
 1235 ----------------die: 29
 1236 ----------------sha1_to_hex: 1194
 1237 ----------------typename: const char * (unsigned int type), <object.c 29>
 1238 -----------------ARRAY_SIZE: <>
 1239 ---------------strstr: <>
 1240 ---------------regexec: <>
 1241 ---------------unuse_commit_buffer: void (const struct commit *commit, const void *buffer), <commit.c 272>
 1242 ----------------buffer_slab_at: <>
 1243 ----------------free: <>
 1244 ---------------hashcpy: <>
 1245 ---------------regfree: <>
 1246 ---------------free_commit_list: void (struct commit_list list), <commit.c 439>
 1247 ----------------free: <>
 1248 ---------------clear_commit_marks: void (struct commit commit, unsigned int mark), <commit.c 543>
 1249 ----------------clear_commit_marks_many: void (int nr, struct commit commit, unsigned int mark), <commit.c 531>
 1250 -----------------commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 1251 -----------------clear_commit_marks_1: void (struct commit_list plist, struct commit commit, unsigned int mark), <commit.c 509>
 1252 ------------------commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 1253 -----------------pop_commit: struct commit (struct commit_list stack), <commit.c 562>
 1254 --------------free: <>
 1255 -------------get_sha1_basic: int (const char *str, int len, unsigned char *sha1, unsigned int flags), <sha1_name.c 435>
 1256 --------------N_: <>
 1257 --------------get_sha1_hex: 931
 1258 --------------dwim_ref: int (const char *str, int len, unsigned char *sha1, char **ref), <refs.c 2202>
 1259 ---------------substitute_branch_name: char * (const char **string, int *len), <refs.c 2187>
 1260 ----------------interpret_branch_name: int (const char *name, int namelen, struct strbuf buf), <sha1_name.c 1122>
 1261 -----------------interpret_nth_prior_checkout: int (const char *name, int namelen, struct strbuf buf), <sha1_name.c 930>
 1262 ------------------memchr: <>
 1263 ------------------strtol: <>
 1264 ------------------strbuf_init: 65
 1265 ------------------for_each_reflog_ent_reverse: int (const char *refname, each_reflog_ent_fn fn, void *cb_data), <refs.c 3329>
 1266 -------------------fopen: <>
 1267 -------------------git_path: char * (const char *fmt, ...), <path.c 121>
 1268 --------------------get_pathname: char * (void), <path.c 19>
 1269 --------------------va_start: <>
 1270 --------------------vsnpath: 985
 1271 --------------------va_end: <>
 1272 -------------------fseek: <>
 1273 -------------------error: 12
 1274 -------------------strerror: <>
 1275 -------------------ftell: <>
 1276 -------------------fread: <>
 1277 -------------------find_beginning_of_line: char * (char *bob, char *scan), <refs.c 3318>
 1278 -------------------strbuf_splice: void (struct strbuf sb, size_t pos, size_t len, const void *data, size_t dlen), <strbuf.c 164>
 1279 --------------------unsigned_add_overflows: <>
 1280 --------------------die: 29
 1281 --------------------strbuf_grow: 53
 1282 --------------------memmove: <>
 1283 --------------------memcpy: <>
 1284 --------------------strbuf_setlen: <>
 1285 -------------------show_one_reflog_ent: int (struct strbuf sb, each_reflog_ent_fn fn, void *cb_data), <refs.c 3290>
 1286 --------------------get_sha1_hex: 931
 1287 --------------------strchr: <>
 1288 --------------------strtoul: <>
 1289 --------------------isdigit: <>
 1290 --------------------strtol: <>
 1291 -------------------strbuf_reset: <>
 1292 -------------------die: 29
 1293 -------------------fclose: <>
 1294 -------------------strbuf_release: 63
 1295 ------------------grab_nth_branch_switch: int (unsigned char *osha1, unsigned char *nsha1, const char *email, unsigned long timestamp, int tz, const char *message, void *cb_data), <sha1_name.c 904>
 1296 -------------------match: int (struct hashmap map, int line1, int line2), <xdiff/xpatience.c 222>
 1297 --------------------xdl_recmatch: int (const char *l1, long s1, const char *l2, long s2, long flags), <xdiff/xutils.c 159>
 1298 ---------------------memcmp: <>
 1299 ---------------------XDL_ISSPACE: <>
 1300 -------------------skip_prefix: <>
 1301 -------------------strstr: <>
 1302 -------------------strbuf_reset: <>
 1303 -------------------strbuf_add: 81
 1304 ------------------strbuf_reset: <>
 1305 ------------------strbuf_addbuf: <>
 1306 ------------------strbuf_release: 63
 1307 -----------------strlen: <>
 1308 -----------------reinterpret: int (const char *name, int namelen, int len, struct strbuf buf), <sha1_name.c 1029>
 1309 ------------------strbuf_add: 81
 1310 ------------------interpret_branch_name: 1260
 1311 ------------------strbuf_setlen: <>
 1312 ------------------strbuf_reset: <>
 1313 ------------------strbuf_addbuf: <>
 1314 ------------------strbuf_release: 63
 1315 -----------------memchr: <>
 1316 -----------------interpret_empty_at: int (const char *name, int namelen, int len, struct strbuf buf), <sha1_name.c 1008>
 1317 ------------------memchr: <>
 1318 ------------------strbuf_reset: <>
 1319 ------------------strbuf_add: 81
 1320 -----------------interpret_upstream_mark: int (const char *name, int namelen, int at, struct strbuf buf), <sha1_name.c 1085>
 1321 ------------------upstream_mark: inline int (const char *string, int len), <sha1_name.c 418>
 1322 -------------------ARRAY_SIZE: <>
 1323 -------------------strlen: <>
 1324 -------------------memcmp: <>
 1325 ------------------memchr: <>
 1326 ------------------set_shortened_ref: void (struct strbuf buf, const char *ref), <sha1_name.c 1050>
 1327 -------------------shorten_unambiguous_ref: char * (const char *refname, int strict), <refs.c 3838>
 1328 --------------------strlen: <>
 1329 --------------------xmalloc: 172
 1330 --------------------assert: <>
 1331 --------------------snprintf: <>
 1332 --------------------xstrdup: 73
 1333 --------------------sscanf: <>
 1334 --------------------mksnpath: char * (char *buf, size_t n, const char *fmt, ...), <path.c 37>
 1335 ---------------------va_start: <>
 1336 ---------------------vsnprintf: <>
 1337 ---------------------va_end: <>
 1338 ---------------------strlcpy: <>
 1339 ---------------------cleanup_path: 992
 1340 --------------------ref_exists: int (const char *refname), <refs.c 1670>
 1341 ---------------------resolve_ref_unsafe: const char * (const char *refname, int resolve_flags, unsigned char *sha1, int *flags), <refs.c 1478>
 1342 ----------------------check_refname_format: 1007
 1343 ----------------------refname_is_safe: int (const char *refname), <refs.c 313>
 1344 -----------------------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 1345 -----------------------xmalloc: 172
 1346 -----------------------strlen: <>
 1347 -----------------------normalize_path_copy: int (char *dst, const char *src), <path.c 695>
 1348 ------------------------normalize_path_copy_len: int (char *dst, const char *src, int *prefix_len), <path.c 613>
 1349 -------------------------has_dos_drive_prefix: <>
 1350 -------------------------is_dir_sep: <>
 1351 -----------------------free: <>
 1352 -----------------------isupper: <>
 1353 ----------------------git_snpath: char * (char *buf, size_t n, const char *fmt, ...), <path.c 72>
 1354 -----------------------va_start: <>
 1355 -----------------------vsnpath: 985
 1356 -----------------------va_end: <>
 1357 ----------------------lstat: <>
 1358 ----------------------resolve_missing_loose_ref: int (const char *refname, int resolve_flags, unsigned char *sha1, int *flags), <refs.c 1449>
 1359 -----------------------get_packed_ref: struct ref_entry (const char *refname), <refs.c 1440>
 1360 -----------------------hashcpy: <>
 1361 -----------------------hashclr: <>
 1362 ----------------------hashclr: <>
 1363 ----------------------S_ISLNK: <>
 1364 ----------------------readlink: <>
 1365 ----------------------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 1366 ----------------------strcpy: <>
 1367 ----------------------S_ISDIR: <>
 1368 ----------------------open: <>
 1369 ----------------------read_in_full: 245
 1370 ----------------------close: <>
 1371 ----------------------isspace: <>
 1372 ----------------------get_sha1_hex: 931
 1373 --------------------free: <>
 1374 -------------------strbuf_reset: <>
 1375 -------------------strbuf_addstr: <>
 1376 -------------------free: <>
 1377 ------------------get_upstream_branch: const char * (const char *branch_buf, int len), <sha1_name.c 1058>
 1378 -------------------xstrndup: 764
 1379 -------------------branch_get: struct branch (const char *name), <remote.c 1655>
 1380 -------------------die: 29
 1381 -------------------ref_exists: 1340
 1382 -------------------free: <>
 1383 ----------------strbuf_detach: 190
 1384 ---------------mksnpath: 1334
 1385 ---------------resolve_ref_unsafe: 1341
 1386 ---------------xstrdup: 73
 1387 ---------------strcmp: <>
 1388 ---------------warning: 552
 1389 ---------------strchr: <>
 1390 ---------------free: <>
 1391 --------------warning: 552
 1392 --------------fprintf: <>
 1393 --------------free: <>
 1394 --------------upstream_mark: 1321
 1395 --------------ambiguous_path: int (const char *path, int len), <sha1_name.c 393>
 1396 --------------interpret_nth_prior_checkout: 1261
 1397 --------------strbuf_release: 63
 1398 --------------dwim_log: int (const char *str, int len, unsigned char *sha1, char **log), <refs.c 2234>
 1399 ---------------substitute_branch_name: 1259
 1400 ---------------hash: unsigned int (unsigned int method, unsigned int i, const char *key), <test-hashmap.c 48>
 1401 ----------------hash: 1400
 1402 ----------------strhash: unsigned int (const char *str), <hashmap.c 10>
 1403 -----------------hash: 1400
 1404 ---------------mksnpath: 1334
 1405 ---------------resolve_ref_unsafe: 1341
 1406 ---------------reflog_exists: int (const char *refname), <refs.c 3277>
 1407 ----------------lstat: <>
 1408 ----------------git_path: 1267
 1409 ----------------S_ISREG: <>
 1410 ---------------strcmp: <>
 1411 ---------------xstrdup: 73
 1412 ---------------hashcpy: <>
 1413 ---------------free: <>
 1414 --------------get_short_sha1: int (const char *name, int len, unsigned char *sha1, unsigned flags), <sha1_name.c 309>
 1415 ---------------prepare_prefixes: int (const char *name, int len, unsigned char *bin_pfx, char *hex_pfx), <sha1_name.c 280>
 1416 ----------------hashclr: <>
 1417 ----------------memset: <>
 1418 ---------------prepare_alt_odb: void (void), <sha1_file.c 430>
 1419 ----------------getenv: <>
 1420 ----------------link_alt_odb_entries: void (const char *alt, int len, int sep, const char *relative_base, int depth), <sha1_file.c 340>
 1421 -----------------error: 12
 1422 -----------------strbuf_add_absolute_path: 671
 1423 -----------------get_object_directory: char * (void), <environment.c 219>
 1424 ------------------setup_git_env: 976
 1425 -----------------normalize_path_copy: 1347
 1426 -----------------xmemdupz: 120
 1427 -----------------string_list_split_in_place: int (struct string_list list, char *string, int delim, int maxsplit), <string-list.c 285>
 1428 ------------------die: 29
 1429 ------------------string_list_append: struct string_list_item (struct string_list list, const char *string), <string-list.c 206>
 1430 ------------------strchr: <>
 1431 -----------------is_absolute_path: <>
 1432 -----------------link_alt_odb_entry: int (const char *entry, const char *relative_base, int depth, const char *normalized_objdir), <sha1_file.c 269>
 1433 ------------------is_absolute_path: <>
 1434 ------------------strbuf_addstr: <>
 1435 ------------------real_path: 949
 1436 ------------------strbuf_addch: <>
 1437 ------------------normalize_path_copy: 1347
 1438 ------------------strlen: <>
 1439 ------------------xmalloc: 172
 1440 ------------------memcpy: <>
 1441 ------------------strbuf_release: 63
 1442 ------------------is_directory: 798
 1443 ------------------error: 12
 1444 ------------------free: <>
 1445 ------------------memcmp: <>
 1446 ------------------strcmp_icase: int (const char *a, const char *b), <dir.c 40>
 1447 -------------------strcasecmp: <>
 1448 -------------------strcmp: <>
 1449 ------------------read_info_alternates: void (const char *relative_base, int depth), <sha1_file.c 375>
 1450 -------------------sprintf: <>
 1451 -------------------git_open_noatime: int (const char *name), <sha1_file.c 1444>
 1452 --------------------open: <>
 1453 -------------------fstat: <>
 1454 -------------------close: <>
 1455 -------------------xsize_t: <>
 1456 -------------------xmmap: void * (void *start, size_t length, int prot, int flags, int fd, off_t offset), <sha1_file.c 710>
 1457 --------------------mmap_limit_check: void (size_t length), <sha1_file.c 697>
 1458 ---------------------git_env_ulong: 129
 1459 ---------------------die: 29
 1460 --------------------mmap: <>
 1461 --------------------release_pack_memory: void (size_t need), <sha1_file.c 690>
 1462 ---------------------unuse_one_window: int (struct packed_git current), <sha1_file.c 667>
 1463 ----------------------scan_windows: void (struct packed_git p, struct packed_git lru_p, struct pack_window lru_w, struct pack_window lru_l), <sha1_file.c 648>
 1464 ----------------------munmap: <>
 1465 ----------------------free: <>
 1466 --------------------die_errno: 203
 1467 -------------------link_alt_odb_entries: 1420
 1468 -------------------munmap: <>
 1469 -----------------string_list_clear: 544
 1470 -----------------free: <>
 1471 -----------------strbuf_release: 63
 1472 ----------------strlen: <>
 1473 ----------------read_info_alternates: 1449
 1474 ----------------get_object_directory: 1423
 1475 ---------------memset: <>
 1476 ---------------disambiguate_commit_only: int (const unsigned char *sha1, void *cb_data_unused), <sha1_name.c 226>
 1477 ----------------sha1_object_info: int (const unsigned char *sha1, unsigned long *sizep), <sha1_file.c 2626>
 1478 -----------------sha1_object_info_extended: int (const unsigned char *sha1, struct object_info oi, unsigned flags), <sha1_file.c 2574>
 1479 ------------------lookup_replace_object_extended: <>
 1480 ------------------find_cached_object: struct cached_object (const unsigned char *sha1), <sha1_file.c 69>
 1481 ------------------hashclr: <>
 1482 ------------------find_pack_entry: int (const unsigned char *sha1, struct pack_entry e), <sha1_file.c 2490>
 1483 -------------------prepare_packed_git: void (void), <sha1_file.c 1349>
 1484 --------------------prepare_packed_git_one: void (char *objdir, int local), <sha1_file.c 1228>
 1485 ---------------------strbuf_addstr: <>
 1486 ---------------------opendir: <>
 1487 ---------------------error: 12
 1488 ---------------------strerror: <>
 1489 ---------------------strbuf_release: 63
 1490 ---------------------strbuf_addch: <>
 1491 ---------------------readdir: <>
 1492 ---------------------is_dot_or_dotdot: <>
 1493 ---------------------strbuf_setlen: <>
 1494 ---------------------strip_suffix_mem: <>
 1495 ---------------------strip_suffix: <>
 1496 ---------------------memcmp: <>
 1497 ---------------------add_packed_git: struct packed_git (const char *path, int path_len, int local), <sha1_file.c 1104>
 1498 ---------------------install_packed_git: void (struct packed_git pack), <sha1_file.c 1162>
 1499 ---------------------report_garbage: void (*) (const char *desc, const char *path), <sha1_file.c 1171>
 1500 ---------------------ends_with: <>
 1501 ---------------------string_list_append: 768
 1502 ---------------------closedir: <>
 1503 ---------------------report_pack_garbage: void (struct string_list list), <sha1_file.c 1194>
 1504 ----------------------report_garbage: void (*) (const char *desc, const char *path), <sha1_file.c 1171>
 1505 ----------------------string_list_sort: inline void (string_list_ty *slp), <sh-i18n--envsubst.c 231>
 1506 -----------------------qsort: <>
 1507 -----------------------cmp_string: int (const void *pstr1, const void *pstr2), <sh-i18n--envsubst.c 221>
 1508 ------------------------strcmp: <>
 1509 ----------------------strncmp: <>
 1510 ----------------------report_helper: void (const struct string_list *list, int seen_bits, int first, int last), <sha1_file.c 1173>
 1511 -----------------------report_garbage: void (*) (const char *desc, const char *path), <sha1_file.c 1171>
 1512 ----------------------strrchr: <>
 1513 ----------------------strcmp: <>
 1514 ---------------------string_list_clear: 544
 1515 --------------------get_object_directory: 1423
 1516 --------------------prepare_alt_odb: 1418
 1517 --------------------rearrange_packed_git: void (void), <sha1_file.c 1322>
 1518 ---------------------xcalloc: 1153
 1519 ---------------------qsort: <>
 1520 ---------------------sort_pack: int (const void *a_, const void *b_), <sha1_file.c 1294>
 1521 ---------------------free: <>
 1522 -------------------fill_pack_entry: int (const unsigned char *sha1, struct pack_entry e, struct packed_git p), <sha1_file.c 2452>
 1523 --------------------hashcmp: <>
 1524 --------------------find_pack_entry_one: off_t (const unsigned char *sha1, struct packed_git p), <sha1_file.c 2368>
 1525 ---------------------getenv: <>
 1526 ---------------------open_pack_index: int (struct packed_git p), <sha1_file.c 633>
 1527 ----------------------xstrdup: 73
 1528 ----------------------strcpy: <>
 1529 ----------------------strlen: <>
 1530 ----------------------check_packed_git_idx: int (const char *path, struct packed_git p), <sha1_file.c 531>
 1531 -----------------------git_open_noatime: 1451
 1532 -----------------------fstat: <>
 1533 -----------------------close: <>
 1534 -----------------------xsize_t: <>
 1535 -----------------------error: 12
 1536 -----------------------xmmap: 1456
 1537 -----------------------htonl: <>
 1538 -----------------------ntohl: <>
 1539 -----------------------munmap: <>
 1540 -----------------------min_size: inline size_t (size_t a, size_t b), <ewah/ewah_bitmap.c 24>
 1541 -----------------------max_size: inline size_t (size_t a, size_t b), <ewah/ewah_bitmap.c 29>
 1542 ----------------------free: <>
 1543 ---------------------ntohl: <>
 1544 ---------------------printf: <>
 1545 ---------------------sha1_entry_pos: int (const void *table, size_t elem_size, size_t key_offset, unsigned lo, unsigned hi, unsigned nr, const unsigned char *key), <sha1-lookup.c 165>
 1546 ----------------------getenv: <>
 1547 ----------------------memcmp: <>
 1548 ----------------------assert: <>
 1549 ----------------------printf: <>
 1550 ----------------------die: 29
 1551 ----------------------sha1_to_hex: 1194
 1552 ---------------------nth_packed_object_offset: off_t (const struct packed_git *p, uint32_t n), <sha1_file.c 2350>
 1553 ----------------------ntohl: <>
 1554 ---------------------hashcmp: <>
 1555 --------------------is_pack_valid: int (struct packed_git p), <sha1_file.c 2431>
 1556 ---------------------open_packed_git: int (struct packed_git p), <sha1_file.c 991>
 1557 ----------------------open_packed_git_1: int (struct packed_git p), <sha1_file.c 918>
 1558 -----------------------open_pack_index: 1526
 1559 -----------------------error: 12
 1560 -----------------------get_max_fd_limit: unsigned int (void), <sha1_file.c 873>
 1561 ------------------------getrlimit: <>
 1562 ------------------------sysconf: <>
 1563 -----------------------close_one_pack: int (void), <sha1_file.c 799>
 1564 ------------------------find_lru_pack: void (struct packed_git p, struct packed_git lru_p, struct pack_window mru_w, int *accept_windows_inuse), <sha1_file.c 748>
 1565 ------------------------close: <>
 1566 -----------------------git_open_noatime: 1451
 1567 -----------------------fstat: <>
 1568 -----------------------S_ISREG: <>
 1569 -----------------------fcntl: <>
 1570 -----------------------read_in_full: 245
 1571 -----------------------htonl: <>
 1572 -----------------------pack_version_ok: <>
 1573 -----------------------ntohl: <>
 1574 -----------------------lseek: <>
 1575 -----------------------hashcmp: <>
 1576 ----------------------close: <>
 1577 --------------------warning: 552
 1578 --------------------hashcpy: <>
 1579 ------------------sha1_loose_object_info: int (const unsigned char *sha1, struct object_info oi), <sha1_file.c 2526>
 1580 -------------------hashclr: <>
 1581 -------------------stat_sha1_file: int (const unsigned char *sha1, struct stat st), <sha1_file.c 1463>
 1582 --------------------lstat: <>
 1583 --------------------sha1_file_name: const char * (const unsigned char *sha1), <sha1_file.c 185>
 1584 ---------------------get_object_directory: 1423
 1585 ---------------------strlen: <>
 1586 ---------------------die: 29
 1587 ---------------------memcpy: <>
 1588 ---------------------fill_sha1_path: void (char *pathbuf, const unsigned char *sha1), <sha1_file.c 173>
 1589 --------------------prepare_alt_odb: 1418
 1590 --------------------fill_sha1_path: 1588
 1591 -------------------map_sha1_file: void * (const unsigned char *sha1, unsigned long *size), <sha1_file.c 1505>
 1592 --------------------open_sha1_file: int (const unsigned char *sha1), <sha1_file.c 1481>
 1593 ---------------------git_open_noatime: 1451
 1594 ---------------------sha1_file_name: 1583
 1595 ---------------------prepare_alt_odb: 1418
 1596 ---------------------fill_sha1_path: 1588
 1597 --------------------fstat: <>
 1598 --------------------xsize_t: <>
 1599 --------------------error: 12
 1600 --------------------sha1_file_name: 1583
 1601 --------------------xmmap: 1456
 1602 --------------------close: <>
 1603 -------------------unpack_sha1_header: int (git_zstream *stream, unsigned char *map, unsigned long mapsize, void *buffer, unsigned long bufsiz), <sha1_file.c 1554>
 1604 --------------------memset: <>
 1605 --------------------git_inflate_init: void (git_zstream *strm), <zlib.c 67>
 1606 ---------------------zlib_pre_call: void (git_zstream *s), <zlib.c 37>
 1607 ----------------------zlib_buf_cap: inline uInt (unsigned long len), <zlib.c 32>
 1608 ---------------------inflateInit: <>
 1609 ---------------------zlib_post_call: void (git_zstream *s), <zlib.c 47>
 1610 ----------------------die: 29
 1611 ---------------------die: 29
 1612 ---------------------zerr_to_string: const char * (int status), <zlib.c 7>
 1613 --------------------git_inflate: int (git_zstream *strm, int flush), <zlib.c 111>
 1614 ---------------------zlib_pre_call: 1606
 1615 ---------------------inflate: <>
 1616 ---------------------die: 29
 1617 ---------------------zlib_post_call: 1609
 1618 ---------------------error: 12
 1619 ---------------------zerr_to_string: 1612
 1620 -------------------error: 12
 1621 -------------------sha1_to_hex: 1194
 1622 -------------------parse_sha1_header: int (const char *hdr, unsigned long *sizep), <sha1_file.c 1617>
 1623 --------------------type_from_string: <>
 1624 -------------------git_inflate_end: void (git_zstream *strm), <zlib.c 98>
 1625 --------------------zlib_pre_call: 1606
 1626 --------------------inflateEnd: <>
 1627 --------------------zlib_post_call: 1609
 1628 --------------------error: 12
 1629 --------------------zerr_to_string: 1612
 1630 -------------------munmap: <>
 1631 ------------------reprepare_packed_git: void (void), <sha1_file.c 1366>
 1632 -------------------prepare_packed_git: 1483
 1633 ------------------packed_object_info: int (struct packed_git p, off_t obj_offset, struct object_info oi), <sha1_file.c 1897>
 1634 -------------------unpack_object_header: int (struct packed_git p, struct pack_window w_curs, off_t *curpos, unsigned long *sizep), <sha1_file.c 1786>
 1635 --------------------use_pack: unsigned char * (struct packed_git p, struct pack_window w_cursor, off_t offset, unsigned long *left), <sha1_file.c 1016>
 1636 ---------------------open_packed_git: 1556
 1637 ---------------------die: 29
 1638 ---------------------in_window: int (struct pack_window win, off_t offset), <sha1_file.c 1003>
 1639 ---------------------xcalloc: 1153
 1640 ---------------------unuse_one_window: 1462
 1641 ---------------------xmmap: 1456
 1642 ---------------------strerror: <>
 1643 ---------------------close: <>
 1644 ---------------------xsize_t: <>
 1645 --------------------unpack_object_header_buffer: unsigned long (const unsigned char *buf, unsigned long len, enum object_type type, unsigned long *sizep), <sha1_file.c 1529>
 1646 ---------------------bitsizeof: <>
 1647 ---------------------error: 12
 1648 -------------------get_delta_base: off_t (struct packed_git p, struct pack_window w_curs, off_t *curpos, enum object_type type, off_t delta_obj_offset), <sha1_file.c 1715>
 1649 --------------------use_pack: 1635
 1650 --------------------MSB: <>
 1651 --------------------find_pack_entry_one: 1524
 1652 --------------------die: 29
 1653 -------------------get_size_from_delta: unsigned long (struct packed_git p, struct pack_window w_curs, off_t curpos), <sha1_file.c 1676>
 1654 --------------------memset: <>
 1655 --------------------git_inflate_init: 1605
 1656 --------------------use_pack: 1635
 1657 --------------------git_inflate: 1613
 1658 --------------------git_inflate_end: 1624
 1659 --------------------error: 12
 1660 --------------------get_delta_hdr_size: <>
 1661 -------------------find_pack_revindex: struct revindex_entry (struct packed_git p, off_t ofs), <pack-revindex.c 238>
 1662 -------------------packed_to_object_type: enum object_type (struct packed_git p, off_t obj_offset, enum object_type type, struct pack_window w_curs, off_t curpos), <sha1_file.c 1830>
 1663 -------------------get_delta_base_sha1: const unsigned char * (struct packed_git p, struct pack_window w_curs, off_t curpos, enum object_type type, off_t delta_obj_offset), <sha1_file.c 1760>
 1664 --------------------use_pack: 1635
 1665 --------------------get_delta_base: 1648
 1666 --------------------find_pack_revindex: struct revindex_entry (struct packed_git p, off_t ofs), <pack-revindex.c 238>
 1667 --------------------nth_packed_object_sha1: const unsigned char * (struct packed_git p, uint32_t n), <sha1_file.c 2330>
 1668 ---------------------open_pack_index: 1526
 1669 -------------------hashcpy: <>
 1670 -------------------hashclr: <>
 1671 -------------------unuse_pack: void (struct pack_window w_cursor), <sha1_file.c 821>
 1672 ------------------mark_bad_packed_object: void (struct packed_git p, const unsigned char *sha1), <sha1_file.c 1372>
 1673 -------------------hashcmp: <>
 1674 -------------------xrealloc: 176
 1675 -------------------hashcpy: <>
 1676 ------------------sha1_object_info_extended: 1478
 1677 ------------------in_delta_base_cache: int (struct packed_git p, off_t base_offset), <sha1_file.c 2038>
 1678 -------------------get_delta_base_cache_entry: struct delta_base_cache_entry (struct packed_git p, off_t base_offset), <sha1_file.c 2026>
 1679 -------------------eq_delta_base_cache_entry: int (struct delta_base_cache_entry ent, struct packed_git p, off_t base_offset), <sha1_file.c 2032>
 1680 ---------------disambiguate_committish_only: int (const unsigned char *sha1, void *cb_data_unused), <sha1_name.c 232>
 1681 ----------------sha1_object_info: 1477
 1682 ----------------deref_tag: struct object (struct object o, const char *warn, int warnlen), <tag.c 9>
 1683 ----------------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 1684 ---------------disambiguate_tree_only: int (const unsigned char *sha1, void *cb_data_unused), <sha1_name.c 250>
 1685 ----------------sha1_object_info: 1477
 1686 ---------------disambiguate_treeish_only: int (const unsigned char *sha1, void *cb_data_unused), <sha1_name.c 256>
 1687 ----------------sha1_object_info: 1477
 1688 ----------------deref_tag: struct object (struct object o, const char *warn, int warnlen), <tag.c 9>
 1689 ----------------lookup_object: struct object (const unsigned char *sha1), <object.c 84>
 1690 ---------------disambiguate_blob_only: int (const unsigned char *sha1, void *cb_data_unused), <sha1_name.c 274>
 1691 ----------------sha1_object_info: 1477
 1692 ---------------find_short_object_filename: void (int len, const char *hex_pfx, struct disambiguate_state ds), <sha1_name.c 74>
 1693 ----------------get_object_directory: 1423
 1694 ----------------strlen: <>
 1695 ----------------xmalloc: 172
 1696 ----------------memcpy: <>
 1697 ----------------sprintf: <>
 1698 ----------------opendir: <>
 1699 ----------------readdir: <>
 1700 ----------------memcmp: <>
 1701 ----------------get_sha1_hex: 931
 1702 ----------------update_candidates: void (struct disambiguate_state ds, const unsigned char *current), <sha1_name.c 26>
 1703 -----------------hashcpy: <>
 1704 -----------------hashcmp: <>
 1705 ----------------closedir: <>
 1706 ---------------find_short_packed_object: void (int len, const unsigned char *bin_pfx, struct disambiguate_state ds), <sha1_name.c 179>
 1707 ----------------prepare_packed_git: 1483
 1708 ----------------unique_in_pack: void (int len, const unsigned char *bin_pfx, struct packed_git p, struct disambiguate_state ds), <sha1_name.c 137>
 1709 -----------------open_pack_index: 1526
 1710 -----------------nth_packed_object_sha1: 1667
 1711 -----------------hashcmp: <>
 1712 -----------------match_sha: int (unsigned len, const unsigned char *a, const unsigned char *b), <sha1_name.c 122>
 1713 -----------------update_candidates: 1702
 1714 ---------------finish_object_disambiguation: int (struct disambiguate_state ds, unsigned char *sha1), <sha1_name.c 192>
 1715 ----------------hashcpy: <>
 1716 ---------------error: 12
 1717 --------------xstrndup: 764
 1718 --------------approxidate_careful: unsigned long (const char *date, int *error_ret), <date.c 1117>
 1719 ---------------parse_date_basic: int (const char *date, unsigned long *timestamp, int *offset), <date.c 658>
 1720 ----------------memset: <>
 1721 ----------------match_object_header_date: int (const char *date, unsigned long *timestamp, int *offset), <date.c 633>
 1722 -----------------strtoul: <>
 1723 -----------------strtol: <>
 1724 ----------------isalpha: <>
 1725 ----------------match_alpha: int (const char *date, struct tm tm, int *offset), <date.c 316>
 1726 -----------------match_string: int (const char *date, const char *str), <date.c 288>
 1727 ------------------toupper: <>
 1728 ------------------isalnum: <>
 1729 -----------------ARRAY_SIZE: <>
 1730 -----------------strlen: <>
 1731 -----------------skip_alpha: int (const char *date), <date.c 304>
 1732 ------------------isalpha: <>
 1733 ----------------isdigit: <>
 1734 ----------------match_digit: int (const char *date, struct tm tm, int *offset, int *tm_gmt), <date.c 487>
 1735 -----------------strtoul: <>
 1736 -----------------nodate: inline int (struct tm tm), <date.c 474>
 1737 -----------------time: <>
 1738 -----------------gmtime_r: struct tm (const time_t *timep, struct tm result), <compat/mingw.c 692>
 1739 -----------------isdigit: <>
 1740 -----------------match_multi_number: int (unsigned long num, char c, const char *date, char *end, struct tm tm, time_t now), <date.c 408>
 1741 ------------------strtol: <>
 1742 ------------------isdigit: <>
 1743 ------------------time: <>
 1744 ------------------gmtime_r: struct tm (const time_t *timep, struct tm result), <compat/mingw.c 692>
 1745 ------------------is_date: int (int year, int month, int day, struct tm now_tm, time_t now, struct tm tm), <date.c 366>
 1746 -------------------tm_to_time_t: time_t (const struct tm *tm), <date.c 12>
 1747 ----------------match_tz: int (const char *date, int *offp), <date.c 581>
 1748 -----------------strtoul: <>
 1749 ----------------tm_to_time_t: 1746
 1750 ----------------mktime: <>
 1751 ---------------gettimeofday: 290
 1752 ---------------approxidate_str: unsigned long (const char *date, const struct timeval *tv, int *error_ret), <date.c 1069>
 1753 ----------------localtime_r: struct tm (const time_t *timep, struct tm result), <compat/mingw.c 699>
 1754 ----------------isdigit: <>
 1755 ----------------pending_number: void (struct tm tm, int *num), <date.c 1047>
 1756 ----------------approxidate_digit: const char * (const char *date, struct tm tm, int *num, time_t now), <date.c 1017>
 1757 -----------------strtoul: <>
 1758 -----------------isdigit: <>
 1759 -----------------match_multi_number: 1740
 1760 ----------------isalpha: <>
 1761 ----------------approxidate_alpha: const char * (const char *date, struct tm tm, struct tm now, int *num, int *touched), <date.c 919>
 1762 -----------------isalpha: <>
 1763 -----------------match_string: 1726
 1764 -----------------strlen: <>
 1765 -----------------update_tm: unsigned long (struct tm tm, struct tm now, unsigned long sec), <date.c 800>
 1766 ------------------mktime: <>
 1767 ------------------localtime_r: struct tm (const time_t *timep, struct tm result), <compat/mingw.c 699>
 1768 ----------------update_tm: 1765
 1769 --------------read_ref_at: int (const char *refname, unsigned int flags, unsigned long at_time, int cnt, unsigned char *sha1, char **msg, unsigned long *cutoff_time, int *cutoff_tz, int *cutoff_cnt), <refs.c 3245>
 1770 ---------------memset: <>
 1771 ---------------for_each_reflog_ent_reverse: 1265
 1772 ---------------read_ref_at_ent: int (unsigned char *osha1, unsigned char *nsha1, const char *email, unsigned long timestamp, int tz, const char *message, void *cb_data), <refs.c 3177>
 1773 ----------------xstrdup: 73
 1774 ----------------is_null_sha1: <>
 1775 ----------------hashcpy: <>
 1776 ----------------hashcmp: <>
 1777 ----------------warning: 552
 1778 ----------------show_date: const char * (unsigned long time, int tz, enum date_mode mode), <date.c 163>
 1779 -----------------strbuf_reset: <>
 1780 -----------------strbuf_addf: 49
 1781 -----------------gettimeofday: 290
 1782 -----------------show_date_relative: void (unsigned long time, int tz, const struct timeval *now, struct strbuf timebuf), <date.c 89>
 1783 ------------------strbuf_addstr: <>
 1784 ------------------strbuf_addf: 49
 1785 ------------------Q_: <>
 1786 ------------------strbuf_release: 63
 1787 -----------------local_tzoffset: int (unsigned long time), <date.c 67>
 1788 ------------------localtime_r: struct tm (const time_t *timep, struct tm result), <compat/mingw.c 699>
 1789 ------------------tm_to_time_t: 1746
 1790 -----------------time_to_tm: struct tm (unsigned long time, int tz), <date.c 57>
 1791 -----------------abs: <>
 1792 ---------------exit: <>
 1793 ---------------die: 29
 1794 ---------------for_each_reflog_ent: int (const char *refname, each_reflog_ent_fn fn, void *cb_data), <refs.c 3431>
 1795 ----------------fopen: <>
 1796 ----------------git_path: 1267
 1797 ----------------strbuf_getwholeline: 565
 1798 ----------------show_one_reflog_ent: 1285
 1799 ----------------fclose: <>
 1800 ----------------strbuf_release: 63
 1801 ---------------read_ref_at_ent_oldest: int (unsigned char *osha1, unsigned char *nsha1, const char *email, unsigned long timestamp, int tz, const char *message, void *cb_data), <refs.c 3224>
 1802 ----------------xstrdup: 73
 1803 ----------------hashcpy: <>
 1804 ----------------is_null_sha1: <>
 1805 --------------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 1806 --------------strlen: <>
 1807 --------------show_date: 1778
 1808 --------------exit: <>
 1809 --------------die: 29
 1810 -------------get_describe_name: int (const char *name, int len, unsigned char *sha1), <sha1_name.c 753>
 1811 --------------isxdigit: <>
 1812 --------------get_short_sha1: 1414
 1813 -------------get_short_sha1: 1414
 1814 ------------for_each_ref: int (each_ref_fn fn, void *cb_data), <refs.c 1973>
 1815 -------------do_for_each_ref: int (struct ref_cache refs, const char *base, each_ref_fn fn, int trim, int flags, void *cb_data), <refs.c 1927>
 1816 --------------git_env_bool: 1034
 1817 --------------do_for_each_entry: int (struct ref_cache refs, const char *base, each_ref_entry_fn fn, void *cb_data), <refs.c 1869>
 1818 ---------------get_loose_refs: struct ref_dir (struct ref_cache refs), <refs.c 1338>
 1819 ---------------find_containing_dir: struct ref_dir (struct ref_dir dir, const char *refname, int mkdir), <refs.c 508>
 1820 ---------------prime_ref_dir: void (struct ref_dir dir), <refs.c 834>
 1821 ----------------prime_ref_dir: 1820
 1822 ----------------get_ref_dir: struct ref_dir (struct ref_entry entry), <refs.c 292>
 1823 ---------------get_packed_ref_cache: struct packed_ref_cache (struct ref_cache refs), <refs.c 1213>
 1824 ---------------acquire_packed_ref_cache: void (struct packed_ref_cache packed_refs), <refs.c 1007>
 1825 ---------------get_packed_ref_dir: struct ref_dir (struct packed_ref_cache packed_ref_cache), <refs.c 1242>
 1826 ---------------sort_ref_dir: void (struct ref_dir dir), <refs.c 637>
 1827 ----------------qsort: <>
 1828 ----------------ref_entry_cmp: int (const void *a, const void *b), <refs.c 420>
 1829 -----------------strcmp: <>
 1830 ----------------is_dup_ref: int (const struct ref_entry *ref1, const struct ref_entry *ref2), <refs.c 615>
 1831 -----------------strcmp: <>
 1832 -----------------die: 29
 1833 -----------------hashcmp: <>
 1834 -----------------warning: 552
 1835 ----------------free_ref_entry: void (struct ref_entry entry), <refs.c 360>
 1836 -----------------clear_ref_dir: void (struct ref_dir dir), <refs.c 392>
 1837 ------------------free_ref_entry: 1835
 1838 ------------------free: <>
 1839 -----------------free: <>
 1840 ---------------do_for_each_entry_in_dirs: int (struct ref_dir dir1, struct ref_dir dir2, each_ref_entry_fn fn, void *cb_data), <refs.c 764>
 1841 ----------------assert: <>
 1842 ----------------do_for_each_entry_in_dir: int (struct ref_dir dir, int offset, each_ref_entry_fn fn, void *cb_data), <refs.c 735>
 1843 -----------------assert: <>
 1844 -----------------get_ref_dir: struct ref_dir (struct ref_entry entry), <refs.c 292>
 1845 -----------------sort_ref_dir: 1826
 1846 -----------------do_for_each_entry_in_dir: 1842
 1847 ----------------strcmp: <>
 1848 ----------------get_ref_dir: struct ref_dir (struct ref_entry entry), <refs.c 292>
 1849 ----------------sort_ref_dir: 1826
 1850 ----------------do_for_each_entry_in_dirs: 1840
 1851 ----------------die: 29
 1852 ---------------do_for_each_entry_in_dir: 1842
 1853 ---------------release_packed_ref_cache: int (struct packed_ref_cache packed_refs), <refs.c 1016>
 1854 ----------------free_ref_entry: 1835
 1855 ----------------stat_validity_clear: void (struct stat_validity sv), <read-cache.c 2280>
 1856 -----------------free: <>
 1857 ----------------free: <>
 1858 --------------do_one_ref: int (struct ref_entry entry, void *cb_data), <refs.c 706>
 1859 ---------------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 1860 ---------------ref_resolves_to_object: int (struct ref_entry entry), <refs.c 670>
 1861 ----------------has_sha1_file: int (const unsigned char *sha1), <sha1_file.c 3057>
 1862 -----------------find_pack_entry: 1482
 1863 -----------------has_loose_object: int (const unsigned char *sha1), <sha1_file.c 490>
 1864 ------------------check_and_freshen: int (const unsigned char *sha1, int freshen), <sha1_file.c 479>
 1865 -------------------check_and_freshen_local: int (const unsigned char *sha1, int freshen), <sha1_file.c 462>
 1866 --------------------check_and_freshen_file: int (const char *fn, int freshen), <sha1_file.c 453>
 1867 ---------------------access: <>
 1868 ---------------------freshen_file: int (const char *fn), <sha1_file.c 446>
 1869 ----------------------time: <>
 1870 ----------------------utime: <>
 1871 --------------------sha1_file_name: 1583
 1872 -------------------check_and_freshen_nonlocal: int (const unsigned char *sha1, int freshen), <sha1_file.c 467>
 1873 --------------------prepare_alt_odb: 1418
 1874 --------------------fill_sha1_path: 1588
 1875 --------------------check_and_freshen_file: 1866
 1876 -----------------reprepare_packed_git: 1631
 1877 ----------------error: 12
 1878 ------------handle_one_ref: int (const char *path, const unsigned char *sha1, int flag, void *cb_data), <sha1_name.c 834>
 1879 -------------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 1880 -------------deref_tag: struct object (struct object o, const char *warn, int warnlen), <tag.c 9>
 1881 -------------strlen: <>
 1882 -------------commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 1883 ------------commit_list_sort_by_date: void (struct commit_list list), <commit.c 482>
 1884 -------------llist_mergesort: void * (void *list, void *(*get_next_fn) (const void *), void (*set_next_fn) (void *, void *), int (*compare_fn) (const void *, const void *)), <mergesort.c 26>
 1885 --------------get_nth_next: void * (void *list, unsigned long n, void *(*get_next_fn) (const void *)), <mergesort.c 9>
 1886 --------------pop_item: void * (struct mergesort_sublist l, void *(*get_next_fn) (const void *)), <mergesort.c 17>
 1887 -------------commit_list_get_next: void * (const void *a), <commit.c 472>
 1888 -------------commit_list_set_next: void (void *a, void *next), <commit.c 477>
 1889 -------------commit_list_compare_by_date: int (const void *a, const void *b), <commit.c 461>
 1890 ------------get_sha1_oneline: 1225
 1891 ------------resolve_relative_path: char * (const char *rel), <sha1_name.c 1327>
 1892 -------------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 1893 -------------die: 29
 1894 -------------is_inside_work_tree: int (void), <setup.c 275>
 1895 --------------is_inside_dir: int (const char *dir), <dir.c 1551>
 1896 ---------------xgetcwd: 674
 1897 ---------------dir_inside_of: int (const char *subdir, const char *dir), <dir.c 1524>
 1898 ----------------assert: <>
 1899 ----------------is_dir_sep: <>
 1900 ---------------free: <>
 1901 --------------get_git_work_tree: const char * (void), <environment.c 214>
 1902 -------------prefix_path: char * (const char *prefix, int len, const char *path), <setup.c 115>
 1903 --------------prefix_path_gently: char * (const char *prefix, int len, int *remaining_prefix, const char *path), <setup.c 83>
 1904 ---------------is_absolute_path: <>
 1905 ---------------xmalloc: 172
 1906 ---------------strlen: <>
 1907 ---------------normalize_path_copy_len: 1348
 1908 ---------------free: <>
 1909 ---------------abspath_part_inside_repo: int (char *path), <setup.c 20>
 1910 ----------------get_git_work_tree: 1901
 1911 ----------------strlen: <>
 1912 ----------------offset_1st_component: <>
 1913 ----------------strncmp: <>
 1914 ----------------memmove: <>
 1915 ----------------strcmp: <>
 1916 ----------------real_path: 949
 1917 ---------------memcpy: <>
 1918 ---------------strcpy: <>
 1919 --------------die: 29
 1920 -------------strlen: <>
 1921 ------------strlcpy: <>
 1922 ------------read_cache: <>
 1923 ------------cache_name_pos: <>
 1924 ------------ce_namelen: <>
 1925 ------------memcmp: <>
 1926 ------------ce_stage: <>
 1927 ------------hashcpy: <>
 1928 ------------free: <>
 1929 ------------diagnose_invalid_index_path: void (int stage, const char *prefix, const char *filename), <sha1_name.c 1270>
 1930 -------------strlen: <>
 1931 -------------cache_name_pos: <>
 1932 -------------ce_namelen: <>
 1933 -------------memcmp: <>
 1934 -------------die: 29
 1935 -------------ce_stage: <>
 1936 -------------xmalloc: 172
 1937 -------------strcpy: <>
 1938 -------------strcat: <>
 1939 -------------lstat: <>
 1940 -------------free: <>
 1941 ------------get_tree_entry: int (const unsigned char *tree_sha1, const char *name, unsigned char *sha1, unsigned *mode), <tree-walk.c 453>
 1942 -------------read_object_with_reference: void * (const unsigned char *sha1, const char *required_type_name, unsigned long *size, unsigned char *actual_sha1_return), <sha1_file.c 2748>
 1943 --------------type_from_string: <>
 1944 --------------hashcpy: <>
 1945 --------------read_sha1_file: <>
 1946 --------------free: <>
 1947 --------------strlen: <>
 1948 --------------memcmp: <>
 1949 --------------get_sha1_hex: 931
 1950 -------------hashcpy: <>
 1951 -------------free: <>
 1952 -------------init_tree_desc: void (struct tree_desc desc, const void *buffer, unsigned long size), <tree-walk.c 44>
 1953 --------------decode_tree_entry: void (struct tree_desc desc, const char *buf, unsigned long size), <tree-walk.c 25>
 1954 ---------------die: 29
 1955 ---------------get_mode: const char * (const char *str, unsigned int *modep), <tree-walk.c 8>
 1956 ---------------strlen: <>
 1957 ---------------canon_mode: <>
 1958 -------------find_tree_entry: int (struct tree_desc t, const char *name, unsigned char *result, unsigned *mode), <tree-walk.c 418>
 1959 --------------strlen: <>
 1960 --------------tree_entry_extract: <>
 1961 --------------tree_entry_len: <>
 1962 --------------update_tree_entry: void (struct tree_desc desc), <tree-walk.c 76>
 1963 ---------------die: 29
 1964 ---------------decode_tree_entry: 1953
 1965 --------------memcmp: <>
 1966 --------------hashcpy: <>
 1967 --------------S_ISDIR: <>
 1968 --------------get_tree_entry: 1941
 1969 ------------diagnose_invalid_sha1_path: void (const char *prefix, const char *filename, const unsigned char *tree_sha1, const char *object_name, int object_name_len), <sha1_name.c 1234>
 1970 -------------lstat: <>
 1971 -------------die: 29
 1972 -------------xstrfmt: char * (const char *fmt, ...), <strbuf.c 656>
 1973 --------------va_start: <>
 1974 --------------xstrvfmt: char * (const char *fmt, va_list ap), <strbuf.c 649>
 1975 ---------------strbuf_vaddf: 51
 1976 ---------------strbuf_detach: 190
 1977 --------------va_end: <>
 1978 -------------get_tree_entry: 1941
 1979 ------------die: 29
 1980 ---------error: 12
 1981 ---------git_config_from_blob_sha1: int (config_fn_t fn, const char *name, const unsigned char *sha1, void *data), <config.c 1115>
 1982 ----------read_sha1_file: <>
 1983 ----------error: 12
 1984 ----------free: <>
 1985 ----------git_config_from_buf: int (config_fn_t fn, const char *name, const char *buf, size_t len, void *data), <config.c 1097>
 1986 -----------config_buf_fgetc: int (struct config_source conf), <config.c 66>
 1987 -----------config_buf_ungetc: int (int c, struct config_source conf), <config.c 74>
 1988 ------------die: 29
 1989 -----------config_buf_ftell: long (struct config_source conf), <config.c 86>
 1990 -----------do_config_from: 1064
 1991 --------git_pathdup: 983
 1992 --------git_config_early: 1022
 1993 --------free: <>
 1994 -------die: 29
 1995 ------config_set_callback: int (const char *key, const char *value, void *cb), <config.c 1403>
 1996 -------configset_add_value: int (struct config_set cs, const char *key, const char *value), <config.c 1329>
 1997 --------xmalloc: 172
 1998 --------configset_find_element: struct config_set_element (struct config_set cs, const char *key), <config.c 1307>
 1999 --------hashmap_entry_init: <>
 2000 --------strhash: 1402
 2001 --------xstrdup: 73
 2002 --------string_list_init: inline void (string_list_ty *slp), <sh-i18n--envsubst.c 197>
 2003 --------hashmap_add: void (struct hashmap map, void *entry), <hashmap.c 167>
 2004 ---------bucket: inline unsigned int (const struct hashmap *map, const struct hashmap_entry *key), <hashmap.c 84>
 2005 ---------rehash: void (struct hashmap map, unsigned int newsize), <hashmap.c 90>
 2006 ----------alloc_table: 1152
 2007 ----------bucket: inline unsigned int (const struct hashmap *map, const struct hashmap_entry *key), <hashmap.c 84>
 2008 ----------free: <>
 2009 --------string_list_append_nodup: struct string_list_item (struct string_list list, char *string), <string-list.c 195>
 2010 --------xstrdup_or_null: <>
 2011 --------ALLOC_GROW: <>
 2012 --------strintern: <>
 2013 -----git_configset_get_bool: int (struct config_set cs, const char *key, int *dest), <config.c 1472>
 2014 ------git_configset_get_value: int (struct config_set cs, const char *key, const char **value), <config.c 1415>
 2015 -------git_configset_get_value_multi: const struct string_list (struct config_set cs, const char *key), <config.c 1432>
 2016 -------assert: <>
 2017 ------git_config_bool: 601
 2018 ----strbuf_release: 63
 2019 ----run_access_hook: int (struct daemon_service service, const char *dir, const char *path, struct hostinfo hi), <daemon.c 291>
 2020 -----get_canon_hostname: 882
 2021 -----get_ip_address: 903
 2022 -----start_command: 255
 2023 -----logerror: <>
 2024 -----strbuf_read: 197
 2025 -----strbuf_reset: <>
 2026 -----close: <>
 2027 -----finish_command: int (struct child_process cmd), <run-command.c 550>
 2028 ------wait_or_whine: 411
 2029 ------argv_array_clear: 267
 2030 -----strbuf_release: 63
 2031 -----strbuf_ltrim: 1121
 2032 -----strbuf_addstr: <>
 2033 -----strchr: <>
 2034 -----daemon_error: 857
 2035 ----signal: <>
 2036 ---hostinfo_clear: void (struct hostinfo hi), <daemon.c 664>
 2037 ----strbuf_release: 63
 2038 ---logerror: <>
 2039 --daemonize: int (void), <setup.c 855>
 2040 ---fork: <>
 2041 ---die_errno: 203
 2042 ---exit: <>
 2043 ---setsid: <>
 2044 ---close: <>
 2045 ---sanitize_stdfds: void (void), <setup.c 844>
 2046 ----open: <>
 2047 ----dup: <>
 2048 ----die_errno: 203
 2049 ----close: <>
 2050 --sanitize_stdfds: 2045
 2051 --store_pid: void (const char *path), <daemon.c 1169>
 2052 ---fopen: <>
 2053 ---die_errno: 203
 2054 ---fprintf: <>
 2055 ---getpid: <>
 2056 ---fclose: <>
 2057 --xmalloc: 172
 2058 --serve: int (struct string_list listen_addr, int listen_port, struct credentials cred), <daemon.c 1178>
 2059 ---socksetup: void (struct string_list listen_addr, int listen_port, struct socketlist socklist), <daemon.c 1045>
 2060 ----setup_named_sock: int (char *listen_addr, int listen_port, struct socketlist socklist), <daemon.c 990>
 2061 -----sprintf: <>
 2062 -----memset: <>
 2063 -----getaddrinfo: <>
 2064 -----logerror: <>
 2065 -----gai_strerror: <>
 2066 -----socket: <>
 2067 -----close: <>
 2068 -----setsockopt: <>
 2069 -----set_reuse_addr: int (int sockfd), <daemon.c 870>
 2070 ------setsockopt: <>
 2071 -----strerror: <>
 2072 -----bind: <>
 2073 -----ip2str: const char * (int family, struct sockaddr sin, socklen_t len), <daemon.c 886>
 2074 ------inet_ntop: 886
 2075 ------strcpy: <>
 2076 -----listen: <>
 2077 -----fcntl: <>
 2078 -----ALLOC_GROW: <>
 2079 -----freeaddrinfo: <>
 2080 -----htons: <>
 2081 -----inet_pton: int (int af, const char *src, void *dst), <compat/inet_pton.c 201>
 2082 ------inet_pton4: int (const char *src, unsigned char *dst), <compat/inet_pton.c 53>
 2083 -------strchr: <>
 2084 -------memcpy: <>
 2085 ------inet_pton6: int (const char *src, unsigned char *dst), <compat/inet_pton.c 106>
 2086 -------memset: <>
 2087 -------strchr: <>
 2088 -------inet_pton4: 2082
 2089 -------memcpy: <>
 2090 -----htonl: <>
 2091 ----logerror: <>
 2092 ---die: 29
 2093 ---drop_privileges: void (struct credentials cred), <daemon.c 1139>
 2094 ----initgroups: <>
 2095 ----setgid: <>
 2096 ----setuid: <>
 2097 ----die: 29
 2098 ---loginfo: 808
 2099 ---service_loop: int (struct socketlist socklist), <daemon.c 1062>
 2100 ----xcalloc: 1153
 2101 ----signal: <>
 2102 ----child_handler: void (int signo), <daemon.c 860>
 2103 -----signal: <>
 2104 -----child_handler: 2102
 2105 ----check_dead_children: void (void), <daemon.c 789>
 2106 -----waitpid: 412
 2107 -----loginfo: 808
 2108 -----free: <>
 2109 ----poll: <>
 2110 ----logerror: <>
 2111 ----strerror: <>
 2112 ----sleep: unsigned int (unsigned int seconds), <compat/mingw.c 630>
 2113 -----Sleep: <>
 2114 ----accept: <>
 2115 ----die_errno: 203
 2116 ----handle: void (int incoming, struct sockaddr addr, socklen_t addrlen), <daemon.c 811>
 2117 -----kill_some_child: void (void), <daemon.c 775>
 2118 ------addrcmp: int (const struct sockaddr_storage *s1, const struct sockaddr_storage *s2), <daemon.c 723>
 2119 -------memcmp: <>
 2120 ------kill: <>
 2121 -----sleep: 2112
 2122 -----check_dead_children: 2105
 2123 -----close: <>
 2124 -----logerror: <>
 2125 -----inet_ntop: 886
 2126 -----snprintf: <>
 2127 -----ntohs: <>
 2128 -----strcat: <>
 2129 -----dup: <>
 2130 -----start_command: 255
 2131 -----add_child: void (struct child_process cld, struct sockaddr addr, socklen_t addrlen), <daemon.c 754>
 2132 ------xcalloc: 1153
 2133 ------memcpy: <>
 2134 ------addrcmp: 2118
 2135 --setup_git_directory: const char * (void), <setup.c 831>
 2136 ---setup_git_directory_gently: const char * (int *nongit_ok), <setup.c 732>
 2137 ----setup_git_directory_gently_1: const char * (int *nongit_ok), <setup.c 615>
 2138 -----getenv: <>
 2139 -----git_config_clear: void (void), <config.c 1522>
 2140 ------git_configset_clear: void (struct config_set cs), <config.c 1383>
 2141 -------hashmap_iter_init: void (struct hashmap map, struct hashmap_iter iter), <hashmap.c 207>
 2142 -------hashmap_iter_next: void * (struct hashmap_iter iter), <hashmap.c 214>
 2143 -------free: <>
 2144 -------string_list_clear: 544
 2145 -------hashmap_free: void (struct hashmap map, int free_entries), <hashmap.c 138>
 2146 --------hashmap_iter_init: 2141
 2147 --------hashmap_iter_next: 2142
 2148 --------free: <>
 2149 --------memset: <>
 2150 -----strbuf_getcwd: 217
 2151 -----die_errno: 203
 2152 -----setup_explicit_git_dir: const char * (const char *gitdirenv, struct strbuf cwd, int *nongit_ok), <setup.c 389>
 2153 ------getenv: <>
 2154 ------strlen: <>
 2155 ------die: 29
 2156 ------read_gitfile: 934
 2157 ------xstrdup: 73
 2158 ------is_git_directory: 916
 2159 ------free: <>
 2160 ------check_repository_format_gently: 1020
 2161 ------set_git_work_tree: void (const char *new_work_tree), <environment.c 200>
 2162 -------real_path: 949
 2163 -------strcmp: <>
 2164 -------die: 29
 2165 -------xstrdup: 73
 2166 ------set_git_dir: 973
 2167 ------is_absolute_path: <>
 2168 ------chdir: <>
 2169 ------die_errno: 203
 2170 ------xgetcwd: 674
 2171 ------git_env_bool: 1034
 2172 ------get_git_work_tree: 1901
 2173 ------strcmp: <>
 2174 ------dir_inside_of: 1897
 2175 ------real_path: 949
 2176 ------strbuf_addch: <>
 2177 -----string_list_split: int (struct string_list list, const char *string, int delim, int maxsplit), <string-list.c 259>
 2178 ------die: 29
 2179 ------string_list_append: struct string_list_item (struct string_list list, const char *string), <string-list.c 206>
 2180 ------strchr: <>
 2181 ------string_list_append_nodup: struct string_list_item (struct string_list list, char *string), <string-list.c 195>
 2182 ------xmemdupz: 120
 2183 -----filter_string_list: void (struct string_list list, int free_util, string_list_each_func_t want, void *cb_data), <string-list.c 123>
 2184 ------free: <>
 2185 -----canonicalize_ceiling_entry: int (struct string_list_item item, void *cb_data), <setup.c 587>
 2186 ------is_absolute_path: <>
 2187 ------real_path: 949
 2188 ------real_path_if_valid: const char * (const char *path), <abspath.c 138>
 2189 -------real_path_internal: 950
 2190 ------free: <>
 2191 ------xstrdup: 73
 2192 -----longest_ancestor_length: int (const char *path, struct string_list prefixes), <path.c 714>
 2193 ------strcmp: <>
 2194 ------strlen: <>
 2195 ------strncmp: <>
 2196 -----string_list_clear: 544
 2197 -----has_dos_drive_prefix: <>
 2198 -----git_env_bool: 1034
 2199 -----get_device_or_die: dev_t (const char *path, const char *prefix, int prefix_len), <setup.c 568>
 2200 ------stat: <>
 2201 ------die_errno: 203
 2202 -----read_gitfile: 934
 2203 -----xstrdup: 73
 2204 -----is_git_directory: 916
 2205 -----setup_discovered_git_dir: const char * (const char *gitdir, struct strbuf cwd, int offset, int *nongit_ok), <setup.c 484>
 2206 ------check_repository_format_gently: 1020
 2207 ------getenv: <>
 2208 ------is_absolute_path: <>
 2209 ------xstrdup: 73
 2210 ------real_path: 949
 2211 ------chdir: <>
 2212 ------die_errno: 203
 2213 ------setup_explicit_git_dir: 2152
 2214 ------set_git_dir: 973
 2215 ------set_git_work_tree: 2161
 2216 ------strcmp: <>
 2217 ------strbuf_addch: <>
 2218 -----free: <>
 2219 -----setup_bare_git_dir: const char * (struct strbuf cwd, int offset, int *nongit_ok), <setup.c 524>
 2220 ------check_repository_format_gently: 1020
 2221 ------setenv: <>
 2222 ------getenv: <>
 2223 ------xmemdupz: 120
 2224 ------chdir: <>
 2225 ------die_errno: 203
 2226 ------setup_explicit_git_dir: 2152
 2227 ------offset_1st_component: <>
 2228 ------strbuf_setlen: <>
 2229 ------set_git_dir: 973
 2230 -----setup_nongit: const char * (const char *cwd, int *nongit_ok), <setup.c 558>
 2231 ------die: 29
 2232 ------chdir: <>
 2233 ------die_errno: 203
 2234 -----chdir: <>
 2235 -----strbuf_setlen: <>
 2236 -----die: 29
 2237 ----setenv: <>
 2238 --reset_pack_idx_option: void (struct pack_idx_option opts), <pack-write.c 5>
 2239 ---memset: <>
 2240 --git_pack_config: void (void), <fast-import.c 3287>
 2241 ---git_config_get_ulong: int (const char *key, unsigned long *dest), <config.c 1563>
 2242 ----git_config_check_init: 1148
 2243 ----git_configset_get_ulong: int (struct config_set cs, const char *key, unsigned long *dest), <config.c 1462>
 2244 -----git_configset_get_value: 2014
 2245 -----git_config_ulong: unsigned long (const char *name, const char *value), <config.c 613>
 2246 ------git_parse_ulong: 131
 2247 ------die_bad_number: <>
 2248 ---git_config_get_int: int (const char *key, int *dest), <config.c 1557>
 2249 ----git_config_check_init: 1148
 2250 ----git_configset_get_int: int (struct config_set cs, const char *key, int *dest), <config.c 1452>
 2251 -----git_configset_get_value: 2014
 2252 -----git_config_int: int (const char *name, const char *value), <config.c 597>
 2253 ---git_die_config: <>
 2254 ---git_config: void (config_fn_t fn, void *data), <config.c 1301>
 2255 ----git_config_check_init: 1148
 2256 ----configset_iter: void (struct config_set cs, config_fn_t fn, void *data), <config.c 1280>
 2257 -----git_die_config_linenr: NORETURN void (const char *key, const char *filename, int linenr), <config.c 1598>
 2258 ------die: 29
 2259 ---git_default_config: int (const char *var, const char *value, void *dummy), <config.c 1000>
 2260 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 2261 ----git_default_core_config: int (const char *var, const char *value), <config.c 683>
 2262 -----strcmp: <>
 2263 -----git_config_bool: 601
 2264 -----strcasecmp: <>
 2265 -----git_config_pathname: int (const char **dest, const char *var, const char *value), <config.c 673>
 2266 ------config_error_nonbool: 1137
 2267 ------expand_user_path: 185
 2268 ------die: 29
 2269 -----git_config_int: int (const char *name, const char *value), <config.c 597>
 2270 -----die: 29
 2271 -----getpagesize: <>
 2272 -----git_config_ulong: 2245
 2273 -----error: 12
 2274 -----xstrdup: 73
 2275 -----git_config_string: int (const char **dest, const char *var, const char *value), <config.c 665>
 2276 ------config_error_nonbool: 1137
 2277 ------xstrdup: 73
 2278 -----config_error_nonbool: 1137
 2279 -----parse_whitespace_rule: unsigned (const char *string), <ws.c 25>
 2280 ------strspn: <>
 2281 ------strchrnul: <>
 2282 ------ARRAY_SIZE: <>
 2283 ------strncmp: <>
 2284 ------atoi: <>
 2285 ------warning: 552
 2286 ------die: 29
 2287 ----git_ident_config: int (const char *var, const char *value, void *data), <ident.c 391>
 2288 -----strcmp: <>
 2289 -----config_error_nonbool: 1137
 2290 -----strbuf_reset: <>
 2291 -----strbuf_addstr: <>
 2292 ----git_default_i18n_config: int (const char *var, const char *value), <config.c 918>
 2293 -----strcmp: <>
 2294 -----git_config_string: 2275
 2295 ----git_default_branch_config: int (const char *var, const char *value), <config.c 930>
 2296 -----strcmp: <>
 2297 -----strcasecmp: <>
 2298 -----git_config_bool: 601
 2299 -----config_error_nonbool: 1137
 2300 -----error: 12
 2301 ----git_default_push_config: int (const char *var, const char *value), <config.c 960>
 2302 -----strcmp: <>
 2303 -----config_error_nonbool: 1137
 2304 -----error: 12
 2305 ----git_default_mailmap_config: int (const char *var, const char *value), <config.c 989>
 2306 -----strcmp: <>
 2307 -----git_config_pathname: 2265
 2308 -----git_config_string: 2275
 2309 ----git_default_advice_config: int (const char *var, const char *value), <advice.c 62>
 2310 -----skip_prefix: <>
 2311 -----ARRAY_SIZE: <>
 2312 -----strcmp: <>
 2313 -----git_config_bool: 601
 2314 ----strcmp: <>
 2315 ----git_config_bool: 601
 2316 ----git_config_ulong: 2245
 2317 --alloc_objects: void (unsigned int cnt), <fast-import.c 541>
 2318 ---xmalloc: 172
 2319 --strbuf_init: 65
 2320 --xcalloc: 1153
 2321 --pool_calloc: void * (size_t count, size_t size), <fast-import.c 633>
 2322 ---pool_alloc: void * (size_t len), <fast-import.c 602>
 2323 ----xmalloc: 172
 2324 ---memset: <>
 2325 --pool_alloc: 2322
 2326 --prepare_packed_git: 1483
 2327 --start_packfile: void (void), <fast-import.c 858>
 2328 ---odb_mkstemp: int (char *template, size_t limit, const char *pattern), <environment.c 226>
 2329 ----snprintf: <>
 2330 ----get_object_directory: 1423
 2331 ----git_mkstemp_mode: int (char *pattern, int mode), <wrapper.c 446>
 2332 -----git_mkstemps_mode: int (char *pattern, int suffix_len, int mode), <wrapper.c 383>
 2333 ------strlen: <>
 2334 ------strncmp: <>
 2335 ------gettimeofday: 290
 2336 ------getpid: <>
 2337 ------open: <>
 2338 ----safe_create_leading_directories: enum scld_error (char *path), <sha1_file.c 112>
 2339 ----xmkstemp_mode: int (char *template, int mode), <wrapper.c 459>
 2340 -----strlcpy: <>
 2341 -----git_mkstemp_mode: 2331
 2342 -----absolute_path: 713
 2343 -----die_errno: 203
 2344 ---xcalloc: 1153
 2345 ---strlen: <>
 2346 ---strcpy: <>
 2347 ---sha1fd: struct sha1file (int fd, const char *name), <csum-file.c 121>
 2348 ---htonl: <>
 2349 ---sha1write: void (struct sha1file f, const void *buf, unsigned int count), <csum-file.c 89>
 2350 ----crc32: <>
 2351 ----memcpy: <>
 2352 ----git_SHA1_Update: <>
 2353 ----flush: void (struct sha1file f, const void *buf, unsigned int count), <csum-file.c 14>
 2354 -----read_in_full: 245
 2355 -----die_errno: 203
 2356 -----die: 29
 2357 -----memcmp: <>
 2358 -----xwrite: 241
 2359 -----display_throughput: void (struct progress progress, off_t total), <progress.c 128>
 2360 ------getnanotime: uint64_t (void), <trace.c 386>
 2361 -------highres_nanos: inline uint64_t (void), <trace.c 337>
 2362 --------clock_gettime: <>
 2363 --------QueryPerformanceFrequency: <>
 2364 --------QueryPerformanceCounter: <>
 2365 -------gettimeofday_nanos: inline uint64_t (void), <trace.c 375>
 2366 --------gettimeofday: 290
 2367 ------calloc: <>
 2368 ------throughput_string: void (struct strbuf buf, off_t total, unsigned int rate), <progress.c 118>
 2369 -------strbuf_addstr: <>
 2370 -------strbuf_humanise_bytes: void (struct strbuf buf, off_t bytes), <strbuf.c 568>
 2371 --------strbuf_addf: 49
 2372 ------strncpy: <>
 2373 ------strbuf_release: 63
 2374 ------display: int (struct progress progress, unsigned n, const char *done), <progress.c 75>
 2375 -------clear_progress_signal: void (void), <progress.c 67>
 2376 --------setitimer: int (int type, struct itimerval in, struct itimerval out), <compat/mingw.c 1709>
 2377 ---------error: 12
 2378 ---------is_timeval_eq: inline int (const struct timeval *i1, const struct timeval *i2), <compat/mingw.c 1704>
 2379 ---------stop_timer_thread: void (void), <compat/mingw.c 1685>
 2380 ----------SetEvent: <>
 2381 ----------WaitForSingleObject: <>
 2382 ----------error: 12
 2383 ----------GetLastError: <>
 2384 ----------CloseHandle: <>
 2385 ---------atexit: <>
 2386 ---------start_timer_thread: int (void), <compat/mingw.c 1671>
 2387 ----------CreateEvent: <>
 2388 ----------ticktack: unsigned __stdcall (void *dummy), <compat/mingw.c 1661>
 2389 -----------WaitForSingleObject: <>
 2390 -----------mingw_raise: int (int sig), <compat/mingw.c 1775>
 2391 ------------timer_fn: sig_handler_t, <compat/mingw.c 1650>
 2392 ------------isatty: <>
 2393 ------------fputs: <>
 2394 ------------exit: <>
 2395 ------------sigint_fn: sig_handler_t, <compat/mingw.c 1650>
 2396 ------------raise: <>
 2397 ----------error: 12
 2398 --------signal: <>
 2399 -------display: 2374
 2400 -------fprintf: <>
 2401 -------fflush: <>
 2402 ---REALLOC_ARRAY: <>
 2403 --die_nicely: NORETURN void (const char *err, va_list params), <fast-import.c 495>
 2404 ---vsnprintf: <>
 2405 ---fputs: <>
 2406 ---fputc: <>
 2407 ---write_crash_report: void (const char *err), <fast-import.c 406>
 2408 ----git_path: 1267
 2409 ----getpid: <>
 2410 ----fopen: <>
 2411 ----error: 12
 2412 ----strerror: <>
 2413 ----fprintf: <>
 2414 ----getppid: <>
 2415 ----show_date: 1778
 2416 ----time: <>
 2417 ----fputc: <>
 2418 ----fputs: <>
 2419 ----write_branch_report: void (FILE *rpt, struct branch b), <fast-import.c 378>
 2420 -----fprintf: <>
 2421 -----fputs: <>
 2422 -----is_null_sha1: <>
 2423 -----fputc: <>
 2424 -----sha1_to_hex: 1194
 2425 ----sha1_to_hex: 1194
 2426 ----dump_marks_helper: void (FILE *f, uintmax_t base, struct mark_set m), <fast-import.c 1775>
 2427 -----dump_marks_helper: 2426
 2428 -----fprintf: <>
 2429 -----sha1_to_hex: 1194
 2430 ----fclose: <>
 2431 ---end_packfile: void (void), <fast-import.c 948>
 2432 ----clear_delta_base_cache: void (void), <sha1_file.c 2086>
 2433 -----release_delta_base_cache: inline void (struct delta_base_cache_entry ent), <sha1_file.c 2075>
 2434 ------free: <>
 2435 ----close_pack_windows: void (struct packed_git p), <sha1_file.c 728>
 2436 -----die: 29
 2437 -----munmap: <>
 2438 -----free: <>
 2439 ----sha1close: int (struct sha1file f, unsigned char *result, unsigned int flags), <csum-file.c 56>
 2440 -----sha1flush: void (struct sha1file f), <csum-file.c 45>
 2441 ------git_SHA1_Update: <>
 2442 ------flush: 2353
 2443 -----git_SHA1_Final: <>
 2444 -----hashcpy: <>
 2445 -----flush: 2353
 2446 -----fsync_or_die: void (int fd, const char *msg), <write_or_die.c 67>
 2447 ------fsync: <>
 2448 ------die_errno: 203
 2449 -----close: <>
 2450 -----die_errno: 203
 2451 -----read_in_full: 245
 2452 -----die: 29
 2453 -----free: <>
 2454 ----fixup_pack_header_footer: void (int pack_fd, unsigned char *new_pack_sha1, const char *pack_name, uint32_t object_count, unsigned char *partial_pack_sha1, off_t partial_pack_offset), <pack-write.c 206>
 2455 -----git_SHA1_Init: <>
 2456 -----lseek: <>
 2457 -----die_errno: 203
 2458 -----read_in_full: 245
 2459 -----git_SHA1_Update: <>
 2460 -----htonl: <>
 2461 -----write_or_die: 247
 2462 -----xmalloc: 172
 2463 -----xread: 199
 2464 -----git_SHA1_Final: <>
 2465 -----hashcmp: <>
 2466 -----die: 29
 2467 -----MSB: <>
 2468 -----free: <>
 2469 -----fsync_or_die: 2446
 2470 ----close: <>
 2471 ----keep_pack: char * (const char *curr_index_name), <fast-import.c 909>
 2472 -----odb_pack_keep: int (char *name, size_t namesz, const unsigned char *sha1), <environment.c 248>
 2473 ------snprintf: <>
 2474 ------get_object_directory: 1423
 2475 ------sha1_to_hex: 1194
 2476 ------open: <>
 2477 ------safe_create_leading_directories: enum scld_error (char *path), <sha1_file.c 112>
 2478 -----die_errno: 203
 2479 -----write_or_die: 247
 2480 -----strlen: <>
 2481 -----close: <>
 2482 -----snprintf: <>
 2483 -----get_object_directory: 1423
 2484 -----sha1_to_hex: 1194
 2485 -----move_temp_to_file: int (const char *tmpfile, const char *filename), <sha1_file.c 2818>
 2486 ------link: int (const char *oldpath, const char *newpath), <compat/mingw.c 1840>
 2487 -------BOOL: <>
 2488 -------xutftowcs_path: <>
 2489 -------create_hard_link: T, <compat/mingw.c 1843>
 2490 -------GetProcAddress: <>
 2491 -------GetModuleHandle: <>
 2492 -------err_win_to_posix: 258
 2493 -------GetLastError: <>
 2494 ------rename: <>
 2495 ------unlink_or_warn: 658
 2496 ------error: 12
 2497 ------strerror: <>
 2498 ------adjust_shared_perm: 702
 2499 -----die: 29
 2500 -----free: <>
 2501 ----create_index: const char * (void), <fast-import.c 886>
 2502 -----tmpfile: <>
 2503 -----xmalloc: 172
 2504 -----die: 29
 2505 -----write_idx_file: const char * (const char *index_name, struct pack_idx_entry objects, int nr_objects, const struct pack_idx_option *opts, const unsigned char *sha1), <pack-write.c 45>
 2506 ------qsort: <>
 2507 ------sha1_compare: int (const void *_a, const void *_b), <pack-write.c 12>
 2508 -------hashcmp: <>
 2509 ------assert: <>
 2510 ------sha1fd_check: struct sha1file (const char *name), <csum-file.c 126>
 2511 ------odb_mkstemp: 2328
 2512 ------xstrdup: 73
 2513 ------unlink: <>
 2514 ------open: <>
 2515 ------die_errno: 203
 2516 ------sha1fd: struct sha1file (int fd, const char *name), <csum-file.c 121>
 2517 ------need_large_offset: int (off_t offset, const struct pack_idx_option *opts), <pack-write.c 27>
 2518 -------bsearch: <>
 2519 -------cmp_uint32: int (const void *a_, const void *b_), <pack-write.c 19>
 2520 ------htonl: <>
 2521 ------sha1write: 2349
 2522 ------hashcmp: <>
 2523 ------die: 29
 2524 ------sha1_to_hex: 1194
 2525 ------sha1close: 2439
 2526 -----free: <>
 2527 ----add_packed_git: struct packed_git (const char *path, int path_len, int local), <sha1_file.c 1104>
 2528 ----strlen: <>
 2529 ----die: 29
 2530 ----install_packed_git: 1498
 2531 ----fprintf: <>
 2532 ----sha1_to_hex: 1194
 2533 ----fputc: <>
 2534 ----fflush: <>
 2535 ----unlink_or_warn: 658
 2536 ----free: <>
 2537 ----strbuf_release: 63
 2538 ---unkeep_all_packs: void (void), <fast-import.c 935>
 2539 ----snprintf: <>
 2540 ----get_object_directory: 1423
 2541 ----sha1_to_hex: 1194
 2542 ----unlink_or_warn: 658
 2543 ---dump_marks: void (void), <fast-import.c 1795>
 2544 ----hold_lock_file_for_update: 645
 2545 ----error: 12
 2546 ----strerror: <>
 2547 ----fdopen_lock_file: FILE * (struct lock_file lk, const char *mode), <lockfile.c 228>
 2548 -----die: 29
 2549 -----fdopen: <>
 2550 ----rollback_lock_file: 652
 2551 ----dump_marks_helper: 2426
 2552 ----commit_lock_file: 723
 2553 ---exit: <>
 2554 --set_checkpoint_signal: void (void), <fast-import.c 528>
 2555 ---memset: <>
 2556 ---checkpoint_signal: void (int signo), <fast-import.c 523>
 2557 ---sigemptyset: <>
 2558 ---sigaction: int (int sig, struct sigaction in, struct sigaction out), <compat/mingw.c 1738>
 2559 ----error: 12
 2560 ----timer_fn: sig_handler_t, <compat/mingw.c 1650>
 2561 --read_next_command: int (void), <fast-import.c 1866>
 2562 ---strbuf_detach: 190
 2563 ---strbuf_getline: 564
 2564 ---starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 2565 ---parse_argv: void (void), <fast-import.c 3320>
 2566 ----strcmp: <>
 2567 ----skip_prefix: <>
 2568 ----die: 29
 2569 ----parse_one_option: int (const char *option), <fast-import.c 3198>
 2570 -----skip_prefix: <>
 2571 -----git_parse_ulong: 131
 2572 -----warning: 552
 2573 -----option_depth: void (const char *depth), <fast-import.c 3163>
 2574 ------ulong_arg: unsigned long (const char *option, const char *arg), <fast-import.c 3154>
 2575 -------strtoul: <>
 2576 -------strchr: <>
 2577 -------die: 29
 2578 ------die: 29
 2579 -----option_active_branches: void (const char *branches), <fast-import.c 3170>
 2580 ------ulong_arg: 2574
 2581 -----option_export_pack_edges: void (const char *edges), <fast-import.c 3189>
 2582 ------fclose: <>
 2583 ------fopen: <>
 2584 ------die_errno: 203
 2585 -----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 2586 ----parse_one_feature: int (const char *feature, int from_stream), <fast-import.c 3234>
 2587 -----skip_prefix: <>
 2588 -----option_date_format: void (const char *fmt), <fast-import.c 3142>
 2589 ------strcmp: <>
 2590 ------die: 29
 2591 -----option_import_marks: void (const char *marks, int from_stream, int ignore_missing), <fast-import.c 3124>
 2592 ------die: 29
 2593 ------read_marks: void (void), <fast-import.c 1826>
 2594 -------fopen: <>
 2595 -------die_errno: 203
 2596 -------fgets: <>
 2597 -------strchr: <>
 2598 -------die: 29
 2599 -------strtoumax: <>
 2600 -------get_sha1_hex: 931
 2601 -------find_object: struct object_entry (unsigned char *sha1), <fast-import.c 566>
 2602 -------sha1_object_info: 1477
 2603 -------sha1_to_hex: 1194
 2604 -------insert_object: struct object_entry (unsigned char *sha1), <fast-import.c 576>
 2605 -------insert_mark: void (uintmax_t idnum, struct object_entry oe), <fast-import.c 648>
 2606 --------pool_calloc: 2321
 2607 -------fclose: <>
 2608 ------make_fast_import_path: char * (const char *path), <fast-import.c 3114>
 2609 -------is_absolute_path: <>
 2610 -------xstrdup: 73
 2611 -------strbuf_addf: 49
 2612 -------get_git_dir: 986
 2613 -------strbuf_detach: 190
 2614 ------safe_create_leading_directories_const: enum scld_error (const char *path), <sha1_file.c 164>
 2615 -----option_export_marks: void (const char *marks), <fast-import.c 3175>
 2616 ------make_fast_import_path: 2608
 2617 ------safe_create_leading_directories_const: enum scld_error (const char *path), <sha1_file.c 164>
 2618 -----strcmp: <>
 2619 ----option_cat_blob_fd: void (const char *fd), <fast-import.c 3181>
 2620 -----ulong_arg: 2574
 2621 -----die: 29
 2622 ----usage: 623
 2623 ----read_marks: 2593
 2624 ---free: <>
 2625 ---skip_prefix: <>
 2626 ---parse_cat_blob: void (const char *p), <fast-import.c 2922>
 2627 ----find_mark: struct object_entry (uintmax_t idnum), <fast-import.c 671>
 2628 ----parse_mark_ref_eol: uintmax_t (const char *p), <fast-import.c 2261>
 2629 -----parse_mark_ref: uintmax_t (const char *p, char **endptr), <fast-import.c 2245>
 2630 ------assert: <>
 2631 ------strtoumax: <>
 2632 ------die: 29
 2633 -----die: 29
 2634 ----die: 29
 2635 ----hashcpy: <>
 2636 ----get_sha1_hex: 931
 2637 ----find_object: struct object_entry (unsigned char *sha1), <fast-import.c 566>
 2638 ----cat_blob: void (struct object_entry oe, unsigned char sha1[20]), <fast-import.c 2877>
 2639 -----read_sha1_file: <>
 2640 -----gfi_unpack_entry: void * (struct object_entry oe, unsigned long *sizep), <fast-import.c 1286>
 2641 ------close_pack_windows: 2435
 2642 ------sha1flush: 2440
 2643 ------unpack_entry: void * (struct packed_git p, off_t obj_offset, enum object_type final_type, unsigned long *final_size), <sha1_file.c 2149>
 2644 -------write_pack_access_log: void (struct packed_git p, off_t obj_offset), <sha1_file.c 2133>
 2645 --------TRACE_KEY_INIT: <>
 2646 --------trace_printf_key: void (struct trace_key key, const char *format, ...), <trace.c 201>
 2647 ---------va_start: <>
 2648 ---------trace_vprintf_fl: 371
 2649 ---------va_end: <>
 2650 -------get_delta_base_cache_entry: struct delta_base_cache_entry (struct packed_git p, off_t base_offset), <sha1_file.c 2026>
 2651 -------eq_delta_base_cache_entry: int (struct delta_base_cache_entry ent, struct packed_git p, off_t base_offset), <sha1_file.c 2032>
 2652 -------clear_delta_base_cache_entry: void (struct delta_base_cache_entry ent), <sha1_file.c 2045>
 2653 -------find_pack_revindex: struct revindex_entry (struct packed_git p, off_t ofs), <pack-revindex.c 238>
 2654 -------check_pack_crc: int (struct packed_git p, struct pack_window w_curs, off_t offset, off_t len, unsigned int nr), <pack-check.c 23>
 2655 --------crc32: <>
 2656 --------use_pack: 1635
 2657 --------ntohl: <>
 2658 -------nth_packed_object_sha1: 1667
 2659 -------error: 12
 2660 -------sha1_to_hex: 1194
 2661 -------mark_bad_packed_object: 1672
 2662 -------unuse_pack: 1671
 2663 -------unpack_object_header: 1634
 2664 -------get_delta_base: 1648
 2665 -------alloc_nr: <>
 2666 -------xmalloc: 172
 2667 -------memcpy: <>
 2668 -------ALLOC_GROW: <>
 2669 -------die: 29
 2670 -------unpack_compressed_entry: void * (struct packed_git p, struct pack_window w_curs, off_t curpos, unsigned long size), <sha1_file.c 1964>
 2671 --------xmallocz_gently: void * (size_t size), <wrapper.c 110>
 2672 ---------do_xmallocz: 123
 2673 --------memset: <>
 2674 --------git_inflate_init: 1605
 2675 --------use_pack: 1635
 2676 --------git_inflate: 1613
 2677 --------git_inflate_end: 1624
 2678 --------free: <>
 2679 -------add_delta_base_cache: void (struct packed_git p, off_t base_offset, void *base, unsigned long base_size, enum object_type type), <sha1_file.c 2093>
 2680 --------hash: 1400
 2681 --------pack_entry_hash: unsigned long (struct packed_git p, off_t base_offset), <sha1_file.c 2016>
 2682 ---------hash: 1400
 2683 --------release_delta_base_cache: 2433
 2684 -------read_object: void * (const unsigned char *sha1, enum object_type type, unsigned long *size), <sha1_file.c 2680>
 2685 --------find_cached_object: struct cached_object (const unsigned char *sha1), <sha1_file.c 69>
 2686 --------xmemdupz: 120
 2687 --------read_packed_sha1: void * (const unsigned char *sha1, enum object_type type, unsigned long *size), <sha1_file.c 2638>
 2688 ---------find_pack_entry: 1482
 2689 ---------cache_or_unpack_entry: void * (struct packed_git p, off_t base_offset, unsigned long *base_size, enum object_type type, int keep_cache), <sha1_file.c 2053>
 2690 ----------get_delta_base_cache_entry: struct delta_base_cache_entry (struct packed_git p, off_t base_offset), <sha1_file.c 2026>
 2691 ----------eq_delta_base_cache_entry: int (struct delta_base_cache_entry ent, struct packed_git p, off_t base_offset), <sha1_file.c 2032>
 2692 ----------unpack_entry: 2643
 2693 ----------clear_delta_base_cache_entry: 2652
 2694 ----------xmemdupz: 120
 2695 ---------error: 12
 2696 ---------sha1_to_hex: 1194
 2697 ---------mark_bad_packed_object: 1672
 2698 ---------read_object: 2684
 2699 --------map_sha1_file: 1591
 2700 --------unpack_sha1_file: void * (void *map, unsigned long mapsize, enum object_type type, unsigned long *size, const unsigned char *sha1), <sha1_file.c 1663>
 2701 ---------unpack_sha1_header: 1603
 2702 ---------parse_sha1_header: 1622
 2703 ---------unpack_sha1_rest: void * (git_zstream *stream, void *buffer, unsigned long size, const unsigned char *sha1), <sha1_file.c 1567>
 2704 ----------strlen: <>
 2705 ----------xmallocz: 122
 2706 ----------memcpy: <>
 2707 ----------git_inflate: 1613
 2708 ----------git_inflate_end: 1624
 2709 ----------error: 12
 2710 ----------sha1_to_hex: 1194
 2711 ----------free: <>
 2712 --------munmap: <>
 2713 --------reprepare_packed_git: 1631
 2714 -------patch_delta: void * (const void *src_buf, unsigned long src_size, const void *delta_buf, unsigned long delta_size, unsigned long *dst_size), <patch-delta.c 15>
 2715 --------get_delta_hdr_size: <>
 2716 --------xmallocz: 122
 2717 --------unsigned_add_overflows: <>
 2718 --------memcpy: <>
 2719 --------error: 12
 2720 --------free: <>
 2721 -------free: <>
 2722 -----strbuf_reset: <>
 2723 -----strbuf_addf: 49
 2724 -----sha1_to_hex: 1194
 2725 -----cat_blob_write: void (const char *buf, unsigned long size), <fast-import.c 2871>
 2726 ------write_in_full: 240
 2727 ------die_errno: 203
 2728 -----strbuf_release: 63
 2729 -----free: <>
 2730 -----die: 29
 2731 -----typename: 1237
 2732 -----strbuf_attach: void (struct strbuf sb, void *buf, size_t len, size_t alloc), <strbuf.c 48>
 2733 ------strbuf_release: 63
 2734 ------strbuf_grow: 53
 2735 --parse_new_blob: void (void), <fast-import.c 2076>
 2736 ---read_next_command: 2561
 2737 ---parse_mark: void (void), <fast-import.c 1927>
 2738 ----skip_prefix: <>
 2739 ----strtoumax: <>
 2740 ----read_next_command: 2561
 2741 ---parse_and_store_blob: void (struct last_object last, unsigned char *sha1out, uintmax_t mark), <fast-import.c 2055>
 2742 ----parse_data: int (struct strbuf sb, uintmax_t limit, uintmax_t *len_res), <fast-import.c 1938>
 2743 -----strbuf_reset: <>
 2744 -----skip_prefix: <>
 2745 -----die: 29
 2746 -----xstrdup: 73
 2747 -----strbuf_detach: 190
 2748 -----strbuf_getline: 564
 2749 -----strcmp: <>
 2750 -----strbuf_addbuf: <>
 2751 -----strbuf_addch: <>
 2752 -----free: <>
 2753 -----strtoumax: <>
 2754 -----strbuf_fread: size_t (struct strbuf sb, size_t size, FILE *f), <strbuf.c 346>
 2755 ------strbuf_grow: 53
 2756 ------fread: <>
 2757 ------strbuf_setlen: <>
 2758 ------strbuf_release: 63
 2759 -----feof: <>
 2760 -----skip_optional_lf: void (void), <fast-import.c 1920>
 2761 ------fgetc: <>
 2762 ------ungetc: <>
 2763 ----store_object: int (enum object_type type, struct strbuf dat, struct last_object last, unsigned char *sha1out, uintmax_t mark), <fast-import.c 1019>
 2764 -----sprintf: <>
 2765 -----typename: 1237
 2766 -----git_SHA1_Init: <>
 2767 -----git_SHA1_Update: <>
 2768 -----git_SHA1_Final: <>
 2769 -----hashcpy: <>
 2770 -----insert_object: struct object_entry (unsigned char *sha1), <fast-import.c 576>
 2771 -----insert_mark: 2605
 2772 -----find_sha1_pack: struct packed_git (const unsigned char *sha1, struct packed_git packs), <sha1_file.c 2513>
 2773 -----diff_delta: <>
 2774 -----git_deflate_init: void (git_zstream *strm, int level), <zlib.c 158>
 2775 ------memset: <>
 2776 ------zlib_pre_call: 1606
 2777 ------deflateInit: <>
 2778 ------zlib_post_call: 1609
 2779 ------die: 29
 2780 ------zerr_to_string: 1612
 2781 -----git_deflate_bound: unsigned long (git_zstream *strm, unsigned long size), <zlib.c 153>
 2782 ------deflateBound: <>
 2783 -----xmalloc: 172
 2784 -----git_deflate: int (git_zstream *strm, int flush), <zlib.c 236>
 2785 ------zlib_pre_call: 1606
 2786 ------deflate: <>
 2787 ------die: 29
 2788 ------zlib_post_call: 1609
 2789 ------error: 12
 2790 ------zerr_to_string: 1612
 2791 -----git_deflate_end: void (git_zstream *strm), <zlib.c 216>
 2792 ------git_deflate_abort: int (git_zstream *strm), <zlib.c 206>
 2793 -------zlib_pre_call: 1606
 2794 -------deflateEnd: <>
 2795 -------zlib_post_call: 1609
 2796 ------error: 12
 2797 ------zerr_to_string: 1612
 2798 -----cycle_packfile: void (void), <fast-import.c 1013>
 2799 ------end_packfile: 2431
 2800 ------start_packfile: 2327
 2801 -----free: <>
 2802 -----xrealloc: 176
 2803 -----crc32_begin: void (struct sha1file f), <csum-file.c 176>
 2804 ------crc32: <>
 2805 -----encode_in_pack_object_header: int (enum object_type type, uintmax_t size, unsigned char *hdr), <pack-write.c 308>
 2806 ------die: 29
 2807 -----sha1write: 2349
 2808 -----crc32: <>
 2809 -----crc32_end: uint32_t (struct sha1file f), <csum-file.c 182>
 2810 -----strbuf_swap: <>
 2811 ----strbuf_release: 63
 2812 ----stream_blob: void (uintmax_t len, unsigned char *sha1out, uintmax_t mark), <fast-import.c 1160>
 2813 -----xmalloc: 172
 2814 -----cycle_packfile: 2798
 2815 -----sha1file_checkpoint: void (struct sha1file f, struct sha1file_checkpoint checkpoint), <csum-file.c 156>
 2816 ------sha1flush: 2440
 2817 -----snprintf: <>
 2818 -----die: 29
 2819 -----git_SHA1_Init: <>
 2820 -----git_SHA1_Update: <>
 2821 -----crc32_begin: 2803
 2822 -----git_deflate_init: 2774
 2823 -----encode_in_pack_object_header: 2805
 2824 -----fread: <>
 2825 -----feof: <>
 2826 -----git_deflate: 2784
 2827 -----sha1write: 2349
 2828 -----git_deflate_end: 2791
 2829 -----git_SHA1_Final: <>
 2830 -----hashcpy: <>
 2831 -----insert_object: struct object_entry (unsigned char *sha1), <fast-import.c 576>
 2832 -----insert_mark: 2605
 2833 -----truncate_pack: void (struct sha1file_checkpoint checkpoint), <fast-import.c 1153>
 2834 ------sha1file_truncate: int (struct sha1file f, struct sha1file_checkpoint checkpoint), <csum-file.c 163>
 2835 -------ftruncate: <>
 2836 -------lseek: <>
 2837 ------die_errno: 203
 2838 -----find_sha1_pack: struct packed_git (const unsigned char *sha1, struct packed_git packs), <sha1_file.c 2513>
 2839 -----crc32: <>
 2840 -----crc32_end: uint32_t (struct sha1file f), <csum-file.c 182>
 2841 -----free: <>
 2842 ----skip_optional_lf: 2760
 2843 --parse_ls: void (const char *p, struct branch b), <fast-import.c 3046>
 2844 ---die: 29
 2845 ---parse_treeish_dataref: struct object_entry (const char **p), <fast-import.c 2995>
 2846 ---new_tree_entry: struct tree_entry (void), <fast-import.c 805>
 2847 ---hashcpy: <>
 2848 ---is_null_sha1: <>
 2849 ---load_tree: void (struct tree_entry root), <fast-import.c 1329>
 2850 ----new_tree_content: struct tree_content (unsigned int cnt), <fast-import.c 749>
 2851 ----is_null_sha1: <>
 2852 ----find_object: struct object_entry (unsigned char *sha1), <fast-import.c 566>
 2853 ----die: 29
 2854 ----sha1_to_hex: 1194
 2855 ----gfi_unpack_entry: 2640
 2856 ----read_sha1_file: <>
 2857 ----new_tree_entry: struct tree_entry (void), <fast-import.c 805>
 2858 ----grow_tree_content: struct tree_content (struct tree_content t, int amt), <fast-import.c 793>
 2859 ----get_mode: const char * (const char *str, uint16_t *modep), <fast-import.c 1315>
 2860 ----to_atom: struct atom_str (const char *s, unsigned short len), <fast-import.c 690>
 2861 ----strlen: <>
 2862 ----hashcpy: <>
 2863 ----free: <>
 2864 ---strbuf_reset: <>
 2865 ---unquote_c_style: int (struct strbuf sb, const char *quoted, const char **endp), <quote.c 313>
 2866 ----strcspn: <>
 2867 ----strbuf_add: 81
 2868 ----error: 12
 2869 ----strbuf_addch: <>
 2870 ----strbuf_setlen: <>
 2871 ---tree_content_get: int (struct tree_entry root, const char *p, struct tree_entry leaf, int allow_root), <fast-import.c 1640>
 2872 ----strchrnul: <>
 2873 ----die: 29
 2874 ----load_tree: 2849
 2875 ----strncmp_icase: int (const char *a, const char *b, size_t count), <dir.c 45>
 2876 -----strncasecmp: <>
 2877 -----strncmp: <>
 2878 ----S_ISDIR: <>
 2879 ----tree_content_get: 2871
 2880 ----memcpy: <>
 2881 ----is_null_sha1: <>
 2882 ----dup_tree_content: struct tree_content (struct tree_content s), <fast-import.c 833>
 2883 ---S_ISDIR: <>
 2884 ---store_tree: void (struct tree_entry root), <fast-import.c 1425>
 2885 ----is_null_sha1: <>
 2886 ----load_tree: 2849
 2887 ----store_tree: 2884
 2888 ----find_object: struct object_entry (unsigned char *sha1), <fast-import.c 566>
 2889 ----S_ISDIR: <>
 2890 ----mktree: void (struct tree_content t, int v, struct strbuf b), <fast-import.c 1397>
 2891 -----qsort: <>
 2892 -----tecmp0: int (const void *_a, const void *_b), <fast-import.c 1379>
 2893 ------tree_entry: int (struct tree_desc desc, struct name_entry entry), <tree-walk.c 93>
 2894 -------update_tree_entry: 1962
 2895 ------base_name_compare: int (const char *name1, int len1, int mode1, const char *name2, int len2, int mode2), <read-cache.c 385>
 2896 -------memcmp: <>
 2897 -------S_ISDIR: <>
 2898 -----tecmp1: int (const void *_a, const void *_b), <fast-import.c 1388>
 2899 ------tree_entry: 2893
 2900 ------base_name_compare: 2895
 2901 -----strbuf_reset: <>
 2902 -----strbuf_grow: 53
 2903 -----strbuf_addf: 49
 2904 -----strbuf_add: 81
 2905 ----store_object: 2763
 2906 ----hashcpy: <>
 2907 ----release_tree_entry: void (struct tree_entry e), <fast-import.c 825>
 2908 -----release_tree_content_recursive: void (struct tree_content t), <fast-import.c 785>
 2909 ------release_tree_entry: 2907
 2910 ------release_tree_content: void (struct tree_content t), <fast-import.c 777>
 2911 -------hc_entries: unsigned int (unsigned int cnt), <fast-import.c 743>
 2912 ---print_ls: void (int mode, const unsigned char *sha1, const char *path), <fast-import.c 3019>
 2913 ----S_ISGITLINK: <>
 2914 ----S_ISDIR: <>
 2915 ----strbuf_reset: <>
 2916 ----strbuf_addstr: <>
 2917 ----quote_c_style: size_t (const char *name, struct strbuf sb, FILE *fp, int nodq), <quote.c 246>
 2918 -----quote_c_style_counted: size_t (const char *name, ssize_t maxlen, struct strbuf sb, FILE *fp, int no_dq), <quote.c 192>
 2919 ------next_quote_pos: size_t (const char *s, ssize_t maxlen), <quote.c 168>
 2920 -------sq_must_quote: inline int (char c), <quote.c 160>
 2921 ------EMIT: <>
 2922 ------EMITBUF: <>
 2923 ----strbuf_addch: <>
 2924 ----strbuf_addf: 49
 2925 ----sha1_to_hex: 1194
 2926 ----cat_blob_write: 2725
 2927 ---release_tree_content_recursive: 2908
 2928 ---release_tree_entry: 2907
 2929 --parse_new_commit: void (const char *arg), <fast-import.c 2671>
 2930 ---lookup_branch: struct branch (const char *name), <fast-import.c 709>
 2931 ---new_branch: struct branch (const char *name), <fast-import.c 720>
 2932 ---read_next_command: 2561
 2933 ---parse_mark: 2737
 2934 ---skip_prefix: <>
 2935 ---parse_ident: char * (const char *buf), <fast-import.c 2011>
 2936 ----strcspn: <>
 2937 ----die: 29
 2938 ----strbuf_add: 81
 2939 ----validate_raw_date: int (const char *src, struct strbuf result), <fast-import.c 1986>
 2940 -----strtoul: <>
 2941 -----strbuf_addstr: <>
 2942 ----parse_date: int (const char *date, struct strbuf result), <date.c 748>
 2943 -----parse_date_basic: 1719
 2944 -----date_string: void (unsigned long date, int offset, struct strbuf buf), <date.c 618>
 2945 ------strbuf_addf: 49
 2946 ----strcmp: <>
 2947 ----datestamp: void (struct strbuf out), <date.c 783>
 2948 -----time: <>
 2949 -----tm_to_time_t: 1746
 2950 -----localtime: <>
 2951 -----date_string: 2944
 2952 ----strbuf_detach: 190
 2953 ---die: 29
 2954 ---parse_data: 2742
 2955 ---parse_from: int (struct branch b), <fast-import.c 2587>
 2956 ----skip_prefix: <>
 2957 ----release_tree_content_recursive: 2908
 2958 ----lookup_branch: struct branch (const char *name), <fast-import.c 709>
 2959 ----die: 29
 2960 ----hashcpy: <>
 2961 ----parse_mark_ref_eol: 2628
 2962 ----find_mark: struct object_entry (uintmax_t idnum), <fast-import.c 671>
 2963 ----gfi_unpack_entry: 2640
 2964 ----parse_from_commit: void (struct branch b, char *buf, unsigned long size), <fast-import.c 2560>
 2965 -----die: 29
 2966 -----sha1_to_hex: 1194
 2967 -----memcmp: <>
 2968 -----get_sha1_hex: 931
 2969 -----hashcpy: <>
 2970 ----free: <>
 2971 ----parse_from_existing: void (struct branch b), <fast-import.c 2571>
 2972 -----is_null_sha1: <>
 2973 -----hashclr: <>
 2974 -----read_object_with_reference: 1942
 2975 -----parse_from_commit: 2964
 2976 -----free: <>
 2977 ----get_sha1: 1182
 2978 ----is_null_sha1: <>
 2979 ----read_next_command: 2561
 2980 ---parse_merge: struct hash_list (unsigned int *count), <fast-import.c 2633>
 2981 ---unload_one_branch: void (void), <fast-import.c 2083>
 2982 ----release_tree_content_recursive: 2908
 2983 ---load_branch: void (struct branch b), <fast-import.c 2115>
 2984 ----load_tree: 2849
 2985 ---convert_num_notes_to_fanout: unsigned char (uintmax_t num_notes), <fast-import.c 2127>
 2986 ---file_change_m: void (const char *p, struct branch b), <fast-import.c 2288>
 2987 ----get_mode: 2859
 2988 ----die: 29
 2989 ----find_mark: struct object_entry (uintmax_t idnum), <fast-import.c 671>
 2990 ----parse_mark_ref_space: uintmax_t (const char **p), <fast-import.c 2276>
 2991 -----parse_mark_ref: 2629
 2992 -----die: 29
 2993 ----hashcpy: <>
 2994 ----skip_prefix: <>
 2995 ----get_sha1_hex: 931
 2996 ----find_object: struct object_entry (unsigned char *sha1), <fast-import.c 566>
 2997 ----strbuf_reset: <>
 2998 ----unquote_c_style: 2865
 2999 ----S_ISDIR: <>
 3000 ----hashcmp: <>
 3001 ----tree_content_remove: int (struct tree_entry root, const char *p, struct tree_entry backup_leaf, int allow_root), <fast-import.c 1575>
 3002 -----strchrnul: <>
 3003 -----load_tree: 2849
 3004 -----strncmp_icase: 2875
 3005 -----S_ISDIR: <>
 3006 -----tree_content_remove: 3001
 3007 -----hashclr: <>
 3008 -----memcpy: <>
 3009 -----release_tree_content_recursive: 2908
 3010 ----S_ISGITLINK: <>
 3011 ----typename: 1237
 3012 ----strbuf_addstr: <>
 3013 ----read_next_command: 2561
 3014 ----parse_and_store_blob: 2741
 3015 ----sha1_object_info: 1477
 3016 ----tree_content_replace: void (struct tree_entry root, const unsigned char *sha1, const uint16_t mode, struct tree_content newtree), <fast-import.c 1471>
 3017 -----S_ISDIR: <>
 3018 -----die: 29
 3019 -----hashclr: <>
 3020 -----hashcpy: <>
 3021 -----release_tree_content_recursive: 2908
 3022 ----tree_content_set: int (struct tree_entry root, const char *p, const unsigned char *sha1, const uint16_t mode, struct tree_content subtree), <fast-import.c 1486>
 3023 -----strchrnul: <>
 3024 -----die: 29
 3025 -----S_ISDIR: <>
 3026 -----load_tree: 2849
 3027 -----strncmp_icase: 2875
 3028 -----hashcmp: <>
 3029 -----hashcpy: <>
 3030 -----release_tree_content_recursive: 2908
 3031 -----hashclr: <>
 3032 -----new_tree_content: struct tree_content (unsigned int cnt), <fast-import.c 749>
 3033 -----tree_content_set: 3022
 3034 -----grow_tree_content: struct tree_content (struct tree_content t, int amt), <fast-import.c 793>
 3035 -----new_tree_entry: struct tree_entry (void), <fast-import.c 805>
 3036 -----to_atom: struct atom_str (const char *s, unsigned short len), <fast-import.c 690>
 3037 ---file_change_d: void (const char *p, struct branch b), <fast-import.c 2387>
 3038 ----strbuf_reset: <>
 3039 ----unquote_c_style: 2865
 3040 ----die: 29
 3041 ----tree_content_remove: 3001
 3042 ---file_change_cr: void (const char *s, struct branch b, int rename), <fast-import.c 2401>
 3043 ----strbuf_reset: <>
 3044 ----unquote_c_style: 2865
 3045 ----die: 29
 3046 ----strchr: <>
 3047 ----strbuf_add: 81
 3048 ----memset: <>
 3049 ----tree_content_remove: 3001
 3050 ----tree_content_get: 2871
 3051 ----tree_content_replace: 3016
 3052 ----tree_content_set: 3022
 3053 ---note_change_n: void (const char *p, struct branch b, unsigned char *old_fanout), <fast-import.c 2453>
 3054 ----change_note_fanout: uintmax_t (struct tree_entry root, unsigned char fanout), <fast-import.c 2228>
 3055 -----do_change_note_fanout: uintmax_t (struct tree_entry orig_root, struct tree_entry root, char *hex_sha1, unsigned int hex_sha1_len, char *fullpath, unsigned int fullpath_len, unsigned char fanout), <fast-import.c 2151>
 3056 ------memcpy: <>
 3057 ------get_sha1_hex: 931
 3058 ------construct_path_with_fanout: void (const char *hex_sha1, unsigned char fanout, char *path), <fast-import.c 2135>
 3059 -------die: 29
 3060 -------memcpy: <>
 3061 ------strcmp: <>
 3062 ------tree_content_remove: 3001
 3063 ------die: 29
 3064 ------tree_content_set: 3022
 3065 ------S_ISDIR: <>
 3066 ------load_tree: 2849
 3067 ------do_change_note_fanout: 3055
 3068 ----convert_num_notes_to_fanout: 2985
 3069 ----find_mark: struct object_entry (uintmax_t idnum), <fast-import.c 671>
 3070 ----parse_mark_ref_space: 2990
 3071 ----hashcpy: <>
 3072 ----skip_prefix: <>
 3073 ----get_sha1_hex: 931
 3074 ----die: 29
 3075 ----find_object: struct object_entry (unsigned char *sha1), <fast-import.c 566>
 3076 ----lookup_branch: struct branch (const char *name), <fast-import.c 709>
 3077 ----is_null_sha1: <>
 3078 ----parse_mark_ref_eol: 2628
 3079 ----get_sha1: 1182
 3080 ----read_object_with_reference: 1942
 3081 ----free: <>
 3082 ----strbuf_addstr: <>
 3083 ----read_next_command: 2561
 3084 ----parse_and_store_blob: 2741
 3085 ----typename: 1237
 3086 ----sha1_object_info: 1477
 3087 ----construct_path_with_fanout: 3058
 3088 ----sha1_to_hex: 1194
 3089 ----tree_content_remove: 3001
 3090 ----tree_content_set: 3022
 3091 ---strcmp: <>
 3092 ---file_change_deleteall: void (struct branch b), <fast-import.c 2551>
 3093 ----release_tree_content_recursive: 2908
 3094 ----hashclr: <>
 3095 ----load_tree: 2849
 3096 ---parse_ls: 2843
 3097 ---change_note_fanout: 3054
 3098 ---store_tree: 2884
 3099 ---hashcpy: <>
 3100 ---strbuf_reset: <>
 3101 ---strbuf_addf: 49
 3102 ---sha1_to_hex: 1194
 3103 ---is_null_sha1: <>
 3104 ---free: <>
 3105 ---strbuf_addbuf: <>
 3106 ---store_object: 2763
 3107 --parse_new_tag: void (const char *arg), <fast-import.c 2769>
 3108 ---pool_alloc: 2322
 3109 ---memset: <>
 3110 ---pool_strdup: char * (const char *s), <fast-import.c 641>
 3111 ----pool_alloc: 2322
 3112 ----strlen: <>
 3113 ----strcpy: <>
 3114 ---read_next_command: 2561
 3115 ---skip_prefix: <>
 3116 ---die: 29
 3117 ---lookup_branch: struct branch (const char *name), <fast-import.c 709>
 3118 ---is_null_sha1: <>
 3119 ---hashcpy: <>
 3120 ---parse_mark_ref_eol: 2628
 3121 ---find_mark: struct object_entry (uintmax_t idnum), <fast-import.c 671>
 3122 ---get_sha1: 1182
 3123 ---find_object: struct object_entry (unsigned char *sha1), <fast-import.c 566>
 3124 ---sha1_object_info: 1477
 3125 ---parse_ident: 2935
 3126 ---parse_data: 2742
 3127 ---strbuf_reset: <>
 3128 ---strbuf_addf: 49
 3129 ---sha1_to_hex: 1194
 3130 ---typename: 1237
 3131 ---strbuf_addch: <>
 3132 ---strbuf_addbuf: <>
 3133 ---free: <>
 3134 ---store_object: 2763
 3135 --parse_reset_branch: void (const char *arg), <fast-import.c 2849>
 3136 ---lookup_branch: struct branch (const char *name), <fast-import.c 709>
 3137 ---hashclr: <>
 3138 ---release_tree_content_recursive: 2908
 3139 ---new_branch: struct branch (const char *name), <fast-import.c 720>
 3140 ---read_next_command: 2561
 3141 ---parse_from: 2955
 3142 --parse_checkpoint: void (void), <fast-import.c 3100>
 3143 ---skip_optional_lf: 2760
 3144 --starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 3145 --parse_progress: void (void), <fast-import.c 3106>
 3146 ---fwrite: <>
 3147 ---fputc: <>
 3148 ---fflush: <>
 3149 ---skip_optional_lf: 2760
 3150 --parse_feature: void (const char *feature), <fast-import.c 3265>
 3151 ---die: 29
 3152 ---parse_one_feature: 2586
 3153 --parse_option: void (const char *option), <fast-import.c 3276>
 3154 ---die: 29
 3155 ---parse_one_option: 2569
 3156 --checkpoint: void (void), <fast-import.c 3089>
 3157 ---cycle_packfile: 2798
 3158 ---dump_branches: void (void), <fast-import.c 1732>
 3159 ----update_branch: int (struct branch b), <fast-import.c 1688>
 3160 -----read_ref: int (const char *refname, unsigned char *sha1), <refs.c 1665>
 3161 ------read_ref_full: int (const char *refname, int resolve_flags, unsigned char *sha1, int *flags), <refs.c 1658>
 3162 -------resolve_ref_unsafe: 1341
 3163 -----hashclr: <>
 3164 -----is_null_sha1: <>
 3165 -----delete_ref: int (const char *refname, const unsigned char *sha1, unsigned int flags), <refs.c 2689>
 3166 ------ref_transaction_begin: struct ref_transaction (struct strbuf err), <refs.c 3557>
 3167 ------ref_transaction_delete: int (struct ref_transaction transaction, const char *refname, const unsigned char *old_sha1, unsigned int flags, const char *msg, struct strbuf err), <refs.c 3639>
 3168 -------is_null_sha1: <>
 3169 -------die: 29
 3170 -------ref_transaction_update: int (struct ref_transaction transaction, const char *refname, const unsigned char *new_sha1, const unsigned char *old_sha1, unsigned int flags, const char *msg, struct strbuf err), <refs.c 3591>
 3171 --------assert: <>
 3172 --------die: 29
 3173 --------is_null_sha1: <>
 3174 --------check_refname_format: 1007
 3175 --------strbuf_addf: 49
 3176 --------add_update: struct ref_update (struct ref_transaction transaction, const char *refname), <refs.c 3579>
 3177 --------hashcpy: <>
 3178 --------xstrdup: 73
 3179 ------is_null_sha1: <>
 3180 ------ref_transaction_commit: int (struct ref_transaction transaction, struct strbuf err), <refs.c 3722>
 3181 -------assert: <>
 3182 -------die: 29
 3183 -------qsort: <>
 3184 -------ref_update_compare: int (const void *r1, const void *r2), <refs.c 3698>
 3185 --------strcmp: <>
 3186 -------ref_update_reject_duplicates: int (struct ref_update updates, int n, struct strbuf err), <refs.c 3705>
 3187 --------assert: <>
 3188 --------strcmp: <>
 3189 --------strbuf_addf: 49
 3190 -------cleanup: size_t (char *line, size_t len), <builtin/stripspace.c 9>
 3191 --------isspace: <>
 3192 -------is_null_sha1: <>
 3193 -------lock_ref_sha1_basic: struct ref_lock (const char *refname, const unsigned char *old_sha1, const struct string_list *skip, unsigned int flags, int *type_p), <refs.c 2272>
 3194 -------strbuf_addf: 49
 3195 -------hashcmp: <>
 3196 -------unlock_ref: void (struct ref_lock lock), <refs.c 2128>
 3197 --------rollback_lock_file: 652
 3198 --------free: <>
 3199 -------write_ref_sha1: int (struct ref_lock lock, const unsigned char *sha1, const char *logmsg), <refs.c 3028>
 3200 --------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 3201 --------error: 12
 3202 --------sha1_to_hex: 1194
 3203 --------unlock_ref: 3196
 3204 --------is_branch: int (const char *refname), <refs.c 3019>
 3205 ---------strcmp: <>
 3206 ---------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 3207 --------write_in_full: 240
 3208 --------close_ref: int (struct ref_lock lock), <refs.c 2867>
 3209 ---------close_lock_file: 653
 3210 --------clear_loose_ref_cache: void (struct ref_cache refs), <refs.c 1040>
 3211 ---------free_ref_entry: 1835
 3212 --------log_ref_write: int (const char *refname, const unsigned char *old_sha1, const unsigned char *new_sha1, const char *msg), <refs.c 2985>
 3213 ---------is_bare_repository: int (void), <environment.c 166>
 3214 ----------get_git_work_tree: 1901
 3215 ---------log_ref_setup: int (const char *refname, char *logfile, int bufsize), <refs.c 2910>
 3216 ----------git_snpath: 1353
 3217 ----------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 3218 ----------strcmp: <>
 3219 ----------safe_create_leading_directories: enum scld_error (char *path), <sha1_file.c 112>
 3220 ----------error: 12
 3221 ----------open: <>
 3222 ----------remove_empty_directories: int (const char *file), <refs.c 2161>
 3223 -----------strbuf_init: 65
 3224 -----------strbuf_addstr: <>
 3225 -----------remove_dir_recursively: int (struct strbuf path, int flag), <dir.c 1660>
 3226 ------------remove_dir_recurse: int (struct strbuf path, int flag, int *kept_up), <dir.c 1584>
 3227 -------------resolve_gitlink_ref: int (const char *path, const char *refname, unsigned char *sha1), <refs.c 1418>
 3228 --------------strlen: <>
 3229 --------------xstrndup: 764
 3230 --------------get_ref_cache: struct ref_cache (const char *submodule), <refs.c 1066>
 3231 --------------free: <>
 3232 --------------resolve_gitlink_ref_recursive: int (struct ref_cache refs, const char *refname, unsigned char *sha1, int recursion), <refs.c 1379>
 3233 ---------------strlen: <>
 3234 ---------------git_path_submodule: char * (const char *path, const char *fmt, ...), <path.c 161>
 3235 ----------------get_pathname: 1268
 3236 ----------------strlen: <>
 3237 ----------------strbuf_addstr: <>
 3238 ----------------strbuf_addch: <>
 3239 ----------------read_gitfile: 934
 3240 ----------------strbuf_reset: <>
 3241 ----------------memcpy: <>
 3242 ----------------strbuf_release: 63
 3243 ----------------va_start: <>
 3244 ----------------vsnprintf: <>
 3245 ----------------va_end: <>
 3246 ----------------cleanup_path: 992
 3247 ---------------git_path: 1267
 3248 ---------------open: <>
 3249 ---------------resolve_gitlink_packed_ref: int (struct ref_cache refs, const char *refname, unsigned char *sha1), <refs.c 1365>
 3250 ----------------get_packed_refs: struct ref_dir (struct ref_cache refs), <refs.c 1247>
 3251 ----------------find_ref: struct ref_entry (struct ref_dir dir, const char *refname), <refs.c 531>
 3252 ----------------hashcpy: <>
 3253 ---------------read: <>
 3254 ---------------close: <>
 3255 ---------------isspace: <>
 3256 ---------------get_sha1_hex: 931
 3257 ---------------strncmp: <>
 3258 ---------------resolve_gitlink_ref_recursive: 3232
 3259 -------------opendir: <>
 3260 -------------rmdir: <>
 3261 -------------strbuf_addch: <>
 3262 -------------readdir: <>
 3263 -------------is_dot_or_dotdot: <>
 3264 -------------strbuf_setlen: <>
 3265 -------------strbuf_addstr: <>
 3266 -------------lstat: <>
 3267 -------------S_ISDIR: <>
 3268 -------------remove_dir_recurse: 3226
 3269 -------------unlink: <>
 3270 -------------closedir: <>
 3271 -----------strbuf_release: 63
 3272 ----------strerror: <>
 3273 ----------adjust_shared_perm: 702
 3274 ----------close: <>
 3275 ---------open: <>
 3276 ---------log_ref_write_fd: int (int fd, const unsigned char *old_sha1, const unsigned char *new_sha1, const char *committer, const char *msg), <refs.c 2959>
 3277 ----------strlen: <>
 3278 ----------xmalloc: 172
 3279 ----------sprintf: <>
 3280 ----------sha1_to_hex: 1194
 3281 ----------copy_msg: int (char *buf, const char *msg), <refs.c 2888>
 3282 -----------isspace: <>
 3283 ----------write_in_full: 240
 3284 ----------free: <>
 3285 ---------git_committer_info: const char * (int flag), <ident.c 360>
 3286 ----------getenv: <>
 3287 ----------fmt_ident: const char * (const char *name, const char *email, const char *date_str, int flag), <ident.c 291>
 3288 -----------ident_default_name: const char * (void), <ident.c 105>
 3289 ------------copy_gecos: void (const struct passwd *w, struct strbuf name), <ident.c 26>
 3290 -------------get_gecos: <>
 3291 -------------strbuf_addch: <>
 3292 -------------toupper: <>
 3293 -------------strbuf_addstr: <>
 3294 ------------xgetpwuid_self: struct passwd (void), <wrapper.c 548>
 3295 ------------strbuf_trim: 1118
 3296 -----------ident_default_email: const char * (void), <ident.c 114>
 3297 ------------getenv: <>
 3298 ------------strbuf_addstr: <>
 3299 ------------copy_email: void (const struct passwd *pw, struct strbuf email), <ident.c 91>
 3300 -------------strbuf_addstr: <>
 3301 -------------strbuf_addch: <>
 3302 -------------add_mailname_host: int (struct strbuf buf), <ident.c 46>
 3303 --------------fopen: <>
 3304 --------------warning: 552
 3305 --------------strerror: <>
 3306 --------------strbuf_getline: 564
 3307 --------------ferror: <>
 3308 --------------strbuf_release: 63
 3309 --------------fclose: <>
 3310 --------------strbuf_addbuf: <>
 3311 -------------add_domainname: void (struct strbuf out), <ident.c 73>
 3312 --------------gethostname: <>
 3313 --------------warning: 552
 3314 --------------strerror: <>
 3315 --------------strbuf_addstr: <>
 3316 --------------strchr: <>
 3317 --------------gethostbyname: <>
 3318 --------------strbuf_addf: 49
 3319 ------------xgetpwuid_self: struct passwd (void), <wrapper.c 548>
 3320 ------------strbuf_trim: 1118
 3321 -----------fputs: <>
 3322 -----------die: 29
 3323 -----------xgetpwuid_self: struct passwd (void), <wrapper.c 548>
 3324 -----------strstr: <>
 3325 -----------strbuf_reset: <>
 3326 -----------strbuf_addstr_without_crud: void (struct strbuf sb, const char *src), <ident.c 155>
 3327 ------------crud: int (unsigned char c), <ident.c 137>
 3328 ------------strlen: <>
 3329 ------------strbuf_grow: 53
 3330 -----------strbuf_addstr: <>
 3331 -----------strbuf_addch: <>
 3332 -----------parse_date: 2942
 3333 -----------ident_default_date: const char * (void), <ident.c 130>
 3334 ------------datestamp: 2947
 3335 ---------close: <>
 3336 ---------error: 12
 3337 --------strcmp: <>
 3338 --------head_ref: int (each_ref_fn fn, void *cb_data), <refs.c 1963>
 3339 ---------do_head_ref: int (const char *submodule, each_ref_fn fn, void *cb_data), <refs.c 1945>
 3340 ----------resolve_gitlink_ref: 3227
 3341 ----------read_ref_full: 3161
 3342 --------resolve_ref_unsafe: 1341
 3343 --------commit_ref: int (struct ref_lock lock), <refs.c 2875>
 3344 ---------commit_lock_file: 723
 3345 -------delete_ref_loose: int (struct ref_lock lock, int flag, struct strbuf err), <refs.c 2671>
 3346 --------assert: <>
 3347 --------get_locked_file_path: char * (struct lock_file lk), <lockfile.c 239>
 3348 ---------die: 29
 3349 ---------xmemdupz: 120
 3350 --------unlink_or_msg: int (const char *file, struct strbuf err), <wrapper.c 492>
 3351 ---------unlink: <>
 3352 ---------assert: <>
 3353 ---------strbuf_addf: 49
 3354 ---------strerror: <>
 3355 --------free: <>
 3356 -------string_list_append: 768
 3357 -------repack_without_refs: int (struct string_list refnames, struct strbuf err), <refs.c 2624>
 3358 --------assert: <>
 3359 --------for_each_string_list_item: <>
 3360 --------get_packed_ref: struct ref_entry (const char *refname), <refs.c 1440>
 3361 --------lock_packed_refs: int (int flags), <refs.c 2414>
 3362 ---------hold_lock_file_for_update: 645
 3363 ---------git_path: 1267
 3364 ---------get_packed_ref_cache: struct packed_ref_cache (struct ref_cache refs), <refs.c 1213>
 3365 ---------acquire_packed_ref_cache: void (struct packed_ref_cache packed_refs), <refs.c 1007>
 3366 --------unable_to_lock_message: 711
 3367 --------git_path: 1267
 3368 --------get_packed_refs: struct ref_dir (struct ref_cache refs), <refs.c 1247>
 3369 --------remove_entry: int (struct ref_dir dir, const char *refname), <refs.c 559>
 3370 ---------strlen: <>
 3371 ---------xmemdupz: 120
 3372 ---------find_containing_dir: struct ref_dir (struct ref_dir dir, const char *refname, int mkdir), <refs.c 508>
 3373 ---------free: <>
 3374 ---------search_ref_dir: int (struct ref_dir dir, const char *refname, size_t len), <refs.c 449>
 3375 ----------sort_ref_dir: 1826
 3376 ----------bsearch: <>
 3377 ----------ref_entry_cmp_sslice: int (const void *key_, const void *ent_), <refs.c 434>
 3378 -----------strncmp: <>
 3379 ---------memmove: <>
 3380 ---------free_ref_entry: 1835
 3381 --------rollback_packed_refs: void (void), <refs.c 2466>
 3382 ---------get_packed_ref_cache: struct packed_ref_cache (struct ref_cache refs), <refs.c 1213>
 3383 ---------die: 29
 3384 ---------rollback_lock_file: 652
 3385 ---------release_packed_ref_cache: 1853
 3386 ---------clear_packed_ref_cache: void (struct ref_cache refs), <refs.c 1028>
 3387 ----------die: 29
 3388 ----------release_packed_ref_cache: 1853
 3389 --------commit_packed_refs: int (void), <refs.c 2437>
 3390 ---------get_packed_ref_cache: struct packed_ref_cache (struct ref_cache refs), <refs.c 1213>
 3391 ---------die: 29
 3392 ---------fdopen_lock_file: 2547
 3393 ---------die_errno: 203
 3394 ---------fprintf_or_die: void (FILE *f, const char *fmt, ...), <write_or_die.c 52>
 3395 ----------va_start: <>
 3396 ----------vfprintf: <>
 3397 ----------va_end: <>
 3398 ----------check_pipe: 249
 3399 ----------die_errno: 203
 3400 ---------do_for_each_entry_in_dir: 1842
 3401 ---------get_packed_ref_dir: struct ref_dir (struct packed_ref_cache packed_ref_cache), <refs.c 1242>
 3402 ---------write_packed_entry_fn: int (struct ref_entry entry, void *cb_data), <refs.c 2400>
 3403 ----------peel_entry: enum peel_status (struct ref_entry entry, int repeel), <refs.c 1749>
 3404 ----------error: 12
 3405 ----------write_packed_entry: void (FILE *fh, char *refname, unsigned char *sha1, unsigned char *peeled), <refs.c 2389>
 3406 -----------fprintf_or_die: 3394
 3407 -----------sha1_to_hex: 1194
 3408 ---------commit_lock_file: 723
 3409 ---------release_packed_ref_cache: 1853
 3410 --------strbuf_addf: 49
 3411 --------strerror: <>
 3412 -------for_each_string_list_item: <>
 3413 -------unlink_or_warn: 658
 3414 -------git_path: 1267
 3415 -------clear_loose_ref_cache: 3210
 3416 -------string_list_clear: 544
 3417 ------error: 12
 3418 ------ref_transaction_free: void (struct ref_transaction transaction), <refs.c 3564>
 3419 -------free: <>
 3420 ------strbuf_release: 63
 3421 -----lookup_commit_reference_gently: struct commit (const unsigned char *sha1, int quiet), <commit.c 21>
 3422 -----error: 12
 3423 -----in_merge_bases: int (struct commit commit, struct commit reference), <commit.c 1043>
 3424 ------in_merge_bases_many: int (struct commit commit, int nr_reference, struct commit reference), <commit.c 1020>
 3425 -------parse_commit: 1191
 3426 -------paint_down_to_common: struct commit_list (struct commit one, int n, struct commit twos), <commit.c 773>
 3427 -------clear_commit_marks: 1248
 3428 -------clear_commit_marks_many: 1249
 3429 -------free_commit_list: 1246
 3430 -----warning: 552
 3431 -----sha1_to_hex: 1194
 3432 -----ref_transaction_begin: struct ref_transaction (struct strbuf err), <refs.c 3557>
 3433 -----ref_transaction_update: 3170
 3434 -----ref_transaction_commit: 3180
 3435 -----ref_transaction_free: 3418
 3436 -----strbuf_release: 63
 3437 ---dump_tags: void (void), <fast-import.c 1743>
 3438 ----ref_transaction_begin: struct ref_transaction (struct strbuf err), <refs.c 3557>
 3439 ----error: 12
 3440 ----cleanup: void (struct walker walker), <http-walker.c 538>
 3441 -----free: <>
 3442 ----strbuf_reset: <>
 3443 ----strbuf_addf: 49
 3444 ----ref_transaction_update: 3170
 3445 ----ref_transaction_commit: 3180
 3446 ----ref_transaction_free: 3418
 3447 ----strbuf_release: 63
 3448 ---dump_marks: 2543
 3449 --parse_argv: 2565
 3450 --feof: <>
 3451 --end_packfile: 2431
 3452 --dump_branches: 3158
 3453 --dump_tags: 3437
 3454 --unkeep_all_packs: 2538
 3455 --dump_marks: 2543
 3456 --fclose: <>
 3457 --ARRAY_SIZE: <>
 3458 --fprintf: <>
 3459 --pack_report: void (void), <sha1_file.c 505>
 3460 ---fprintf: <>
 3461 ---sz_fmt: inline uintmax_t (size_t s), <sha1_file.c 36>
 3462 ---getpagesize: <>
 3463 --restore_sigpipe_to_default: void (void), <git.c 609>
 3464 ---sigemptyset: <>
 3465 ---sigaddset: <>
 3466 ---sigprocmask: <>
 3467 ---signal: <>
 3468 --trace_command_performance: void (const char **argv), <trace.c 416>
 3469 ---trace_want: 275
 3470 ---atexit: <>
 3471 ---print_command_performance_atexit: void (void), <trace.c 410>
 3472 ----trace_performance_since: void (uint64_t start, const char *format, ...), <trace.c 230>
 3473 -----va_start: <>
 3474 -----trace_performance_vprintf_fl: void (const char *file, int line, uint64_t nanos, const char *format, va_list ap), <trace.c 172>
 3475 ------prepare_trace_line: 273
 3476 ------strbuf_addf: 49
 3477 ------strbuf_addstr: <>
 3478 ------strbuf_vaddf: 51
 3479 ------print_trace_line: 309
 3480 -----getnanotime: 2360
 3481 -----va_end: <>
 3482 ---strbuf_reset: <>
 3483 ---sq_quote_argv: 297
 3484 ---getnanotime: 2360
 3485 --handle_builtin: void (int argc, const char **argv), <git.c 505>
 3486 ---strlen: <>
 3487 ---strcmp: <>
 3488 ---xstrdup: 73
 3489 ---get_builtin: struct cmd_struct (const char *s), <git.c 489>
 3490 ---restore_env: void (void), <git.c 44>
 3491 ----chdir: <>
 3492 ----die_errno: 203
 3493 ----free: <>
 3494 ----ARRAY_SIZE: <>
 3495 ----setenv: <>
 3496 ----unsetenv: <>
 3497 ---exit: <>
 3498 ---run_builtin: int (struct cmd_struct p, int argc, const char **argv), <git.c 318>
 3499 ----strcmp: <>
 3500 ----setup_git_directory: 2135
 3501 ----setup_git_directory_gently: 2136
 3502 ----check_pager_config: int (const char *cmd), <pager.c 146>
 3503 -----strbuf_addf: 49
 3504 -----git_config_get_value: int (const char *key, const char **value), <config.c 1529>
 3505 ------git_config_check_init: 1148
 3506 ------git_configset_get_value: 2014
 3507 -----git_config_maybe_bool: int (const char *name, const char *value), <config.c 638>
 3508 ------git_config_maybe_bool_text: 603
 3509 ------git_parse_int: int (const char *value, int *ret), <config.c 555>
 3510 -------git_parse_signed: int (const char *value, intmax_t *ret, intmax_t max), <config.c 498>
 3511 --------strtoimax: <>
 3512 --------parse_unit_factor: 134
 3513 --------labs: <>
 3514 -------maximum_signed_value_of_type: <>
 3515 -----xstrdup: 73
 3516 -----strbuf_release: 63
 3517 ----trace_repo_setup: void (const char *prefix), <trace.c 295>
 3518 -----TRACE_KEY_INIT: <>
 3519 -----trace_want: 275
 3520 -----xgetcwd: 674
 3521 -----get_git_work_tree: 1901
 3522 -----trace_printf_key: 2646
 3523 -----quote_crnl: const char * (const char *path), <trace.c 271>
 3524 -----get_git_dir: 986
 3525 -----free: <>
 3526 ----commit_pager_choice: void (void), <git.c 58>
 3527 -----setenv: <>
 3528 -----setup_pager: void (void), <pager.c 57>
 3529 ------pager: const char * (int flag), <builtin/var.c 20>
 3530 -------git_pager: const char * (int stdout_is_tty), <pager.c 34>
 3531 --------pager: 3529
 3532 --------getenv: <>
 3533 --------git_config: 2254
 3534 --------git_default_config: 2259
 3535 --------strcmp: <>
 3536 ------git_pager: 3530
 3537 ------isatty: <>
 3538 ------term_columns: int (void), <pager.c 107>
 3539 -------getenv: <>
 3540 -------atoi: <>
 3541 -------ioctl: <>
 3542 ------setenv: <>
 3543 ------getenv: <>
 3544 ------argv_array_push: 1108
 3545 ------start_command: 255
 3546 ------dup2: <>
 3547 ------close: <>
 3548 ------sigchain_push_common: 398
 3549 ------wait_for_pager_signal: void (int signo), <pager.c 27>
 3550 -------wait_for_pager: void (void), <pager.c 17>
 3551 --------fflush: <>
 3552 --------close: <>
 3553 --------finish_command: 2027
 3554 -------sigchain_pop: 406
 3555 -------raise: <>
 3556 ------atexit: <>
 3557 ------wait_for_pager: 3550
 3558 ----setup_work_tree: void (void), <setup.c 282>
 3559 -----get_git_work_tree: 1901
 3560 -----get_git_dir: 986
 3561 -----is_absolute_path: <>
 3562 -----real_path: 949
 3563 -----chdir: <>
 3564 -----die: 29
 3565 -----getenv: <>
 3566 -----setenv: <>
 3567 -----set_git_dir: 973
 3568 -----remove_leading_path: const char * (const char *in, const char *prefix), <path.c 555>
 3569 ------is_dir_sep: <>
 3570 ------strcpy: <>
 3571 ----trace_argv_printf: 270
 3572 ----fstat: <>
 3573 ----fileno: <>
 3574 ----S_ISFIFO: <>
 3575 ----S_ISSOCK: <>
 3576 ----fflush: <>
 3577 ----die_errno: 203
 3578 ----ferror: <>
 3579 ----die: 29
 3580 ----fclose: <>
 3581 --handle_options: int (const char ***argv, int *argc, int *envchanged), <git.c 71>
 3582 ---strcmp: <>
 3583 ---skip_prefix: <>
 3584 ---git_set_argv_exec_path: void (const char *exec_path), <exec_cmd.c 59>
 3585 ----setenv: <>
 3586 ---puts: <>
 3587 ---git_exec_path: const char * (void), <exec_cmd.c 70>
 3588 ----getenv: <>
 3589 ----system_path: 1042
 3590 ---exit: <>
 3591 ---system_path: 1042
 3592 ---setenv: <>
 3593 ---fprintf: <>
 3594 ---usage: 623
 3595 ---xgetcwd: 674
 3596 ---free: <>
 3597 ---git_config_push_parameter: void (const char *text), <config.c 159>
 3598 ----getenv: <>
 3599 ----strbuf_addstr: <>
 3600 ----strbuf_addch: <>
 3601 ----sq_quote_buf: 300
 3602 ----setenv: <>
 3603 ----strbuf_release: 63
 3604 ---set_alternate_shallow_file: 1015
 3605 ---chdir: <>
 3606 ---die_errno: 203
 3607 --commit_pager_choice: 3526
 3608 --list_common_cmds_help: void (void), <help.c 221>
 3609 ---ARRAY_SIZE: <>
 3610 ---strlen: <>
 3611 ---puts: <>
 3612 ---printf: <>
 3613 ---mput_char: <>
 3614 --exit: <>
 3615 --setup_path: void (void), <exec_cmd.c 93>
 3616 ---getenv: <>
 3617 ---add_path: void (struct strbuf out, const char *path), <exec_cmd.c 85>
 3618 ----strbuf_add_absolute_path: 671
 3619 ----strbuf_addch: <>
 3620 ---git_exec_path: 3587
 3621 ---strbuf_addstr: <>
 3622 ---setenv: <>
 3623 ---strbuf_release: 63
 3624 --run_argv: int (int *argcp, const char ***argv), <git.c 572>
 3625 ---handle_builtin: 3485
 3626 ---execv_dashed_external: void (const char **argv), <git.c 536>
 3627 ----check_pager_config: 3502
 3628 ----commit_pager_choice: 3526
 3629 ----strbuf_addf: 49
 3630 ----trace_argv_printf: 270
 3631 ----run_command_v_opt: int (const char **argv, int opt), <run-command.c 571>
 3632 -----run_command_v_opt_cd_env: int (const char **argv, int opt, const char *dir, const char *const *env), <run-command.c 576>
 3633 ------run_command: int (struct child_process cmd), <run-command.c 558>
 3634 -------die: 29
 3635 -------start_command: 255
 3636 -------finish_command: 2027
 3637 ----exit: <>
 3638 ----strbuf_release: 63
 3639 ---save_env: void (void), <git.c 30>
 3640 ----xgetcwd: 674
 3641 ----ARRAY_SIZE: <>
 3642 ----getenv: <>
 3643 ----xstrdup: 73
 3644 ---handle_alias: int (int *argcp, const char ***argv), <git.c 226>
 3645 ----setup_git_directory_gently: 2136
 3646 ----alias_lookup: char * (const char *alias), <alias.c 3>
 3647 -----strbuf_addf: 49
 3648 -----git_config_get_string: int (const char *key, char **dest), <config.c 1551>
 3649 ------git_config_check_init: 1148
 3650 ------git_config_get_string_const: int (const char *key, const char **dest), <config.c 1541>
 3651 -------git_config_check_init: 1148
 3652 -------git_configset_get_string_const: int (struct config_set cs, const char *key, const char **dest), <config.c 1438>
 3653 --------git_configset_get_value: 2014
 3654 --------git_config_string: 2275
 3655 -------git_die_config: <>
 3656 -----strbuf_release: 63
 3657 ----commit_pager_choice: 3526
 3658 ----xmalloc: 172
 3659 ----run_command_v_opt: 3631
 3660 ----exit: <>
 3661 ----die_errno: 203
 3662 ----split_cmdline: int (char *cmdline, const char ***argv), <alias.c 20>
 3663 -----xmalloc: 172
 3664 -----isspace: <>
 3665 -----ALLOC_GROW: <>
 3666 -----free: <>
 3667 ----die: 29
 3668 ----split_cmdline_strerror: const char * (int split_cmdline_errno), <alias.c 73>
 3669 ----handle_options: 3581
 3670 ----memmove: <>
 3671 ----strcmp: <>
 3672 ----trace_argv_printf: 270
 3673 ----REALLOC_ARRAY: <>
 3674 ----memcpy: <>
 3675 ----chdir: <>
 3676 --help_unknown_cmd: const char * (const char *cmd), <help.c 292>
 3677 ---memset: <>
 3678 ---git_config: 2254
 3679 ---git_unknown_cmd_config: int (const char *var, const char *value, void *cb), <help.c 250>
 3680 ----strcmp: <>
 3681 ----git_config_int: int (const char *name, const char *value), <config.c 597>
 3682 ----skip_prefix: <>
 3683 ----add_cmdname: void (struct cmdnames cmds, const char *name, int len), <help.c 12>
 3684 -----xmalloc: 172
 3685 -----memcpy: <>
 3686 -----ALLOC_GROW: <>
 3687 ----strlen: <>
 3688 ----git_default_config: 2259
 3689 ---load_command_list: void (const char *prefix, struct cmdnames main_cmds, struct cmdnames other_cmds), <help.c 166>
 3690 ----getenv: <>
 3691 ----git_exec_path: 3587
 3692 ----list_commands_in_dir: void (struct cmdnames cmds, const char *path, const char *prefix), <help.c 128>
 3693 -----opendir: <>
 3694 -----strbuf_addf: 49
 3695 -----readdir: <>
 3696 -----skip_prefix: <>
 3697 -----strbuf_setlen: <>
 3698 -----strbuf_addstr: <>
 3699 -----is_executable: int (const char *name), <help.c 101>
 3700 ------stat: <>
 3701 ------S_ISREG: <>
 3702 ------open: <>
 3703 ------read: <>
 3704 ------strcmp: <>
 3705 ------close: <>
 3706 -----strlen: <>
 3707 -----strip_suffix: <>
 3708 -----add_cmdname: 3683
 3709 -----closedir: <>
 3710 -----strbuf_release: 63
 3711 ----qsort: <>
 3712 ----cmdname_compare: int (const void *a_, const void *b_), <help.c 34>
 3713 -----strcmp: <>
 3714 ----uniq: void (struct cmdnames cmds), <help.c 41>
 3715 -----strcmp: <>
 3716 -----free: <>
 3717 ----xstrdup: 73
 3718 ----strchr: <>
 3719 ----strcmp: <>
 3720 ----free: <>
 3721 ----exclude_cmds: void (struct cmdnames cmds, struct cmdnames excludes), <help.c 58>
 3722 -----strcmp: <>
 3723 -----free: <>
 3724 ---add_cmd_list: void (struct cmdnames cmds, struct cmdnames old), <help.c 272>
 3725 ----ALLOC_GROW: <>
 3726 ----free: <>
 3727 ---qsort: <>
 3728 ---cmdname_compare: 3712
 3729 ---uniq: 3714
 3730 ---strcmp: <>
 3731 ---die: 29
 3732 ---ARRAY_SIZE: <>
 3733 ---starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 3734 ---levenshtein: int (const char *string1, const char *string2, int w, int s, int a, int d), <levenshtein.c 41>
 3735 ----strlen: <>
 3736 ----xmalloc: 172
 3737 ----free: <>
 3738 ---levenshtein_compare: int (const void *p1, const void *p2), <help.c 263>
 3739 ----strcmp: <>
 3740 ---SIMILAR_ENOUGH: <>
 3741 ---clean_cmdnames: void (struct cmdnames cmds), <help.c 24>
 3742 ----free: <>
 3743 ---fprintf_ln: 92
 3744 ---poll: <>
 3745 ---Q_: <>
 3746 ---fprintf: <>
 3747 ---exit: <>
 3748 --getenv: <>
 3749 --die_webcgi: NORETURN void (const char *err, va_list params), <http-backend.c 503>
 3750 ---http_status: void (unsigned code, const char *msg), <http-backend.c 76>
 3751 ---hdr_nocache: void (void), <http-backend.c 97>
 3752 ----hdr_str: void (const char *name, const char *value), <http-backend.c 81>
 3753 -----format_write: <>
 3754 ---end_headers: void (void), <http-backend.c 112>
 3755 ----write_or_die: 247
 3756 ---vreportf: void (const char *prefix, const char *err, va_list params), <usage.c 9>
 3757 ----vsnprintf: <>
 3758 ----fprintf: <>
 3759 ---exit: <>
 3760 --getdir: char * (void), <http-backend.c 518>
 3761 ---getenv: <>
 3762 ---die: 29
 3763 ---daemon_avoid_alias: int (const char *p), <path.c 775>
 3764 ---end_url_with_slash: void (struct strbuf buf, const char *url), <url.c 120>
 3765 ----strbuf_addstr: <>
 3766 ----strbuf_addch: <>
 3767 ---strbuf_addstr: <>
 3768 ---strbuf_detach: 190
 3769 ---xstrdup: 73
 3770 --regcomp: <>
 3771 --regexec: <>
 3772 --http_status: void (unsigned code, const char *msg), <http-backend.c 76>
 3773 --hdr_str: 3752
 3774 --hdr_nocache: 3751
 3775 --end_headers: 3754
 3776 --xmemdupz: 120
 3777 --regfree: <>
 3778 --not_found: <>
 3779 --enter_repo: 907
 3780 --access: <>
 3781 --http_config: void (void), <http-backend.c 222>
 3782 ---git_config_get_bool: 1147
 3783 ---ARRAY_SIZE: <>
 3784 ---strbuf_addf: 49
 3785 ---strbuf_reset: <>
 3786 ---strbuf_release: 63
 3787 --walker_targets_stdin: int (char ***target, const char ***write_ref), <walker.c 213>
 3788 ---strbuf_getline: 564
 3789 ---strchr: <>
 3790 ---REALLOC_ARRAY: <>
 3791 ---xstrdup: 73
 3792 ---xstrdup_or_null: <>
 3793 ---strbuf_release: 63
 3794 --warning: 552
 3795 --str_end_url_with_slash: void (const char *url, char **dest), <url.c 127>
 3796 ---end_url_with_slash: 3764
 3797 ---free: <>
 3798 ---strbuf_detach: 190
 3799 --git_config: 2254
 3800 --git_default_config: 2259
 3801 --http_init: void (struct remote remote, const char *url, int proactive_auth), <http.c 426>
 3802 ---http_options: int (const char *var, const char *value, void *cb), <http.c 184>
 3803 ----strcmp: <>
 3804 ----git_config_bool: 601
 3805 ----git_config_string: 2275
 3806 ----git_config_int: int (const char *name, const char *value), <config.c 597>
 3807 ----git_default_config: 2259
 3808 ---git_default_config: 2259
 3809 ---url_normalize: char * (const char *url, struct url_info out_info), <urlmatch.c 66>
 3810 ----strlen: <>
 3811 ----strspn: <>
 3812 ----isalpha: <>
 3813 ----strbuf_init: 65
 3814 ----strbuf_addch: <>
 3815 ----tolower: <>
 3816 ----strchr: <>
 3817 ----strcspn: <>
 3818 ----append_normalized_escapes: int (struct strbuf buf, const char *from, size_t from_len, const char *esc_extra, const char *esc_ok), <urlmatch.c 14>
 3819 -----isxdigit: <>
 3820 -----hexval: <>
 3821 -----strchr: <>
 3822 -----strbuf_addf: 49
 3823 -----strbuf_addch: <>
 3824 ----strbuf_release: 63
 3825 ----strncmp: <>
 3826 ----strtoul: <>
 3827 ----strbuf_add: 81
 3828 ----strcmp: <>
 3829 ----strbuf_setlen: <>
 3830 ----strbuf_detach: 190
 3831 ---git_config: 2254
 3832 ---urlmatch_config_entry: int (const char *var, const char *value, void *cb), <urlmatch.c 474>
 3833 ----skip_prefix: <>
 3834 ----strrchr: <>
 3835 ----xmemdupz: 120
 3836 ----url_normalize: 3809
 3837 ----free: <>
 3838 ----match_urls: int (const struct url_info *url, const struct url_info *url_prefix, int *exactusermatch), <urlmatch.c 415>
 3839 -----strncmp: <>
 3840 -----url_match_prefix: size_t (const char *url, const char *url_prefix, size_t url_prefix_len), <urlmatch.c 383>
 3841 ------strncmp: <>
 3842 ------strlen: <>
 3843 ----strcmp: <>
 3844 ----string_list_insert: struct string_list_item (struct string_list list, const char *string), <string-list.c 60>
 3845 ----xcalloc: 1153
 3846 ----strbuf_addstr: <>
 3847 ----strbuf_addch: <>
 3848 ----strbuf_release: 63
 3849 ---free: <>
 3850 ---curl_global_init: <>
 3851 ---die: 29
 3852 ---xstrdup: 73
 3853 ---curl_slist_append: <>
 3854 ---getenv: <>
 3855 ---atoi: <>
 3856 ---curl_multi_init: <>
 3857 ---set_from_env: void (const char **var, const char *envname), <http.c 419>
 3858 ----getenv: <>
 3859 ---strtol: <>
 3860 ---credential_from_url: 583
 3861 ---starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 3862 ---get_curl_handle: CURL * (void), <http.c 337>
 3863 ----result: void * (struct merge_list entry, unsigned long *size), <builtin/merge-tree.c 56>
 3864 -----read_sha1_file: <>
 3865 -----merge_blobs: void * (const char *path, struct blob base, struct blob our, struct blob their, unsigned long *size), <merge-blobs.c 85>
 3866 ------read_sha1_file: <>
 3867 ------fill_mmfile_blob: int (mmfile_t *f, struct blob obj), <merge-blobs.c 8>
 3868 -------read_sha1_file: <>
 3869 -------free: <>
 3870 ------generate_common_file: int (mmfile_t *res, mmfile_t *f1, mmfile_t *f2), <merge-blobs.c 63>
 3871 -------xmalloc: 172
 3872 -------memset: <>
 3873 -------common_outf: int (void *priv_, mmbuffer_t *mb, int nbuf), <merge-blobs.c 51>
 3874 --------memcpy: <>
 3875 -------xdi_diff: int (mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp, xdemitconf_t const *xecfg, xdemitcb_t *xecb), <xdiff-interface.c 129>
 3876 --------trim_common_tail: void (mmfile_t *a, mmfile_t *b, long ctx), <xdiff-interface.c 105>
 3877 ---------memcmp: <>
 3878 --------xdl_diff: int (mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp, xdemitconf_t const *xecfg, xdemitcb_t *ecb), <xdiff/xdiffi.c 580>
 3879 ---------ef: <>
 3880 ---------xdl_call_hunk_func: int (xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb, xdemitconf_t const *xecfg), <xdiff/xdiffi.c 542>
 3881 ----------xdl_get_hunk: xdchange_t * (xdchange_t **xscr, xdemitconf_t const *xecfg), <xdiff/xemit.c 61>
 3882 ---------xdl_emit_diff: int (xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb, xdemitconf_t const *xecfg), <xdiff/xemit.c 166>
 3883 ----------xdl_emit_common: int (xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb, xdemitconf_t const *xecfg), <xdiff/xemit.c 123>
 3884 -----------xdl_emit_record: int (xdfile_t *xdf, long ri, char const *pre, xdemitcb_t *ecb), <xdiff/xemit.c 42>
 3885 ------------strlen: <>
 3886 ------------xdl_get_rec: long (xdfile_t *xdf, long ri, char const **rec), <xdiff/xemit.c 34>
 3887 ------------xdl_emit_diffrec: int (char const *rec, long size, char const *pre, long psize, xdemitcb_t *ecb), <xdiff/xutils.c 43>
 3888 -------------strlen: <>
 3889 ----------xdl_get_hunk: 3881
 3890 ----------XDL_MAX: <>
 3891 ----------get_func_line: long (xdfenv_t *xe, xdemitconf_t const *xecfg, struct func_line func_line, long start, long limit), <xdiff/xemit.c 143>
 3892 -----------ff: <>
 3893 -----------def_ff: long (const char *rec, long len, char *buf, long sz, void *priv), <xdiff/xemit.c 107>
 3894 ------------isalpha: <>
 3895 ------------isspace: <>
 3896 ------------memcpy: <>
 3897 -----------xdl_get_rec: 3886
 3898 ----------XDL_MIN: <>
 3899 ----------xdl_emit_hunk_hdr: int (long s1, long c1, long s2, long c2, const char *func, long funclen, xdemitcb_t *ecb), <xdiff/xutils.c 417>
 3900 -----------memcpy: <>
 3901 -----------xdl_num_out: int (char *out, long val), <xdiff/xutils.c 395>
 3902 ----------xdl_emit_record: 3884
 3903 ---------xdl_do_diff: int (mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp, xdfenv_t *xe), <xdiff/xdiffi.c 324>
 3904 ----------XDF_DIFF_ALG: <>
 3905 ----------xdl_do_patience_diff: int (mmfile_t *file1, mmfile_t *file2, xpparam_t const *xpp, xdfenv_t *env), <xdiff/xpatience.c 349>
 3906 -----------xdl_prepare_env: int (mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp, xdfenv_t *xe), <xdiff/xprepare.c 262>
 3907 ------------memset: <>
 3908 ------------XDF_DIFF_ALG: <>
 3909 ------------xdl_guess_lines: long (mmfile_t *mf, long sample), <xdiff/xutils.c 125>
 3910 -------------xdl_mmfile_first: void * (mmfile_t *mmf, long *size), <xdiff/xutils.c 65>
 3911 -------------memchr: <>
 3912 -------------xdl_mmfile_size: long (mmfile_t *mmf), <xdiff/xutils.c 72>
 3913 ------------xdl_init_classifier: int (xdlclassifier_t *cf, long size, long flags), <xdiff/xprepare.c 71>
 3914 -------------xdl_hashbits: unsigned int (unsigned int size), <xdiff/xutils.c 387>
 3915 -------------xdl_cha_init: int (chastore_t *cha, long isize, long icount), <xdiff/xutils.c 78>
 3916 -------------xdl_malloc: <>
 3917 -------------xdl_cha_free: void (chastore_t *cha), <xdiff/xutils.c 90>
 3918 --------------xdl_free: <>
 3919 -------------memset: <>
 3920 -------------xdl_free: <>
 3921 ------------xdl_prepare_ctx: int (unsigned int pass, mmfile_t *mf, long narec, xpparam_t const *xpp, xdlclassifier_t *cf, xdfile_t *xdf), <xdiff/xprepare.c 160>
 3922 -------------xdl_cha_init: 3915
 3923 -------------abort: <>
 3924 -------------xdl_malloc: <>
 3925 -------------XDF_DIFF_ALG: <>
 3926 -------------xdl_hashbits: 3914
 3927 -------------memset: <>
 3928 -------------xdl_mmfile_first: void * (mmfile_t *mmf, long *size), <xdiff/xutils.c 65>
 3929 -------------xdl_hash_record: unsigned long (char const **data, char const *top, long flags), <xdiff/xutils.c 369>
 3930 --------------xdl_hash_record_with_whitespace: unsigned long (char const **data, char const *top, long flags), <xdiff/xutils.c 227>
 3931 ---------------XDL_ISSPACE: <>
 3932 --------------has_zero: inline unsigned long (unsigned long a), <xdiff/xutils.c 274>
 3933 --------------count_masked_bytes: inline long (unsigned long mask), <xdiff/xutils.c 279>
 3934 ---------------REPEAT_BYTE: <>
 3935 --------------assert: <>
 3936 -------------xdl_realloc: <>
 3937 -------------xdl_cha_alloc: void * (chastore_t *cha), <xdiff/xutils.c 100>
 3938 --------------xdl_malloc: <>
 3939 -------------xdl_classify_record: int (unsigned int pass, xdlclassifier_t *cf, xrecord_t **rhash, unsigned int hbits, xrecord_t *rec), <xdiff/xprepare.c 110>
 3940 --------------XDL_HASHLONG: <>
 3941 --------------xdl_recmatch: 1297
 3942 --------------xdl_cha_alloc: 3937
 3943 --------------xdl_realloc: <>
 3944 -------------xdl_free: <>
 3945 -------------xdl_cha_free: 3917
 3946 ------------xdl_free_classifier: void (xdlclassifier_t *cf), <xdiff/xprepare.c 102>
 3947 -------------xdl_free: <>
 3948 -------------xdl_cha_free: 3917
 3949 ------------xdl_free_ctx: void (xdfile_t *xdf), <xdiff/xprepare.c 251>
 3950 -------------xdl_free: <>
 3951 -------------xdl_cha_free: 3917
 3952 ------------xdl_optimize_ctxs: int (xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2), <xdiff/xprepare.c 473>
 3953 -------------xdl_trim_ends: int (xdfile_t *xdf1, xdfile_t *xdf2), <xdiff/xprepare.c 447>
 3954 --------------XDL_MIN: <>
 3955 -------------xdl_cleanup_records: int (xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2), <xdiff/xprepare.c 384>
 3956 --------------xdl_malloc: <>
 3957 --------------memset: <>
 3958 --------------xdl_bogosqrt: long (long n), <xdiff/xutils.c 30>
 3959 --------------xdl_clean_mmatch: int (char const *dis, long i, long s, long e), <xdiff/xprepare.c 321>
 3960 --------------xdl_free: <>
 3961 -----------patience_diff: int (mmfile_t *file1, mmfile_t *file2, xpparam_t const *xpp, xdfenv_t *env, int line1, int count1, int line2, int count2), <xdiff/xpatience.c 303>
 3962 ------------memset: <>
 3963 ------------fill_hashmap: int (mmfile_t *file1, mmfile_t *file2, xpparam_t const *xpp, xdfenv_t *env, struct hashmap result, int line1, int count1, int line2, int count2), <xdiff/xpatience.c 130>
 3964 -------------xdl_malloc: <>
 3965 -------------memset: <>
 3966 -------------insert_record: void (int line, struct hashmap map, int pass), <xdiff/xpatience.c 74>
 3967 --------------xdl_recmatch: 1297
 3968 ------------xdl_free: <>
 3969 ------------find_longest_common_sequence: struct entry (struct hashmap map), <xdiff/xpatience.c 189>
 3970 ------------walk_common_sequence: int (struct hashmap map, struct entry first, int line1, int count1, int line2, int count2), <xdiff/xpatience.c 234>
 3971 -------------match: 1296
 3972 -------------memset: <>
 3973 -------------patience_diff: 3961
 3974 ------------fall_back_to_classic_diff: int (struct hashmap map, int line1, int count1, int line2, int count2), <xdiff/xpatience.c 287>
 3975 -------------xdl_fall_back_diff: int (xdfenv_t *diff_env, xpparam_t const *xpp, int line1, int count1, int line2, int count2), <xdiff/xutils.c 466>
 3976 --------------xdl_do_diff: 3903
 3977 --------------memcpy: <>
 3978 --------------xdl_free_env: void (xdfenv_t *xe), <xdiff/xprepare.c 314>
 3979 ---------------xdl_free_ctx: 3949
 3980 ----------xdl_do_histogram_diff: int (mmfile_t *file1, mmfile_t *file2, xpparam_t const *xpp, xdfenv_t *env), <xdiff/xhistogram.c 354>
 3981 -----------xdl_prepare_env: 3906
 3982 -----------histogram_diff: int (xpparam_t const *xpp, xdfenv_t *env, int line1, int count1, int line2, int count2), <xdiff/xhistogram.c 261>
 3983 ------------LINE_END: <>
 3984 ------------memset: <>
 3985 ------------xdl_hashbits: 3914
 3986 ------------xdl_malloc: <>
 3987 ------------xdl_cha_init: 3915
 3988 ------------find_lcs: int (struct histindex index, struct region lcs, int line1, int count1, int line2, int count2), <xdiff/xhistogram.c 236>
 3989 -------------scanA: int (struct histindex index, int line1, int count1), <xdiff/xhistogram.c 110>
 3990 --------------LINE_END: <>
 3991 --------------TABLE_HASH: <>
 3992 --------------CMP: <>
 3993 --------------NEXT_PTR: <>
 3994 --------------XDL_MIN: <>
 3995 --------------LINE_MAP: <>
 3996 --------------xdl_cha_alloc: 3937
 3997 -------------LINE_END: <>
 3998 -------------try_lcs: int (struct histindex index, struct region lcs, int b_ptr, int line1, int count1, int line2, int count2), <xdiff/xhistogram.c 163>
 3999 --------------TABLE_HASH: <>
 4000 --------------CMP: <>
 4001 --------------NEXT_PTR: <>
 4002 --------------XDL_MIN: <>
 4003 --------------CNT: <>
 4004 --------------LINE_END: <>
 4005 ------------fall_back_to_classic_diff: int (struct histindex index, int line1, int count1, int line2, int count2), <xdiff/xhistogram.c 251>
 4006 -------------xdl_fall_back_diff: 3975
 4007 ------------histogram_diff: 3982
 4008 ------------xdl_free: <>
 4009 ------------xdl_cha_free: 3917
 4010 ----------xdl_prepare_env: 3906
 4011 ----------xdl_malloc: <>
 4012 ----------xdl_free_env: 3978
 4013 ----------xdl_bogosqrt: 3958
 4014 ----------xdl_recs_cmp: int (diffdata_t *dd1, long off1, long lim1, diffdata_t *dd2, long off2, long lim2, long *kvdf, long *kvdb, int need_min, xdalgoenv_t *xenv), <xdiff/xdiffi.c 268>
 4015 -----------xdl_split: long (unsigned long const *ha1, long off1, long lim1, unsigned long const *ha2, long off2, long lim2, long *kvdf, long *kvdb, int need_min, xdpsplit_t *spl, xdalgoenv_t *xenv), <xdiff/xdiffi.c 62>
 4016 ------------XDL_MIN: <>
 4017 ------------XDL_MAX: <>
 4018 -----------xdl_recs_cmp: 4014
 4019 ----------xdl_free: <>
 4020 ---------xdl_change_compact: int (xdfile_t *xdf, xdfile_t *xdfo, long flags), <xdiff/xdiffi.c 403>
 4021 ----------xdl_recmatch: 1297
 4022 ---------xdl_build_script: int (xdfenv_t *xe, xdchange_t **xscr), <xdiff/xdiffi.c 507>
 4023 ----------xdl_add_change: xdchange_t * (xdchange_t *xscr, long i1, long i2, long chg1, long chg2), <xdiff/xdiffi.c 386>
 4024 -----------xdl_malloc: <>
 4025 ----------xdl_free_script: void (xdchange_t *xscr), <xdiff/xdiffi.c 533>
 4026 -----------xdl_free: <>
 4027 ---------xdl_free_env: 3978
 4028 ---------xdl_mark_ignorable: void (xdchange_t *xscr, xdfenv_t *xe, long flags), <xdiff/xdiffi.c 559>
 4029 ----------xdl_blankline: int (const char *line, long size, long flags), <xdiff/xutils.c 146>
 4030 -----------XDL_ISSPACE: <>
 4031 ---------xdl_free_script: 4025
 4032 ------three_way_filemerge: void * (const char *path, mmfile_t *base, mmfile_t *our, mmfile_t *their, unsigned long *size), <merge-blobs.c 31>
 4033 -------ll_merge: int (mmbuffer_t *result_buf, const char *path, mmfile_t *ancestor, const char *ancestor_label, mmfile_t *ours, const char *our_label, mmfile_t *theirs, const char *their_label, const struct ll_merge_options *opts), <ll-merge.c 347>
 4034 --------normalize_file: void (mmfile_t *mm, const char *path), <ll-merge.c 337>
 4035 ---------renormalize_buffer: int (const char *path, const char *src, size_t len, struct strbuf dst), <convert.c 868>
 4036 ----------convert_to_working_tree_internal: int (const char *path, const char *src, size_t len, struct strbuf dst, int normalizing), <convert.c 823>
 4037 -----------convert_attrs: void (struct conv_attrs ca, const char *path), <convert.c 729>
 4038 ------------git_attr: struct git_attr (const char *name), <attr.c 111>
 4039 ------------git_config: 2254
 4040 ------------read_convert_config: int (const char *var, const char *value, void *cb), <convert.c 441>
 4041 -------------parse_config_key: int (const char *var, const char *section, const char **subsection, int *subsection_len, const char **key), <config.c 2319>
 4042 --------------strlen: <>
 4043 --------------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4044 --------------strrchr: <>
 4045 -------------strncmp: <>
 4046 -------------xcalloc: 1153
 4047 -------------xmemdupz: 120
 4048 -------------strcmp: <>
 4049 -------------git_config_string: 2275
 4050 -------------git_config_bool: 601
 4051 ------------git_check_attr: int (const char *path, int num, struct git_attr_check check), <attr.c 768>
 4052 -------------collect_some_attrs: void (const char *path, int num, struct git_attr_check check), <attr.c 724>
 4053 --------------prepare_attr_stack: void (const char *path, int dirlen), <attr.c 540>
 4054 ---------------bootstrap_attr_stack: void (void), <attr.c 488>
 4055 ----------------read_attr_from_array: struct attr_stack (const char **list), <attr.c 354>
 4056 ----------------git_attr_system: int (void), <attr.c 483>
 4057 -----------------git_env_bool: 1034
 4058 ----------------read_attr_from_file: struct attr_stack (const char *path, int macro_ok), <attr.c 369>
 4059 ----------------git_etc_gitattributes: const char * (void), <attr.c 475>
 4060 -----------------system_path: 1042
 4061 ----------------home_config_paths: 1023
 4062 ----------------is_bare_repository: 3213
 4063 ----------------read_attr: struct attr_stack (const char *path, int macro_ok), <attr.c 413>
 4064 ----------------xstrdup: 73
 4065 ----------------debug_push: <>
 4066 ----------------git_path: 1267
 4067 ----------------xcalloc: 1153
 4068 ---------------strlen: <>
 4069 ---------------strncmp: <>
 4070 ---------------debug_pop: <>
 4071 ---------------free_attr_elem: void (struct attr_stack e), <attr.c 311>
 4072 ----------------free: <>
 4073 ---------------is_bare_repository: 3213
 4074 ---------------assert: <>
 4075 ---------------memchr: <>
 4076 ---------------strbuf_add: 81
 4077 ---------------strbuf_addch: <>
 4078 ---------------strbuf_addstr: <>
 4079 ---------------read_attr: struct attr_stack (const char *path, int macro_ok), <attr.c 413>
 4080 ---------------strbuf_setlen: <>
 4081 ---------------strbuf_detach: 190
 4082 ---------------debug_push: <>
 4083 ---------------strbuf_release: 63
 4084 --------------fill: int (const char *path, int pathlen, int basename_offset, struct attr_stack stk, int rem), <attr.c 677>
 4085 ---------------path_matches: int (const char *pathname, int pathlen, int basename_offset, const struct pattern *pat, const char *base, int baselen), <attr.c 630>
 4086 ----------------match_basename: int (const char *basename, int basenamelen, const char *pattern, int prefix, int patternlen, int flags), <dir.c 660>
 4087 -----------------strncmp_icase: 2875
 4088 -----------------fnmatch_icase_mem: int (const char *pattern, int patternlen, const char *string, int stringlen, int flags), <dir.c 86>
 4089 ------------------strbuf_add: 81
 4090 ------------------wildmatch: int (const char *pattern, const char *text, unsigned int flags, struct wildopts wo), <wildmatch.c 275>
 4091 -------------------dowild: int (const uchar *p, const uchar *text, unsigned int flags), <wildmatch.c 55>
 4092 --------------------ISUPPER: <>
 4093 --------------------tolower: <>
 4094 --------------------dowild: 4091
 4095 --------------------strchr: <>
 4096 --------------------is_glob_special: <>
 4097 --------------------ISLOWER: <>
 4098 --------------------toupper: <>
 4099 --------------------CC_EQ: <>
 4100 --------------------ISALNUM: <>
 4101 --------------------ISALPHA: <>
 4102 --------------------ISBLANK: <>
 4103 --------------------ISCNTRL: <>
 4104 --------------------ISDIGIT: <>
 4105 --------------------ISGRAPH: <>
 4106 --------------------ISPRINT: <>
 4107 --------------------ISPUNCT: <>
 4108 --------------------ISSPACE: <>
 4109 --------------------ISXDIGIT: <>
 4110 ------------------strbuf_release: 63
 4111 ----------------match_pathname: int (const char *pathname, int pathlen, const char *base, int baselen, const char *pattern, int prefix, int patternlen, int flags), <dir.c 684>
 4112 -----------------strncmp_icase: 2875
 4113 -----------------fnmatch_icase_mem: 4088
 4114 ---------------fill_one: int (const char *what, struct match_attr a, int rem), <attr.c 655>
 4115 ----------------debug_set: void (const char *what, const char *match, struct git_attr attr, const void *v), <attr.c 444>
 4116 -----------------ATTR_TRUE: <>
 4117 -----------------ATTR_FALSE: <>
 4118 -----------------ATTR_UNSET: <>
 4119 -----------------fprintf: <>
 4120 ----------------macroexpand_one: int (int nr, int rem), <attr.c 694>
 4121 -----------------fill_one: 4114
 4122 ------------git_path_check_crlf: enum crlf_action (const char *path, struct git_attr_check check), <convert.c 655>
 4123 ------------git_path_check_ident: int (const char *path, struct git_attr_check check), <convert.c 699>
 4124 -------------ATTR_TRUE: <>
 4125 ------------git_path_check_convert: struct convert_driver (const char *path, struct git_attr_check check), <convert.c 685>
 4126 ------------git_path_check_eol: enum eol (const char *path, struct git_attr_check check), <convert.c 672>
 4127 -----------ident_to_worktree: int (const char *path, const char *src, size_t len, struct strbuf buf, int ident), <convert.c 572>
 4128 ------------count_ident: int (const char *cp, unsigned long size), <convert.c 486>
 4129 -------------memcmp: <>
 4130 ------------strbuf_detach: 190
 4131 ------------hash_sha1_file: int (const void *buf, unsigned long len, const char *type, unsigned char *sha1), <sha1_file.c 2865>
 4132 -------------write_sha1_file_prepare: void (const void *buf, unsigned long len, const char *type, unsigned char *sha1, char *hdr, int *hdrlen), <sha1_file.c 2796>
 4133 --------------sprintf: <>
 4134 --------------git_SHA1_Init: <>
 4135 --------------git_SHA1_Update: <>
 4136 --------------git_SHA1_Final: <>
 4137 ------------strbuf_grow: 53
 4138 ------------memchr: <>
 4139 ------------strbuf_add: 81
 4140 ------------memcmp: <>
 4141 ------------strbuf_addstr: <>
 4142 ------------sha1_to_hex: 1194
 4143 ------------free: <>
 4144 -----------input_crlf_action: enum crlf_action (enum crlf_action text_attr, enum eol eol_attr), <convert.c 706>
 4145 -----------crlf_to_worktree: int (const char *path, const char *src, size_t len, struct strbuf buf, enum crlf_action crlf_action), <convert.c 253>
 4146 ------------output_eol: enum eol (enum crlf_action crlf_action), <convert.c 98>
 4147 ------------gather_stats: void (const char *buf, unsigned long size, struct text_stat stats), <convert.c 33>
 4148 -------------memset: <>
 4149 ------------is_binary: int (unsigned long size, struct text_stat stats), <convert.c 79>
 4150 ------------strbuf_detach: 190
 4151 ------------strbuf_grow: 53
 4152 ------------memchr: <>
 4153 ------------strbuf_add: 81
 4154 ------------strbuf_addstr: <>
 4155 ------------free: <>
 4156 -----------apply_filter: int (const char *path, const char *src, size_t len, int fd, struct strbuf dst, const char *cmd), <convert.c 379>
 4157 ------------memset: <>
 4158 ------------filter_buffer_or_fd: int (int in, int out, void *data), <convert.c 320>
 4159 -------------sq_quote_buf: 300
 4160 -------------strbuf_expand: 875
 4161 -------------strbuf_expand_dict_cb: size_t (struct strbuf sb, const char *placeholder, void *context), <strbuf.c 319>
 4162 --------------strlen: <>
 4163 --------------strncmp: <>
 4164 --------------strbuf_addstr: <>
 4165 -------------strbuf_release: 63
 4166 -------------start_command: 255
 4167 -------------error: 12
 4168 -------------sigchain_push: 399
 4169 -------------write_in_full: 240
 4170 -------------copy_fd: int (int ifd, int ofd), <copy.c 3>
 4171 --------------xread: 199
 4172 --------------error: 12
 4173 --------------strerror: <>
 4174 --------------write_in_full: 240
 4175 -------------close: <>
 4176 -------------sigchain_pop: 406
 4177 -------------finish_command: 2027
 4178 ------------fflush: <>
 4179 ------------start_async: int (struct async async), <run-command.c 671>
 4180 -------------pipe: 256
 4181 -------------close: <>
 4182 -------------error: 12
 4183 -------------strerror: <>
 4184 -------------close_pair: 263
 4185 -------------fflush: <>
 4186 -------------fork: <>
 4187 -------------git_atexit_clear: void (void), <run-command.c 648>
 4188 --------------free: <>
 4189 --------------memset: <>
 4190 -------------exit: <>
 4191 -------------mark_child_for_cleanup: 391
 4192 -------------pthread_self: <>
 4193 -------------pthread_key_create: <>
 4194 -------------set_die_routine: 324
 4195 -------------die_async: NORETURN void (const char *err, va_list params), <run-command.c 607>
 4196 --------------vreportf: 3756
 4197 --------------pthread_equal: <>
 4198 --------------pthread_self: <>
 4199 --------------pthread_getspecific: <>
 4200 --------------close: <>
 4201 --------------pthread_exit: <>
 4202 --------------exit: <>
 4203 -------------set_die_is_recursing_routine: void (int (*routine) (void)), <usage.c 74>
 4204 --------------die_is_recursing: int (*) (void), <usage.c 62>
 4205 -------------async_die_is_recursing: int (void), <run-command.c 623>
 4206 --------------pthread_getspecific: <>
 4207 --------------pthread_setspecific: <>
 4208 -------------set_cloexec: 322
 4209 -------------pthread_create: <>
 4210 -------------run_thread: void * (void *data), <run-command.c 597>
 4211 --------------pthread_setspecific: <>
 4212 ------------strbuf_read: 197
 4213 ------------error: 12
 4214 ------------close: <>
 4215 ------------finish_async: int (struct async async), <run-command.c 785>
 4216 -------------wait_or_whine: 411
 4217 -------------pthread_join: <>
 4218 -------------error: 12
 4219 ------------strbuf_swap: <>
 4220 ------------strbuf_release: 63
 4221 -----------die: 29
 4222 ----------convert_to_git: int (const char *path, const char *src, size_t len, struct strbuf dst, enum safe_crlf checksafe), <convert.c 775>
 4223 -----------convert_attrs: 4037
 4224 -----------apply_filter: 4156
 4225 -----------die: 29
 4226 -----------input_crlf_action: enum crlf_action (enum crlf_action text_attr, enum eol eol_attr), <convert.c 706>
 4227 -----------crlf_to_git: int (const char *path, const char *src, size_t len, struct strbuf buf, enum crlf_action crlf_action, enum safe_crlf checksafe), <convert.c 168>
 4228 ------------gather_stats: 4147
 4229 ------------is_binary: int (unsigned long size, struct text_stat stats), <convert.c 79>
 4230 ------------has_cr_in_index: int (const char *path), <convert.c 154>
 4231 -------------read_blob_data_from_cache: <>
 4232 -------------memchr: <>
 4233 -------------free: <>
 4234 ------------check_safe_crlf: void (const char *path, enum crlf_action crlf_action, struct text_stat stats, enum safe_crlf checksafe), <convert.c 123>
 4235 -------------output_eol: enum eol (enum crlf_action crlf_action), <convert.c 98>
 4236 -------------warning: 552
 4237 -------------die: 29
 4238 ------------strbuf_avail: <>
 4239 ------------strbuf_grow: 53
 4240 ------------strbuf_setlen: <>
 4241 -----------ident_to_git: int (const char *path, const char *src, size_t len, struct strbuf buf, int ident), <convert.c 528>
 4242 ------------count_ident: 4128
 4243 ------------strbuf_avail: <>
 4244 ------------strbuf_grow: 53
 4245 ------------memchr: <>
 4246 ------------memmove: <>
 4247 ------------memcmp: <>
 4248 ------------memcpy: <>
 4249 ------------strbuf_setlen: <>
 4250 ---------free: <>
 4251 ---------strbuf_detach: 190
 4252 --------git_path_check_merge: int (const char *path, struct git_attr_check check[2]), <ll-merge.c 328>
 4253 ---------git_attr: struct git_attr (const char *name), <attr.c 111>
 4254 ---------git_check_attr: 4051
 4255 --------atoi: <>
 4256 --------find_ll_merge_driver: const struct ll_merge_driver * (const char *merge_attr), <ll-merge.c 295>
 4257 ------free_mmfile: void (mmfile_t *f), <merge-blobs.c 26>
 4258 -------free: <>
 4259 ----curl_easy_init: <>
 4260 ----die: 29
 4261 ----curl_easy_setopt: <>
 4262 ----init_curl_http_auth: void (CURL *result), <http.c 261>
 4263 -----credential_fill: void (struct credential c), <credential.c 266>
 4264 ------credential_apply_config: void (struct credential c), <credential.c 85>
 4265 -------git_config: 2254
 4266 -------credential_config_callback: int (const char *var, const char *value, void *data), <credential.c 37>
 4267 --------skip_prefix: <>
 4268 --------config_error_nonbool: 1137
 4269 --------strrchr: <>
 4270 --------xmemdupz: 120
 4271 --------credential_from_url: 583
 4272 --------credential_match: 636
 4273 --------credential_clear: 542
 4274 --------free: <>
 4275 --------strcmp: <>
 4276 --------string_list_append: 768
 4277 --------xstrdup: 73
 4278 --------git_config_bool: 601
 4279 -------proto_is_http: int (const char *s), <credential.c 78>
 4280 --------strcmp: <>
 4281 -------free: <>
 4282 ------credential_do: int (struct credential c, const char *helper, const char *operation), <credential.c 246>
 4283 -------strbuf_addstr: <>
 4284 -------is_absolute_path: <>
 4285 -------strbuf_addf: 49
 4286 -------run_credential_helper: int (struct credential c, const char *cmd, int want_output), <credential.c 206>
 4287 --------start_command: 255
 4288 --------xfdopen: 559
 4289 --------credential_write: void (const struct credential *c, FILE *fp), <credential.c 197>
 4290 ---------credential_write_item: void (FILE *fp, const char *key, const char *value), <credential.c 190>
 4291 ----------fprintf: <>
 4292 --------fclose: <>
 4293 --------credential_read: 575
 4294 --------finish_command: 2027
 4295 -------strcmp: <>
 4296 -------strbuf_release: 63
 4297 ------die: 29
 4298 ------credential_getpass: void (struct credential c), <credential.c 131>
 4299 -------credential_ask_one: char * (const char *what, struct credential c, int flags), <credential.c 111>
 4300 --------credential_describe: void (struct credential c, struct strbuf out), <credential.c 98>
 4301 ---------strbuf_addf: 49
 4302 ---------strbuf_addstr: <>
 4303 --------strbuf_addf: 49
 4304 --------git_prompt: char * (const char *prompt, int flags), <prompt.c 44>
 4305 ---------getenv: <>
 4306 ---------do_askpass: char * (const char *cmd, const char *prompt), <prompt.c 7>
 4307 ----------start_command: 255
 4308 ----------strbuf_reset: <>
 4309 ----------strbuf_read: 197
 4310 ----------close: <>
 4311 ----------finish_command: 2027
 4312 ----------error: 12
 4313 ----------strbuf_release: 63
 4314 ----------strbuf_setlen: <>
 4315 ----------strcspn: <>
 4316 ---------git_env_bool: 1034
 4317 ---------git_terminal_prompt: char * (const char *prompt, int echo), <compat/terminal.c 142>
 4318 ----------fopen: <>
 4319 ----------fclose: <>
 4320 ----------disable_echo: int (void), <compat/terminal.c 75>
 4321 -----------open: <>
 4322 -----------tcgetattr: <>
 4323 -----------error: 12
 4324 -----------sigchain_push_common: 398
 4325 -----------restore_term_on_signal: void (int sig), <compat/terminal.c 10>
 4326 ------------restore_term: void (void), <compat/terminal.c 65>
 4327 -------------tcsetattr: <>
 4328 -------------close: <>
 4329 -------------SetConsoleMode: <>
 4330 -------------CloseHandle: <>
 4331 ------------sigchain_pop: 406
 4332 ------------raise: <>
 4333 -----------tcsetattr: <>
 4334 -----------close: <>
 4335 -----------CreateFile: <>
 4336 -----------GetConsoleMode: <>
 4337 -----------SetConsoleMode: <>
 4338 -----------CloseHandle: <>
 4339 ----------fputs: <>
 4340 ----------fflush: <>
 4341 ----------strbuf_getline: 564
 4342 ----------putc: <>
 4343 ----------restore_term: 4326
 4344 ----------getpass: <>
 4345 ---------strerror: <>
 4346 ---------die: 29
 4347 --------strbuf_release: 63
 4348 --------xstrdup: 73
 4349 -----curl_easy_setopt: <>
 4350 -----strbuf_addf: 49
 4351 ----has_cert_password: int (void), <http.c 288>
 4352 -----xstrdup: 73
 4353 -----credential_fill: 4263
 4354 ----getenv: <>
 4355 ----git_user_agent: const char * (void), <version.c 7>
 4356 -----getenv: <>
 4357 ----set_curl_keepalive: void (CURL *c), <http.c 331>
 4358 -----curl_easy_setopt: <>
 4359 -----sockopt_callback: int (void *client, curl_socket_t fd, curlsocktype type), <http.c 308>
 4360 ------setsockopt: <>
 4361 ------warning: 552
 4362 ------strerror: <>
 4363 --get_http_walker: struct walker (const char *url), <http-walker.c 558>
 4364 --walker_fetch: int (struct walker walker, int targets, char **target, const char **write_ref, const char *write_ref_log_details), <walker.c 251>
 4365 ---xmalloc: 172
 4366 ---ref_transaction_begin: struct ref_transaction (struct strbuf err), <refs.c 3557>
 4367 ---error: 12
 4368 ---done: <>
 4369 ---for_each_ref: 1814
 4370 ---mark_complete: int (const char *path, const unsigned char *sha1, int flag, void *cb_data), <walker.c 203>
 4371 ----lookup_commit_reference_gently: struct commit (const unsigned char *sha1, int quiet), <commit.c 21>
 4372 ----commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 4373 ---commit_list_sort_by_date: 1883
 4374 ---interpret_target: int (struct walker walker, char *target, unsigned char *sha1), <walker.c 187>
 4375 ----get_sha1_hex: 931
 4376 ----check_refname_format: 1007
 4377 ----alloc_ref: struct ref (const char *name), <remote.c 963>
 4378 ----hashcpy: <>
 4379 ----free: <>
 4380 ---process: int (struct walker walker, struct object obj), <walker.c 137>
 4381 ----has_sha1_file: 1861
 4382 ----object_list_insert: struct object_list (struct object item, struct object_list list_p), <object.c 284>
 4383 ---lookup_unknown_object: struct object (const unsigned char *sha1), <object.c 176>
 4384 ---loop: int (struct walker walker), <walker.c 158>
 4385 ----free: <>
 4386 ----report_missing: void (const struct object *obj), <walker.c 18>
 4387 -----strcpy: <>
 4388 -----sha1_to_hex: 1194
 4389 -----fprintf: <>
 4390 -----typename: 1237
 4391 -----is_null_sha1: <>
 4392 ----parse_object: struct object (const unsigned char *sha1), <object.c 244>
 4393 ----process_object: int (struct walker walker, struct object obj), <walker.c 112>
 4394 -----process_commit: int (struct walker walker, struct commit commit), <walker.c 70>
 4395 ------parse_commit: 1191
 4396 ------pop_most_recent_commit: struct commit (struct commit_list list, unsigned int mark), <commit.c 488>
 4397 ------hashcpy: <>
 4398 ------walker_say: void (struct walker walker, const char *fmt, const char *hex), <walker.c 12>
 4399 -------fprintf: <>
 4400 ------sha1_to_hex: 1194
 4401 ------process: 4380
 4402 -----process_tree: int (struct walker walker, struct tree tree), <walker.c 31>
 4403 ------parse_tree: int (struct tree item), <tree.c 207>
 4404 -------read_sha1_file: <>
 4405 -------error: 12
 4406 -------sha1_to_hex: 1194
 4407 -------free: <>
 4408 -------parse_tree_buffer: int (struct tree item, void *buffer, unsigned long size), <tree.c 196>
 4409 ------init_tree_desc: 1952
 4410 ------tree_entry: 2893
 4411 ------S_ISGITLINK: <>
 4412 ------S_ISDIR: <>
 4413 ------lookup_tree: struct tree (const unsigned char *sha1), <tree.c 188>
 4414 ------lookup_blob: struct blob (const unsigned char *sha1), <blob.c 6>
 4415 ------process: 4380
 4416 ------free_tree_buffer: void (struct tree tree), <tree.c 227>
 4417 -------free: <>
 4418 -----process_tag: int (struct walker walker, struct tag tag), <walker.c 102>
 4419 ------parse_tag: int (struct tag item), <tag.c 121>
 4420 -------read_sha1_file: <>
 4421 -------error: 12
 4422 -------sha1_to_hex: 1194
 4423 -------free: <>
 4424 -------parse_tag_buffer: int (struct tag item, const void *data, unsigned long size), <tag.c 61>
 4425 --------memcmp: <>
 4426 --------get_sha1_hex: 931
 4427 --------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4428 --------memchr: <>
 4429 --------strncpy: <>
 4430 --------strcmp: <>
 4431 --------lookup_blob: struct blob (const unsigned char *sha1), <blob.c 6>
 4432 --------lookup_tree: struct tree (const unsigned char *sha1), <tree.c 188>
 4433 --------lookup_commit: struct commit (const unsigned char *sha1), <commit.c 48>
 4434 --------lookup_tag: struct tag (const unsigned char *sha1), <tag.c 36>
 4435 --------error: 12
 4436 --------xmemdupz: 120
 4437 --------parse_tag_date: unsigned long (const char *buf, const char *tail), <tag.c 44>
 4438 ---------strtoul: <>
 4439 ------process: 4380
 4440 -----error: 12
 4441 -----typename: 1237
 4442 -----sha1_to_hex: 1194
 4443 ---xstrfmt: 1972
 4444 ---strbuf_reset: <>
 4445 ---strbuf_addf: 49
 4446 ---ref_transaction_update: 3170
 4447 ---ref_transaction_commit: 3180
 4448 ---ref_transaction_free: 3418
 4449 ---free: <>
 4450 ---strbuf_release: 63
 4451 --walker_targets_free: void (int targets, char **target, const char **write_ref), <walker.c 242>
 4452 ---free: <>
 4453 --walker_free: void (struct walker walker), <walker.c 325>
 4454 ---free: <>
 4455 --http_cleanup: void (void), <http.c 514>
 4456 ---curl_multi_remove_handle: <>
 4457 ---curl_easy_cleanup: <>
 4458 ---free: <>
 4459 ---curl_multi_cleanup: <>
 4460 ---curl_global_cleanup: <>
 4461 ---curl_slist_free_all: <>
 4462 ---memset: <>
 4463 ---strlen: <>
 4464 --free: <>
 4465 --strstr: <>
 4466 --strchr: <>
 4467 --memset: <>
 4468 --locking_available: int (void), <http-push.c 1200>
 4469 ---xml_entities: char * (const char *s), <http-push.c 175>
 4470 ----strbuf_addstr_xml_quoted: void (struct strbuf buf, const char *s), <strbuf.c 505>
 4471 -----strcspn: <>
 4472 -----strbuf_add: 81
 4473 -----strbuf_addstr: <>
 4474 ----strbuf_detach: 190
 4475 ---strbuf_addf: 49
 4476 ---free: <>
 4477 ---curl_slist_append: <>
 4478 ---get_active_slot: struct active_request_slot (void), <http.c 562>
 4479 ---curl_setup_http: void (CURL *curl, const char *url, const char *custom_req, struct buffer buffer, curl_write_callback write_fn), <http-push.c 191>
 4480 ----curl_easy_setopt: <>
 4481 ----fread_buffer: size_t (char *ptr, size_t eltsize, size_t nmemb, void *buffer_), <http.c 77>
 4482 -----memcpy: <>
 4483 ----ioctl_buffer: curlioerr (CURL *handle, int cmd, void *clientp), <http.c 91>
 4484 ---fwrite_buffer: size_t (char *ptr, size_t eltsize, size_t nmemb, void *buffer_), <http.c 109>
 4485 ----strbuf_add: 81
 4486 ---curl_easy_setopt: <>
 4487 ---start_active_slot: int (struct active_request_slot slot), <http.c 634>
 4488 ----curl_multi_add_handle: <>
 4489 ----curl_multi_perform: <>
 4490 ---run_active_slot: void (struct active_request_slot slot), <http.c 717>
 4491 ----step_active_slots: void (void), <http.c 702>
 4492 -----curl_multi_perform: <>
 4493 -----process_curl_messages: void (void), <http.c 155>
 4494 ------curl_multi_info_read: <>
 4495 ------result: 3863
 4496 ------curl_multi_remove_handle: <>
 4497 ------finish_active_slot: void (struct active_request_slot slot), <http.c 129>
 4498 -------closedown_active_slot: void (struct active_request_slot slot), <http.c 123>
 4499 -------curl_easy_getinfo: <>
 4500 ------fprintf: <>
 4501 -----fill_active_slots: void (void), <http.c 677>
 4502 ------curl_easy_cleanup: <>
 4503 ----curl_multi_timeout: <>
 4504 ----FD_ZERO: <>
 4505 ----curl_multi_fdset: <>
 4506 ----select: <>
 4507 ----curl_easy_perform: <>
 4508 ----finish_active_slot: 4497
 4509 ---XML_ParserCreate: <>
 4510 ---xcalloc: 1153
 4511 ---handle_lockprop_ctx: void (struct xml_ctx ctx, int tag_closed), <http-push.c 737>
 4512 ----strcmp: <>
 4513 ---XML_SetUserData: <>
 4514 ---XML_SetElementHandler: <>
 4515 ---xml_start_tag: void (void *userData, const char *name, const char **atts), <http-push.c 785>
 4516 ----strchr: <>
 4517 ----strlen: <>
 4518 ----xrealloc: 176
 4519 ----strcat: <>
 4520 ----free: <>
 4521 ---xml_end_tag: void (void *userData, const char *name), <http-push.c 812>
 4522 ----strchr: <>
 4523 ----strlen: <>
 4524 ---XML_Parse: <>
 4525 ---fprintf: <>
 4526 ---XML_ErrorString: <>
 4527 ---XML_GetErrorCode: <>
 4528 ---XML_ParserFree: <>
 4529 ---error: 12
 4530 ---strbuf_release: 63
 4531 ---curl_slist_free_all: <>
 4532 --cleanup: 3440
 4533 --remove_locks_on_signal: void (int signo), <http-push.c 1003>
 4534 ---remove_locks: void (void), <http-push.c 991>
 4535 ----fprintf: <>
 4536 ----unlock_remote: int (struct remote_lock lock), <http-push.c 946>
 4537 -----get_dav_token_headers: struct curl_slist (struct remote_lock lock, enum dav_header_flag options), <http-push.c 210>
 4538 -----get_active_slot: struct active_request_slot (void), <http.c 562>
 4539 -----curl_setup_http_get: void (CURL *curl, const char *url, const char *custom_req), <http-push.c 182>
 4540 ------curl_easy_setopt: <>
 4541 ------fwrite_null: size_t (char *ptr, size_t eltsize, size_t nmemb, void *strbuf), <http.c 118>
 4542 -----curl_easy_setopt: <>
 4543 -----start_active_slot: 4487
 4544 -----run_active_slot: 4490
 4545 -----fprintf: <>
 4546 -----curl_slist_free_all: <>
 4547 -----free: <>
 4548 ---sigchain_pop: 406
 4549 ---raise: <>
 4550 --remote_exists: int (const char *path), <http-push.c 1538>
 4551 ---xstrfmt: 1972
 4552 ---http_get_strbuf: int (const char *url, struct strbuf result, struct http_get_options options), <http.c 1280>
 4553 ----http_request_reauth: int (const char *url, void *result, int target, struct http_get_options options), <http.c 1242>
 4554 -----http_request: int (const char *url, void *result, int target, const struct http_get_options *options), <http.c 1121>
 4555 ------get_active_slot: struct active_request_slot (void), <http.c 562>
 4556 ------curl_easy_setopt: <>
 4557 ------ftell: <>
 4558 ------fwrite: <>
 4559 ------strbuf_addf: 49
 4560 ------curl_slist_append: <>
 4561 ------strbuf_reset: <>
 4562 ------fwrite_buffer: 4484
 4563 ------get_accept_language: const char * (void), <http.c 1105>
 4564 -------write_accept_language: void (struct strbuf buf), <http.c 1006>
 4565 --------get_preferred_languages: const char * (void), <gettext.c 27>
 4566 ---------getenv: <>
 4567 ---------setlocale: <>
 4568 ---------strcmp: <>
 4569 --------isalnum: <>
 4570 --------strbuf_addch: <>
 4571 --------REALLOC_ARRAY: <>
 4572 --------strbuf_detach: 190
 4573 --------sprintf: <>
 4574 --------strbuf_addstr: <>
 4575 --------strbuf_addf: 49
 4576 --------strbuf_remove: void (struct strbuf sb, size_t pos, size_t len), <strbuf.c 188>
 4577 ---------strbuf_splice: 1278
 4578 --------free: <>
 4579 -------strbuf_detach: 190
 4580 ------strbuf_addstr: <>
 4581 ------run_one_slot: int (struct active_request_slot slot, struct slot_results results), <http.c 903>
 4582 -------start_active_slot: 4487
 4583 -------snprintf: <>
 4584 -------run_active_slot: 4490
 4585 -------handle_curl_result: int (struct slot_results results), <http.c 856>
 4586 --------snprintf: <>
 4587 --------credential_approve: void (struct credential c), <credential.c 289>
 4588 ---------credential_apply_config: 4264
 4589 ---------credential_do: 4282
 4590 --------missing_target: <>
 4591 --------credential_reject: void (struct credential c), <credential.c 305>
 4592 ---------credential_apply_config: 4264
 4593 ---------credential_do: 4282
 4594 ---------free: <>
 4595 --------strlcpy: <>
 4596 --------curl_easy_strerror: <>
 4597 ------curlinfo_strbuf: CURLcode (CURL *curl, CURLINFO info, struct strbuf buf), <http.c 917>
 4598 -------strbuf_reset: <>
 4599 -------curl_easy_getinfo: <>
 4600 -------strbuf_addstr: <>
 4601 ------extract_content_type: void (struct strbuf raw, struct strbuf type, struct strbuf charset), <http.c 972>
 4602 -------strbuf_reset: <>
 4603 -------strbuf_grow: 53
 4604 -------isspace: <>
 4605 -------strbuf_addch: <>
 4606 -------tolower: <>
 4607 -------extract_param: int (const char *raw, const char *name, struct strbuf out), <http.c 937>
 4608 --------strlen: <>
 4609 --------strncasecmp: <>
 4610 --------isspace: <>
 4611 --------strbuf_addch: <>
 4612 -------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4613 -------strbuf_addstr: <>
 4614 ------strbuf_release: 63
 4615 ------curl_slist_free_all: <>
 4616 -----update_url_from_redirect: int (struct strbuf base, const char *asked, const struct strbuf *got), <http.c 1217>
 4617 ------strcmp: <>
 4618 ------skip_prefix: <>
 4619 ------die: 29
 4620 ------strlen: <>
 4621 ------strbuf_reset: <>
 4622 ------strbuf_add: 81
 4623 -----credential_from_url: 583
 4624 -----strbuf_reset: <>
 4625 -----die: 29
 4626 -----credential_fill: 4263
 4627 ---error: 12
 4628 ---free: <>
 4629 --lock_remote: struct remote_lock (const char *path, long timeout), <http-push.c 837>
 4630 --fetch_indices: int (void), <http-push.c 701>
 4631 ---fprintf: <>
 4632 ---http_get_info_packs: int (const char *base_url, struct packed_git packs_head), <http.c 1410>
 4633 ----end_url_with_slash: 3764
 4634 ----strbuf_addstr: <>
 4635 ----strbuf_detach: 190
 4636 ----http_get_strbuf: 4552
 4637 ----cleanup: 3440
 4638 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4639 ----get_sha1_hex: 931
 4640 ----fetch_and_setup_pack_index: int (struct packed_git packs_head, unsigned char *sha1, const char *base_url), <http.c 1369>
 4641 -----has_pack_index: int (const unsigned char *sha1), <sha1_file.c 3043>
 4642 ------stat: <>
 4643 ------sha1_pack_index_name: char * (const unsigned char *sha1), <sha1_file.c 244>
 4644 -------sha1_get_pack_name: char * (const unsigned char *sha1, char **name, char **base, const char *which), <sha1_file.c 210>
 4645 --------get_object_directory: 1423
 4646 --------strlen: <>
 4647 --------xmalloc: 172
 4648 --------sprintf: <>
 4649 -----parse_pack_index: struct packed_git (unsigned char *sha1, const char *idx_path), <sha1_file.c 1147>
 4650 -----sha1_pack_index_name: 4643
 4651 -----add_pack: struct pack_list (struct packed_git p), <builtin/pack-redundant.c 540>
 4652 -----fetch_pack_index: char * (unsigned char *sha1, const char *base_url), <http.c 1344>
 4653 ------fprintf: <>
 4654 ------sha1_to_hex: 1194
 4655 ------end_url_with_slash: 3764
 4656 ------strbuf_addf: 49
 4657 ------strbuf_detach: 190
 4658 ------sha1_pack_index_name: 4643
 4659 ------http_get_file: int (const char *url, const char *filename, struct http_get_options options), <http.c 1293>
 4660 -------result: 3863
 4661 -------strbuf_addf: 49
 4662 -------fopen: <>
 4663 -------error: 12
 4664 -------cleanup: 3440
 4665 -------http_request_reauth: 4553
 4666 -------fclose: <>
 4667 -------move_temp_to_file: 2485
 4668 -------strbuf_release: 63
 4669 ------error: 12
 4670 ------free: <>
 4671 -----unlink: <>
 4672 -----free: <>
 4673 -----verify_pack_index: int (struct packed_git p), <pack-check.c 144>
 4674 ------open_pack_index: 1526
 4675 ------error: 12
 4676 ------git_SHA1_Init: <>
 4677 ------git_SHA1_Update: <>
 4678 ------git_SHA1_Final: <>
 4679 ------hashcmp: <>
 4680 -----close_pack_index: void (struct packed_git p), <sha1_file.c 830>
 4681 ------munmap: <>
 4682 -----move_temp_to_file: 2485
 4683 ----free: <>
 4684 --get_local_heads: struct ref (void), <remote.c 2046>
 4685 --get_dav_remote_heads: void (void), <http-push.c 1453>
 4686 ---remote_ls: void (const char *path, int flags, void (*userFunc) (struct remote_ls_ctx ls), void *userData), <http-push.c 1119>
 4687 ----xstrfmt: 1972
 4688 ----xstrdup: 73
 4689 ----strbuf_addf: 49
 4690 ----curl_slist_append: <>
 4691 ----get_active_slot: struct active_request_slot (void), <http.c 562>
 4692 ----curl_setup_http: 4479
 4693 ----fwrite_buffer: 4484
 4694 ----curl_easy_setopt: <>
 4695 ----start_active_slot: 4487
 4696 ----run_active_slot: 4490
 4697 ----XML_ParserCreate: <>
 4698 ----xcalloc: 1153
 4699 ----handle_remote_ls_ctx: void (struct xml_ctx ctx, int tag_closed), <http-push.c 1059>
 4700 -----strcmp: <>
 4701 -----str_end_url_with_slash: 3795
 4702 -----remote_ls: 4686
 4703 -----strstr: <>
 4704 -----strchr: <>
 4705 -----strncmp: <>
 4706 -----error: 12
 4707 -----xstrdup: 73
 4708 -----free: <>
 4709 ----XML_SetUserData: <>
 4710 ----XML_SetElementHandler: <>
 4711 ----xml_start_tag: 4515
 4712 ----xml_end_tag: 4521
 4713 ----XML_SetCharacterDataHandler: <>
 4714 ----xml_cdata: void (void *userData, const XML_Char *s, int len), <http-push.c 830>
 4715 -----free: <>
 4716 -----xmemdupz: 120
 4717 ----XML_Parse: <>
 4718 ----free: <>
 4719 ----fprintf: <>
 4720 ----XML_ErrorString: <>
 4721 ----XML_GetErrorCode: <>
 4722 ----XML_ParserFree: <>
 4723 ----strbuf_release: 63
 4724 ----curl_slist_free_all: <>
 4725 ---process_ls_ref: void (struct remote_ls_ctx ls), <http-push.c 1048>
 4726 ----strcmp: <>
 4727 ----fprintf: <>
 4728 ----one_remote_ref: void (const char *refname), <http-push.c 1421>
 4729 -----alloc_ref: struct ref (const char *name), <remote.c 963>
 4730 -----http_fetch_ref: int (const char *base, struct ref ref), <http.c 1318>
 4731 ------quote_ref_url: char * (const char *base, const char *ref), <http.c 820>
 4732 -------end_url_with_slash: 3764
 4733 -------needs_quote: inline int (int ch), <http.c 808>
 4734 -------strbuf_addf: 49
 4735 -------strbuf_addch: <>
 4736 -------strbuf_detach: 190
 4737 ------http_get_strbuf: 4552
 4738 ------strbuf_rtrim: 1119
 4739 ------get_sha1_hex: 931
 4740 ------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4741 ------xstrdup: 73
 4742 ------strbuf_release: 63
 4743 ------free: <>
 4744 -----fprintf: <>
 4745 -----free: <>
 4746 -----has_sha1_file: 1861
 4747 -----lookup_unknown_object: struct object (const unsigned char *sha1), <object.c 176>
 4748 -----sha1_to_hex: 1194
 4749 -----add_fetch_request: void (struct object obj), <http-push.c 630>
 4750 ------check_locks: void (void), <http-push.c 472>
 4751 -------time: <>
 4752 -------refresh_lock: int (struct remote_lock lock), <http-push.c 439>
 4753 --------get_dav_token_headers: struct curl_slist (struct remote_lock lock, enum dav_header_flag options), <http-push.c 210>
 4754 --------get_active_slot: struct active_request_slot (void), <http.c 562>
 4755 --------curl_setup_http_get: 4539
 4756 --------curl_easy_setopt: <>
 4757 --------start_active_slot: 4487
 4758 --------run_active_slot: 4490
 4759 --------fprintf: <>
 4760 --------time: <>
 4761 --------curl_slist_free_all: <>
 4762 -------fprintf: <>
 4763 ------get_remote_object_list: void (unsigned char parent), <http-push.c 1187>
 4764 -------remote_ls: 4686
 4765 -------process_ls_object: void (struct remote_ls_ctx ls), <http-push.c 1030>
 4766 --------strcmp: <>
 4767 --------skip_prefix: <>
 4768 --------get_sha1_hex_from_objpath: int (const char *path, unsigned char *sha1), <http-push.c 1015>
 4769 ---------strlen: <>
 4770 ---------memcpy: <>
 4771 ---------get_sha1_hex: 931
 4772 --------one_remote_object: void (const unsigned char *sha1), <http-push.c 720>
 4773 ---------lookup_object: struct object (const unsigned char *sha1), <object.c 84>
 4774 ---------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 4775 ---------object_list_contains: int (struct object_list list, struct object obj), <object.c 294>
 4776 ---------object_list_insert: struct object_list (struct object item, struct object_list list_p), <object.c 284>
 4777 ------xmalloc: 172
 4778 ------fill_active_slots: 4501
 4779 ------step_active_slots: 4491
 4780 --run_request_queue: void (void), <http-push.c 1695>
 4781 ---fill_active_slots: 4501
 4782 ---add_fill_function: void (void *data, int (*fill) (void *)), <http.c 665>
 4783 ----xmalloc: 172
 4784 ---fill_active_slot: int (void *unused), <http-push.c 604>
 4785 ----start_fetch_loose: void (struct transfer_request request), <http-push.c 248>
 4786 -----new_http_object_request: struct http_object_request (const char *base_url, unsigned char *sha1), <http.c 1606>
 4787 -----process_response: void (void *callback_data), <http-push.c 238>
 4788 ------finish_request: void (struct transfer_request request), <http-push.c 511>
 4789 -------check_locks: 4750
 4790 -------curl_slist_free_all: <>
 4791 -------free: <>
 4792 -------start_put: void (struct transfer_request request), <http-push.c 350>
 4793 --------sha1_to_hex: 1194
 4794 --------read_sha1_file: <>
 4795 --------sprintf: <>
 4796 --------typename: 1237
 4797 --------git_deflate_init: 2774
 4798 --------git_deflate_bound: 2781
 4799 --------strbuf_init: 65
 4800 --------git_deflate: 2784
 4801 --------git_deflate_end: 2791
 4802 --------free: <>
 4803 --------strbuf_addstr: <>
 4804 --------append_remote_object_url: void (struct strbuf buf, const char *url, const char *hex, int only_two_digit_prefix), <http.c 837>
 4805 ---------end_url_with_slash: 3764
 4806 ---------strbuf_addf: 49
 4807 --------strbuf_detach: 190
 4808 --------strbuf_add: 81
 4809 --------get_active_slot: struct active_request_slot (void), <http.c 562>
 4810 --------process_response: 4787
 4811 --------curl_setup_http: 4479
 4812 --------fwrite_null: size_t (char *ptr, size_t eltsize, size_t nmemb, void *strbuf), <http.c 118>
 4813 --------start_active_slot: 4487
 4814 -------fprintf: <>
 4815 -------sha1_to_hex: 1194
 4816 -------start_move: void (struct transfer_request request), <http-push.c 416>
 4817 --------get_active_slot: struct active_request_slot (void), <http.c 562>
 4818 --------process_response: 4787
 4819 --------curl_setup_http_get: 4539
 4820 --------curl_slist_append: <>
 4821 --------curl_easy_setopt: <>
 4822 --------start_active_slot: 4487
 4823 --------free: <>
 4824 -------release_request: void (struct transfer_request request), <http-push.c 494>
 4825 --------free: <>
 4826 -------finish_http_object_request: int (struct http_object_request freq), <http.c 1746>
 4827 --------close: <>
 4828 --------process_http_object_request: void (struct http_object_request freq), <http.c 1737>
 4829 --------warning: 552
 4830 --------stat: <>
 4831 --------unlink_or_warn: 658
 4832 --------git_inflate_end: 1624
 4833 --------git_SHA1_Final: <>
 4834 --------hashcmp: <>
 4835 --------move_temp_to_file: 2485
 4836 --------sha1_file_name: 1583
 4837 -------release_http_object_request: void (struct http_object_request freq), <http.c 1787>
 4838 --------close: <>
 4839 --------free: <>
 4840 --------release_active_slot: void (struct active_request_slot slot), <http.c 778>
 4841 ---------closedown_active_slot: 4498
 4842 ---------curl_multi_remove_handle: <>
 4843 ---------curl_easy_cleanup: <>
 4844 ---------fill_active_slots: 4501
 4845 -------start_fetch_packed: void (struct transfer_request request), <http-push.c 299>
 4846 --------find_sha1_pack: struct packed_git (const unsigned char *sha1, struct packed_git packs), <sha1_file.c 2513>
 4847 --------fprintf: <>
 4848 --------sha1_to_hex: 1194
 4849 --------release_request: 4824
 4850 --------new_http_pack_request: struct http_pack_request (struct packed_git target, const char *base_url), <http.c 1521>
 4851 --------strcmp: <>
 4852 --------release_http_pack_request: void (struct http_pack_request preq), <http.c 1453>
 4853 ---------fclose: <>
 4854 ---------curl_slist_free_all: <>
 4855 ---------free: <>
 4856 --------process_response: 4787
 4857 --------start_active_slot: 4487
 4858 -------finish_http_pack_request: int (struct http_pack_request preq), <http.c 1468>
 4859 --------close_pack_index: 4680
 4860 --------fclose: <>
 4861 --------xstrdup: 73
 4862 --------strcpy: <>
 4863 --------strlen: <>
 4864 --------run_command: 3633
 4865 --------unlink: <>
 4866 --------free: <>
 4867 --------sha1_pack_index_name: 4643
 4868 --------move_temp_to_file: 2485
 4869 --------sha1_pack_name: char * (const unsigned char *sha1), <sha1_file.c 237>
 4870 ---------sha1_get_pack_name: 4644
 4871 --------install_packed_git: 1498
 4872 -------release_http_pack_request: 4852
 4873 -----start_active_slot: 4487
 4874 -----fprintf: <>
 4875 -----release_http_object_request: 4837
 4876 -----release_request: 4824
 4877 ----start_put: 4792
 4878 ----start_mkcol: void (struct transfer_request request), <http-push.c 275>
 4879 -----sha1_to_hex: 1194
 4880 -----get_remote_object_url: char * (const char *url, const char *hex, int only_two_digit_prefix), <http.c 848>
 4881 ------append_remote_object_url: 4804
 4882 ------strbuf_detach: 190
 4883 -----get_active_slot: struct active_request_slot (void), <http.c 562>
 4884 -----process_response: 4787
 4885 -----curl_setup_http_get: 4539
 4886 -----curl_easy_setopt: <>
 4887 -----start_active_slot: 4487
 4888 -----free: <>
 4889 ---finish_all_active_slots: void (void), <http.c 794>
 4890 ----run_active_slot: 4490
 4891 --delete_remote_branch: int (const char *pattern, int force), <http-push.c 1599>
 4892 ---strlen: <>
 4893 ---memcmp: <>
 4894 ---error: 12
 4895 ---fetch_symref: void (const char *path, char **symref, unsigned char *sha1), <http-push.c 1560>
 4896 ----xstrfmt: 1972
 4897 ----http_get_strbuf: 4552
 4898 ----die: 29
 4899 ----free: <>
 4900 ----hashclr: <>
 4901 ----strbuf_rtrim: 1119
 4902 ----skip_prefix: <>
 4903 ----xmemdupz: 120
 4904 ----get_sha1_hex: 931
 4905 ----strbuf_release: 63
 4906 ---strcmp: <>
 4907 ---is_null_sha1: <>
 4908 ---has_sha1_file: 1861
 4909 ---sha1_to_hex: 1194
 4910 ---verify_merge_base: int (unsigned char *head_sha1, struct ref remote), <http-push.c 1591>
 4911 ----lookup_commit_or_die: struct commit (const unsigned char *sha1, const char *ref_name), <commit.c 36>
 4912 ----in_merge_bases: 3423
 4913 ---fprintf: <>
 4914 ---xstrfmt: 1972
 4915 ---get_active_slot: struct active_request_slot (void), <http.c 562>
 4916 ---curl_setup_http_get: 4539
 4917 ---start_active_slot: 4487
 4918 ---run_active_slot: 4490
 4919 ---free: <>
 4920 --match_push_refs: int (struct ref src, struct ref dst, int nr_refspec, const char **refspec, int flags), <remote.c 1460>
 4921 ---tail_ref: struct ref (struct ref head), <remote.c 1308>
 4922 ---parse_push_refspec: struct refspec (int nr_refspec, const char **refspec), <remote.c 677>
 4923 ---match_explicit_refs: int (struct ref src, struct ref dst, struct ref dst_tail, struct refspec rs, int rs_nr), <remote.c 1252>
 4924 ----match_explicit: int (struct ref src, struct ref dst, struct ref dst_tail, struct refspec rs), <remote.c 1182>
 4925 -----match_explicit_lhs: int (struct ref src, struct refspec rs, struct ref match, int *allocated_match), <remote.c 1157>
 4926 ------count_refspec_match: int (const char *pattern, struct ref refs, struct ref matched_ref), <remote.c 1037>
 4927 -------strlen: <>
 4928 -------refname_match: int (const char *abbrev_name, const char *full_name), <refs.c 2114>
 4929 --------strlen: <>
 4930 --------strcmp: <>
 4931 --------mkpath: char * (const char *fmt, ...), <path.c 107>
 4932 ---------get_pathname: 1268
 4933 ---------va_start: <>
 4934 ---------vsnprintf: <>
 4935 ---------va_end: <>
 4936 ---------cleanup_path: 992
 4937 -------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4938 ------try_explicit_object_name: int (const char *name, struct ref match), <remote.c 1108>
 4939 -------alloc_delete_ref: struct ref (void), <remote.c 1101>
 4940 -------get_sha1: 1182
 4941 -------alloc_ref: struct ref (const char *name), <remote.c 963>
 4942 -------hashcpy: <>
 4943 ------error: 12
 4944 -----resolve_ref_unsafe: 1341
 4945 -----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4946 -----die: 29
 4947 -----count_refspec_match: 4926
 4948 -----make_linked_ref: struct ref (const char *name, struct ref tail), <remote.c 1129>
 4949 -----is_null_sha1: <>
 4950 -----error: 12
 4951 -----guess_ref: char * (const char *name, struct ref peer), <remote.c 1136>
 4952 ------resolve_ref_unsafe: 1341
 4953 ------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4954 ------strbuf_addstr: <>
 4955 ------strbuf_detach: 190
 4956 -----copy_ref: struct ref (const struct ref *ref), <remote.c 968>
 4957 ---get_ref_match: char * (const struct refspec *rs, int rs_nr, const struct ref *ref, int send_mirror, int direction, const struct refspec **ret_pat), <remote.c 1262>
 4958 ----match_name_with_pattern: int (const char *key, const char *name, const char *value, char **result), <remote.c 849>
 4959 -----strchr: <>
 4960 -----die: 29
 4961 -----strlen: <>
 4962 -----strncmp: <>
 4963 -----memcmp: <>
 4964 -----strbuf_add: 81
 4965 -----strbuf_addstr: <>
 4966 -----strbuf_detach: 190
 4967 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4968 ----xstrdup: 73
 4969 ---prepare_ref_index: void (struct string_list ref_index, struct ref ref), <remote.c 1419>
 4970 ----string_list_append_nodup: struct string_list_item (struct string_list list, char *string), <string-list.c 195>
 4971 ----string_list_sort: 1505
 4972 ---string_list_lookup: struct string_list_item (struct string_list list, const char *string), <string-list.c 87>
 4973 ---make_linked_ref: struct ref (const char *name, struct ref tail), <remote.c 1129>
 4974 ---hashcpy: <>
 4975 ---string_list_insert: struct string_list_item (struct string_list list, const char *string), <string-list.c 60>
 4976 ---copy_ref: struct ref (const struct ref *ref), <remote.c 968>
 4977 ---free: <>
 4978 ---string_list_clear: 544
 4979 ---add_missing_tags: void (struct ref src, struct ref dst, struct ref dst_tail), <remote.c 1335>
 4980 ----memset: <>
 4981 ----is_null_sha1: <>
 4982 ----add_to_tips: void (struct tips tips, const unsigned char *sha1), <remote.c 1321>
 4983 -----is_null_sha1: <>
 4984 -----lookup_commit_reference_gently: struct commit (const unsigned char *sha1, int quiet), <commit.c 21>
 4985 -----ALLOC_GROW: <>
 4986 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 4987 ----string_list_append: 768
 4988 ----clear_commit_marks_many: 1249
 4989 ----string_list_sort: 1505
 4990 ----string_list_has_string: int (const struct string_list *list, const char *string), <string-list.c 70>
 4991 -----get_entry_index: int (const struct string_list *list, const char *string, int *exact_match), <string-list.c 12>
 4992 ------cmp: <>
 4993 ------strcmp: <>
 4994 ----sha1_object_info: 1477
 4995 ----string_list_clear: 544
 4996 ----for_each_string_list_item: <>
 4997 ----lookup_commit_reference_gently: struct commit (const unsigned char *sha1, int quiet), <commit.c 21>
 4998 ----in_merge_bases_many: 3424
 4999 ----make_linked_ref: struct ref (const char *name, struct ref tail), <remote.c 1129>
 5000 ----hashcpy: <>
 5001 ----copy_ref: struct ref (const struct ref *ref), <remote.c 968>
 5002 ----free: <>
 5003 ---string_list_has_string: 4990
 5004 ---alloc_delete_ref: struct ref (void), <remote.c 1101>
 5005 --is_null_sha1: <>
 5006 --hashcmp: <>
 5007 --has_sha1_file: 1861
 5008 --ref_newer: int (const unsigned char *new_sha1, const unsigned char *old_sha1), <remote.c 1839>
 5009 ---deref_tag: struct object (struct object o, const char *warn, int warnlen), <tag.c 9>
 5010 ---parse_object: struct object (const unsigned char *sha1), <object.c 244>
 5011 ---parse_commit: 1191
 5012 ---commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 5013 ---pop_most_recent_commit: struct commit (struct commit_list list, unsigned int mark), <commit.c 488>
 5014 ---unmark_and_free: void (struct commit_list list, unsigned int mark), <remote.c 1829>
 5015 ----free: <>
 5016 --hashcpy: <>
 5017 --strcpy: <>
 5018 --sha1_to_hex: 1194
 5019 --xstrdup: 73
 5020 --sprintf: <>
 5021 --init_revisions: void (struct rev_info revs, const char *prefix), <revision.c 1380>
 5022 ---memset: <>
 5023 ---DIFF_OPT_SET: <>
 5024 ---file_add_remove: void (struct diff_options options, int addremove, unsigned mode, const unsigned char *sha1, int sha1_valid, const char *fullpath, unsigned dirty_submodule), <revision.c 446>
 5025 ----DIFF_OPT_SET: <>
 5026 ---file_change: void (struct diff_options options, unsigned old_mode, unsigned new_mode, const unsigned char *old_sha1, const unsigned char *new_sha1, int old_sha1_valid, int new_sha1_valid, const char *fullpath, unsigned old_dirty_submodule, unsigned new_dirty_submodule), <revision.c 459>
 5027 ----DIFF_OPT_SET: <>
 5028 ---init_grep_defaults: void (void), <grep.c 18>
 5029 ----memset: <>
 5030 ----strcpy: <>
 5031 ---grep_init: void (struct grep_opt opt, const char *prefix), <grep.c 135>
 5032 ----memset: <>
 5033 ----strlen: <>
 5034 ----strcpy: <>
 5035 ---diff_setup: void (struct diff_options options), <diff.c 3215>
 5036 ----memcpy: <>
 5037 ----DIFF_OPT_SET: <>
 5038 ----diff_change: void (struct diff_options options, unsigned old_mode, unsigned new_mode, const unsigned char *old_sha1, const unsigned char *new_sha1, int old_sha1_valid, int new_sha1_valid, const char *concatpath, unsigned old_dirty_submodule, unsigned new_dirty_submodule), <diff.c 4886>
 5039 -----S_ISGITLINK: <>
 5040 -----is_submodule_ignored: int (const char *path, struct diff_options options), <diff.c 4828>
 5041 ------DIFF_OPT_TST: <>
 5042 ------set_diffopt_flags_from_submodule_config: void (struct diff_options diffopt, const char *path), <submodule.c 165>
 5043 -------unsorted_string_list_lookup: struct string_list_item (struct string_list list, const char *string), <string-list.c 231>
 5044 -------handle_ignore_submodules_arg: void (struct diff_options diffopt, const char *arg), <submodule.c 274>
 5045 --------DIFF_OPT_CLR: <>
 5046 --------strcmp: <>
 5047 --------DIFF_OPT_SET: <>
 5048 --------die: 29
 5049 -------DIFF_OPT_SET: <>
 5050 -----DIFF_OPT_TST: <>
 5051 -----strncmp: <>
 5052 -----alloc_filespec: struct diff_filespec (const char *path), <diff.c 2556>
 5053 -----fill_filespec: void (struct diff_filespec spec, const unsigned char *sha1, int sha1_valid, unsigned short mode), <diff.c 2577>
 5054 ------canon_mode: <>
 5055 ------hashcpy: <>
 5056 -----diff_queue: struct diff_filepair (struct diff_queue_struct queue, struct diff_filespec one, struct diff_filespec two), <diff.c 3965>
 5057 -----diff_filespec_check_stat_unmatch: int (struct diff_filepair p), <diff.c 4689>
 5058 ------DIFF_FILE_VALID: <>
 5059 ------diff_populate_filespec: int (struct diff_filespec s, unsigned int flags), <diff.c 2682>
 5060 -------DIFF_FILE_VALID: <>
 5061 -------die: 29
 5062 -------S_ISDIR: <>
 5063 -------S_ISGITLINK: <>
 5064 -------diff_populate_gitlink: int (struct diff_filespec s, int size_only), <diff.c 2656>
 5065 --------xmalloc: 172
 5066 --------snprintf: <>
 5067 --------sha1_to_hex: 1194
 5068 --------free: <>
 5069 -------reuse_worktree_file: int (const char *name, const unsigned char *sha1, int want_file), <diff.c 2592>
 5070 --------has_sha1_pack: int (const unsigned char *sha1), <sha1_file.c 3051>
 5071 ---------find_pack_entry: 1482
 5072 --------strlen: <>
 5073 --------cache_name_pos: <>
 5074 --------hashcmp: <>
 5075 --------S_ISREG: <>
 5076 --------ce_skip_worktree: <>
 5077 --------ce_uptodate: <>
 5078 --------lstat: <>
 5079 --------ce_match_stat: <>
 5080 -------lstat: <>
 5081 -------xsize_t: <>
 5082 -------S_ISLNK: <>
 5083 -------strbuf_readlink: 687
 5084 -------strbuf_detach: 190
 5085 -------open: <>
 5086 -------xmmap: 1456
 5087 -------close: <>
 5088 -------convert_to_git: 4222
 5089 -------munmap: <>
 5090 -------sha1_object_info: 1477
 5091 -------sha1_to_hex: 1194
 5092 -------read_sha1_file: <>
 5093 ------diff_filespec_is_identical: int (struct diff_filespec one, struct diff_filespec two), <diff.c 4677>
 5094 -------S_ISGITLINK: <>
 5095 -------diff_populate_filespec: 5059
 5096 -------memcmp: <>
 5097 -----DIFF_OPT_SET: <>
 5098 ----diff_addremove: void (struct diff_options options, int addremove, unsigned mode, const unsigned char *sha1, int sha1_valid, const char *concatpath, unsigned dirty_submodule), <diff.c 4840>
 5099 -----S_ISGITLINK: <>
 5100 -----is_submodule_ignored: 5040
 5101 -----DIFF_OPT_TST: <>
 5102 -----strncmp: <>
 5103 -----alloc_filespec: struct diff_filespec (const char *path), <diff.c 2556>
 5104 -----fill_filespec: 5053
 5105 -----diff_queue: struct diff_filepair (struct diff_queue_struct queue, struct diff_filespec one, struct diff_filespec two), <diff.c 3965>
 5106 -----DIFF_OPT_SET: <>
 5107 ---strlen: <>
 5108 --setup_revisions: int (int argc, const char **argv, struct rev_info revs, struct setup_revision_opt opt), <revision.c 2165>
 5109 ---memset: <>
 5110 ---strcmp: <>
 5111 ---append_prune_data: void (struct cmdline_pathspec prune, const char **av), <revision.c 1611>
 5112 ----ALLOC_GROW: <>
 5113 ---handle_revision_pseudo_opt: int (const char *submodule, struct rev_info revs, int argc, const char **argv, int *flags), <revision.c 2071>
 5114 ----strcmp: <>
 5115 ----handle_refs: void (const char *submodule, struct rev_info revs, unsigned flags, int (*for_each) (const char *, each_ref_fn, void *)), <revision.c 1245>
 5116 -----init_all_refs_cb: void (struct all_refs_cb cb, struct rev_info revs, unsigned flags), <revision.c 1220>
 5117 -----handle_one_ref: int (const char *path, const unsigned char *sha1, int flag, void *cb_data), <revision.c 1206>
 5118 ------ref_excluded: int (struct string_list ref_excludes, const char *path), <revision.c 1193>
 5119 -------for_each_string_list_item: <>
 5120 -------wildmatch: 4090
 5121 ------get_reference: struct object (struct rev_info revs, const char *name, const unsigned char *sha1, unsigned int flags), <revision.c 243>
 5122 ------add_rev_cmdline: void (struct rev_info revs, struct object item, const char *name, int whence, unsigned flags), <revision.c 1156>
 5123 -------ALLOC_GROW: <>
 5124 -------xstrdup: 73
 5125 ------add_pending_sha1: void (struct rev_info revs, const char *name, const unsigned char *sha1, unsigned int flags), <revision.c 259>
 5126 -------get_reference: struct object (struct rev_info revs, const char *name, const unsigned char *sha1, unsigned int flags), <revision.c 243>
 5127 -------add_pending_object: void (struct rev_info revs, struct object obj, const char *name), <revision.c 225>
 5128 --------add_pending_object_with_mode: void (struct rev_info revs, struct object obj, const char *name, unsigned mode), <revision.c 218>
 5129 ---------add_pending_object_with_path: void (struct rev_info revs, struct object obj, const char *name, unsigned mode, const char *path), <revision.c 192>
 5130 ----------interpret_branch_name: 1260
 5131 ----------strbuf_addstr: <>
 5132 ----------add_reflog_for_walk: int (struct reflog_walk_info info, struct commit commit, const char *name), <reflog-walk.c 142>
 5133 -----------strchr: <>
 5134 -----------die: 29
 5135 -----------xstrdup: 73
 5136 -----------strtoul: <>
 5137 -----------approxidate: <>
 5138 -----------string_list_lookup: struct string_list_item (struct string_list list, const char *string), <string-list.c 87>
 5139 -----------free: <>
 5140 -----------resolve_refdup: char * (const char *ref, int resolve_flags, unsigned char *sha1, int *flags), <refs.c 1646>
 5141 ------------xstrdup_or_null: <>
 5142 ------------resolve_ref_unsafe: 1341
 5143 -----------read_complete_reflog: struct complete_reflogs (const char *ref), <reflog-walk.c 41>
 5144 -----------dwim_log: 1398
 5145 -----------strlen: <>
 5146 -----------string_list_insert: struct string_list_item (struct string_list list, const char *string), <string-list.c 60>
 5147 -----------xcalloc: 1153
 5148 -----------get_reflog_recno_by_time: int (struct complete_reflogs array, unsigned long timestamp), <reflog-walk.c 72>
 5149 -----------add_commit_info: void (struct commit commit, void *util, struct commit_info_lifo lifo), <reflog-walk.c 110>
 5150 ------------ALLOC_GROW: <>
 5151 ----------strbuf_release: 63
 5152 ----------add_object_array_with_path: void (struct object obj, const char *name, struct object_array array, unsigned mode, const char *path), <object.c 310>
 5153 -----------REALLOC_ARRAY: <>
 5154 -----------xstrdup: 73
 5155 ----for_each_ref_submodule: int (const char *submodule, each_ref_fn fn, void *cb_data), <refs.c 1978>
 5156 -----do_for_each_ref: 1815
 5157 -----get_ref_cache: struct ref_cache (const char *submodule), <refs.c 1066>
 5158 ----head_ref_submodule: int (const char *submodule, each_ref_fn fn, void *cb_data), <refs.c 1968>
 5159 -----do_head_ref: 3339
 5160 ----clear_ref_exclusion: void (struct string_list ref_excludes_p), <revision.c 1227>
 5161 -----string_list_clear: 544
 5162 -----free: <>
 5163 ----for_each_branch_ref_submodule: int (const char *submodule, each_ref_fn fn, void *cb_data), <refs.c 2009>
 5164 -----for_each_ref_in_submodule: int (const char *submodule, const char *prefix, each_ref_fn fn, void *cb_data), <refs.c 1988>
 5165 ------do_for_each_ref: 1815
 5166 ------get_ref_cache: struct ref_cache (const char *submodule), <refs.c 1066>
 5167 ------strlen: <>
 5168 ----for_each_bad_bisect_ref: int (const char *submodule, each_ref_fn fn, void *cb_data), <revision.c 2061>
 5169 -----for_each_ref_in_submodule: 5164
 5170 ----for_each_good_bisect_ref: int (const char *submodule, each_ref_fn fn, void *cb_data), <revision.c 2066>
 5171 -----for_each_ref_in_submodule: 5164
 5172 ----for_each_tag_ref_submodule: int (const char *submodule, each_ref_fn fn, void *cb_data), <refs.c 1999>
 5173 -----for_each_ref_in_submodule: 5164
 5174 ----for_each_remote_ref_submodule: int (const char *submodule, each_ref_fn fn, void *cb_data), <refs.c 2019>
 5175 -----for_each_ref_in_submodule: 5164
 5176 ----parse_long_opt: int (const char *opt, const char **argv, const char **optarg), <diff.c 3416>
 5177 -----skip_prefix: <>
 5178 -----die: 29
 5179 ----init_all_refs_cb: void (struct all_refs_cb cb, struct rev_info revs, unsigned flags), <revision.c 1220>
 5180 ----for_each_glob_ref: int (each_ref_fn fn, const char *pattern, void *cb_data), <refs.c 2084>
 5181 -----for_each_glob_ref_in: int (each_ref_fn fn, const char *pattern, const char *prefix, void *cb_data), <refs.c 2054>
 5182 ------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5183 ------strbuf_addstr: <>
 5184 ------has_glob_specials: <>
 5185 ------strbuf_addch: <>
 5186 ------for_each_ref: 1814
 5187 ------filter_refs: int (const char *refname, const unsigned char *sha1, int flags, void *data), <refs.c 1676>
 5188 -------wildmatch: 4090
 5189 ------strbuf_release: 63
 5190 ----handle_one_ref: 5117
 5191 ----add_ref_exclusion: void (struct string_list ref_excludes_p, const char *exclude), <revision.c 1236>
 5192 -----xcalloc: 1153
 5193 -----string_list_append: 768
 5194 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5195 ----for_each_glob_ref_in: 5181
 5196 ----add_reflogs_to_pending: void (struct rev_info revs, unsigned flags), <revision.c 1289>
 5197 -----for_each_reflog: int (each_ref_fn fn, void *cb_data), <refs.c 3492>
 5198 ------strbuf_init: 65
 5199 ------do_for_each_reflog: int (struct strbuf name, each_ref_fn fn, void *cb_data), <refs.c 3452>
 5200 -------opendir: <>
 5201 -------git_path: 1267
 5202 -------readdir: <>
 5203 -------ends_with: <>
 5204 -------strbuf_addstr: <>
 5205 -------stat: <>
 5206 -------S_ISDIR: <>
 5207 -------strbuf_addch: <>
 5208 -------do_for_each_reflog: 5199
 5209 -------read_ref_full: 3161
 5210 -------error: 12
 5211 -------strbuf_setlen: <>
 5212 -------closedir: <>
 5213 ------strbuf_release: 63
 5214 -----handle_one_reflog: int (const char *path, const unsigned char *sha1, int flag, void *cb_data), <revision.c 1280>
 5215 ------for_each_reflog_ent: 1794
 5216 ------handle_one_reflog_ent: int (unsigned char *osha1, unsigned char *nsha1, const char *email, unsigned long timestamp, int tz, const char *message, void *cb_data), <revision.c 1271>
 5217 -------handle_one_reflog_commit: void (unsigned char *sha1, void *cb_data), <revision.c 1253>
 5218 --------is_null_sha1: <>
 5219 --------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 5220 --------add_pending_object: 5127
 5221 --------warning: 552
 5222 ----add_index_objects_to_pending: void (struct rev_info revs, unsigned flags), <revision.c 1318>
 5223 -----read_cache: <>
 5224 -----S_ISGITLINK: <>
 5225 -----lookup_blob: struct blob (const unsigned char *sha1), <blob.c 6>
 5226 -----die: 29
 5227 -----add_pending_object_with_path: 5129
 5228 -----add_cache_tree: void (struct cache_tree it, struct rev_info revs, struct strbuf path), <revision.c 1297>
 5229 ------lookup_tree: struct tree (const unsigned char *sha1), <tree.c 188>
 5230 ------add_pending_object_with_path: 5129
 5231 ------strbuf_addf: 49
 5232 ------add_cache_tree: 5228
 5233 ------strbuf_setlen: <>
 5234 -----strbuf_release: 63
 5235 ----error: 12
 5236 ---die: 29
 5237 ---read_revisions_from_stdin: void (struct rev_info revs, struct cmdline_pathspec prune), <revision.c 1631>
 5238 ----strbuf_init: 65
 5239 ----strbuf_getwholeline: 565
 5240 ----die: 29
 5241 ----handle_revision_arg: int (const char *arg_, struct rev_info revs, int flags, unsigned revarg_opt), <revision.c 1472>
 5242 -----strstr: <>
 5243 -----get_sha1_committish: int (const char *name, unsigned char *sha1), <sha1_name.c 1198>
 5244 ------get_sha1_with_context: 1183
 5245 -----verify_non_filename: void (const char *prefix, const char *arg), <setup.c 214>
 5246 ------is_inside_work_tree: 1894
 5247 ------is_inside_git_dir: int (void), <setup.c 268>
 5248 -------is_inside_dir: 1895
 5249 -------get_git_dir: 986
 5250 ------check_filename: int (const char *prefix, const char *arg), <setup.c 134>
 5251 -------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5252 -------prefix_filename: 78
 5253 -------strlen: <>
 5254 -------lstat: <>
 5255 -------die_errno: 203
 5256 ------die: 29
 5257 -----parse_object: struct object (const unsigned char *sha1), <object.c 244>
 5258 -----die: 29
 5259 -----lookup_commit_reference: struct commit (const unsigned char *sha1), <commit.c 31>
 5260 -----get_merge_bases: struct commit_list (struct commit one, struct commit two), <commit.c 994>
 5261 -----add_rev_cmdline_list: void (struct rev_info revs, struct commit_list commit_list, int whence, unsigned flags), <revision.c 1173>
 5262 ------add_rev_cmdline: 5122
 5263 ------sha1_to_hex: 1194
 5264 -----add_pending_commit_list: void (struct rev_info revs, struct commit_list commit_list, unsigned int flags), <revision.c 1416>
 5265 ------add_pending_object: 5127
 5266 ------sha1_to_hex: 1194
 5267 -----free_commit_list: 1246
 5268 -----add_rev_cmdline: 5122
 5269 -----add_pending_object: 5127
 5270 -----add_parents_only: int (struct rev_info revs, const char *arg_, int flags), <revision.c 1344>
 5271 ------get_sha1_committish: 5243
 5272 ------get_reference: struct object (struct rev_info revs, const char *name, const unsigned char *sha1, unsigned int flags), <revision.c 243>
 5273 ------hashcpy: <>
 5274 ------add_rev_cmdline: 5122
 5275 ------add_pending_object: 5127
 5276 -----get_sha1_with_context: 1183
 5277 -----get_reference: struct object (struct rev_info revs, const char *name, const unsigned char *sha1, unsigned int flags), <revision.c 243>
 5278 -----add_pending_object_with_mode: 5128
 5279 ----read_pathspec_from_stdin: void (struct rev_info revs, struct strbuf sb, struct cmdline_pathspec prune), <revision.c 1619>
 5280 -----strbuf_getwholeline: 565
 5281 -----ALLOC_GROW: <>
 5282 -----xstrdup: 73
 5283 ----strbuf_release: 63
 5284 ---handle_revision_opt: int (struct rev_info revs, int argc, const char **argv, int *unkc, const char **unkv), <revision.c 1681>
 5285 ----strcmp: <>
 5286 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5287 ----parse_long_opt: 5176
 5288 ----atoi: <>
 5289 ----isdigit: <>
 5290 ----strtol_i: <>
 5291 ----die: 29
 5292 ----error: 12
 5293 ----approxidate: <>
 5294 ----init_reflog_walk: void (struct reflog_walk_info info), <reflog-walk.c 137>
 5295 -----xcalloc: 1153
 5296 ----load_ref_decorations: void (int flags), <log-tree.c 147>
 5297 -----for_each_ref: 1814
 5298 -----add_ref_decoration: int (const char *refname, const unsigned char *sha1, int flags, void *cb_data), <log-tree.c 90>
 5299 ------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5300 ------get_sha1_hex: 931
 5301 ------warning: 552
 5302 ------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 5303 ------add_name_decoration: void (enum decoration_type type, const char *name, struct object obj), <log-tree.c 76>
 5304 -------strlen: <>
 5305 -------xmalloc: 172
 5306 -------memcpy: <>
 5307 -------add_decoration: void * (struct decoration n, const struct object *obj, void *decoration), <decorate.c 57>
 5308 --------grow_decoration: void (struct decoration n), <decorate.c 35>
 5309 ---------xcalloc: 1153
 5310 ---------insert_decoration: void * (struct decoration n, const struct object *base, void *decoration), <decorate.c 14>
 5311 ----------hash_obj: unsigned int (const struct object *obj, unsigned int n), <decorate.c 9>
 5312 -----------sha1hash: <>
 5313 ---------free: <>
 5314 --------insert_decoration: 5310
 5315 ------strcmp: <>
 5316 ------prettify_refname: const char * (const char *name), <refs.c 2095>
 5317 -------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5318 -----head_ref: 3338
 5319 -----for_each_commit_graft: int (each_commit_graft_fn fn, void *cb_data), <commit.c 210>
 5320 -----add_graft_decoration: int (const struct commit_graft *graft, void *cb_data), <log-tree.c 138>
 5321 ------lookup_commit: struct commit (const unsigned char *sha1), <commit.c 48>
 5322 ------add_name_decoration: 5303
 5323 ----DIFF_OPT_SET: <>
 5324 ----get_commit_format: void (const char *arg, struct rev_info rev), <pretty.c 150>
 5325 -----skip_prefix: <>
 5326 -----save_user_format: void (struct rev_info rev, const char *cp, int is_tformat), <pretty.c 32>
 5327 ------free: <>
 5328 ------xstrdup: 73
 5329 -----strchr: <>
 5330 -----find_commit_format: struct cmt_fmt_map (const char *sought), <pretty.c 142>
 5331 -----die: 29
 5332 ----xstrdup: 73
 5333 ----strbuf_addstr: <>
 5334 ----expand_notes_ref: void (struct strbuf sb), <notes.c 1293>
 5335 -----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5336 -----strbuf_insert: void (struct strbuf sb, size_t pos, const void *data, size_t len), <strbuf.c 183>
 5337 ------strbuf_splice: 1278
 5338 ----string_list_append: 768
 5339 ----strbuf_detach: 190
 5340 ----string_list_clear: 544
 5341 ----graph_init: struct git_graph (struct rev_info opt), <graph.c 206>
 5342 ----strtoul: <>
 5343 ----parse_date_format: enum date_mode (const char *format), <date.c 758>
 5344 ----add_header_grep: void (struct rev_info revs, enum grep_header_field field, const char *pattern), <revision.c 1671>
 5345 -----append_header_grep_pattern: void (struct grep_opt opt, enum grep_header_field field, const char *pat), <grep.c 258>
 5346 ------create_grep_pat: struct grep_pat (const char *pat, size_t patlen, const char *origin, int no, enum grep_pat_token t, enum grep_header_field field), <grep.c 206>
 5347 ------strlen: <>
 5348 ------do_append_grep_pat: void (struct grep_pat tail, struct grep_pat p), <grep.c 221>
 5349 -------create_grep_pat: struct grep_pat (const char *pat, size_t patlen, const char *origin, int no, enum grep_pat_token t, enum grep_header_field field), <grep.c 206>
 5350 ----add_message_grep: void (struct rev_info revs, const char *pattern), <revision.c 1676>
 5351 -----add_grep: void (struct rev_info revs, const char *ptn, enum grep_pat_token what), <revision.c 1666>
 5352 ------append_grep_pattern: void (struct grep_opt opt, const char *pat, const char *origin, int no, enum grep_pat_token t), <grep.c 268>
 5353 -------append_grep_pat: void (struct grep_opt opt, const char *pat, size_t patlen, const char *origin, int no, enum grep_pat_token t), <grep.c 274>
 5354 --------create_grep_pat: struct grep_pat (const char *pat, size_t patlen, const char *origin, int no, enum grep_pat_token t, enum grep_header_field field), <grep.c 206>
 5355 --------do_append_grep_pat: 5348
 5356 -------strlen: <>
 5357 ----grep_set_pattern_type_option: void (enum grep_pattern_type pattern_type, struct grep_opt opt), <grep.c 174>
 5358 ----diff_opt_parse: int (struct diff_options options, const char **av, int ac), <diff.c 3612>
 5359 -----strcmp: <>
 5360 -----opt_arg: int (const char *arg, int arg_short, const char *arg_long, int *val), <diff.c 3354>
 5361 ------isdigit: <>
 5362 ------strtoul: <>
 5363 ------strchrnul: <>
 5364 ------strncmp: <>
 5365 -----enable_patch_output: void (int *fmt), <diff.c 3607>
 5366 -----parse_dirstat_opt: int (struct diff_options options, const char *params), <diff.c 3510>
 5367 ------parse_dirstat_params: int (struct diff_options options, const char *params_string, struct strbuf errmsg), <diff.c 76>
 5368 -------xstrdup: 73
 5369 -------string_list_split_in_place: 1427
 5370 -------strcmp: <>
 5371 -------DIFF_OPT_CLR: <>
 5372 -------DIFF_OPT_SET: <>
 5373 -------isdigit: <>
 5374 -------strtoul: <>
 5375 -------strbuf_addf: 49
 5376 -------string_list_clear: 544
 5377 -------free: <>
 5378 ------die: 29
 5379 ------strbuf_release: 63
 5380 -----skip_prefix: <>
 5381 -----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5382 -----stat_opt: int (struct diff_options options, const char **av), <diff.c 3437>
 5383 ------skip_prefix: <>
 5384 ------die: 29
 5385 ------strtoul: <>
 5386 -----diff_scoreopt_parse: int (const char *opt), <diff.c 3916>
 5387 ------skip_prefix: <>
 5388 ------parse_rename_score: int (const char **cp_p), <diff.c 3880>
 5389 -----error: 12
 5390 -----DIFF_OPT_SET: <>
 5391 -----DIFF_OPT_CLR: <>
 5392 -----DIFF_XDL_SET: <>
 5393 -----DIFF_XDL_CLR: <>
 5394 -----DIFF_WITH_ALG: <>
 5395 -----parse_long_opt: 5176
 5396 -----parse_algorithm_value: long (const char *value), <diff.c 149>
 5397 ------strcasecmp: <>
 5398 -----git_config_colorbool: int (const char *var, const char *value), <color.c 263>
 5399 ------strcasecmp: <>
 5400 ------git_config_bool: 601
 5401 -----die: 29
 5402 -----handle_ignore_submodules_arg: 5044
 5403 -----parse_submodule_opt: int (struct diff_options options, const char *value), <diff.c 3525>
 5404 ------parse_submodule_params: int (struct diff_options options, const char *value), <diff.c 129>
 5405 -------strcmp: <>
 5406 -------DIFF_OPT_SET: <>
 5407 -------DIFF_OPT_CLR: <>
 5408 ------die: 29
 5409 -----short_opt: inline int (char opt, const char **argv, const char **optarg), <diff.c 3400>
 5410 ------die: 29
 5411 -----strtoul: <>
 5412 -----parse_diff_filter_opt: int (const char *optarg, struct diff_options opt), <diff.c 3564>
 5413 ------prepare_filter_bits: void (void), <diff.c 3549>
 5414 ------ARRAY_SIZE: <>
 5415 ------toupper: <>
 5416 -----fopen: <>
 5417 -----die_errno: 203
 5418 ---exit: <>
 5419 ---handle_revision_arg: 5241
 5420 ---verify_filename: void (const char *prefix, const char *arg, int diagnose_misspelt_rev), <setup.c 198>
 5421 ----die: 29
 5422 ----check_filename: 5250
 5423 ----die_verify_filename: void NORETURN (const char *prefix, const char *arg, int diagnose_misspelt_rev), <setup.c 154>
 5424 -----die: 29
 5425 -----isalnum: <>
 5426 -----maybe_die_on_misspelt_object_name: void (const char *name, const char *prefix), <sha1_name.c 1463>
 5427 ------get_sha1_with_context_1: 1184
 5428 ---ALLOC_GROW: <>
 5429 ---parse_pathspec: void (struct pathspec pathspec, unsigned magic_mask, unsigned flags, const char *prefix, const char **argv), <pathspec.c 361>
 5430 ----memset: <>
 5431 ----die: 29
 5432 ----xcalloc: 1153
 5433 ----strlen: <>
 5434 ----xmalloc: 172
 5435 ----prefix_pathspec: unsigned (struct pathspec_item item, unsigned *p_short_magic, const char **raw, unsigned flags, const char *prefix, int prefixlen, const char *elt), <pathspec.c 104>
 5436 -----git_env_bool: 1034
 5437 -----die: 29
 5438 -----strcspn: <>
 5439 -----ARRAY_SIZE: <>
 5440 -----strlen: <>
 5441 -----strncmp: <>
 5442 -----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5443 -----strtol: <>
 5444 -----is_pathspec_magic: <>
 5445 -----xstrdup: 73
 5446 -----prefix_path_gently: 1903
 5447 -----prefix_short_magic: void (struct strbuf sb, int prefixlen, unsigned short_magic), <pathspec.c 77>
 5448 ------strbuf_addstr: <>
 5449 ------ARRAY_SIZE: <>
 5450 ------strbuf_addch: <>
 5451 ------strbuf_addf: 49
 5452 -----strbuf_add: 81
 5453 -----strbuf_addf: 49
 5454 -----strbuf_addstr: <>
 5455 -----strbuf_detach: 190
 5456 -----cache_name_pos: <>
 5457 -----S_ISGITLINK: <>
 5458 -----ce_namelen: <>
 5459 -----memcmp: <>
 5460 -----simple_length: int (const char *match), <dir.c 426>
 5461 ------is_glob_special: <>
 5462 -----no_wildcard: int (const char *string), <dir.c 438>
 5463 ------simple_length: 5460
 5464 -----assert: <>
 5465 ----unsupported_magic: void NORETURN (const char *pattern, unsigned magic, unsigned short_magic), <pathspec.c 330>
 5466 -----ARRAY_SIZE: <>
 5467 -----strbuf_addch: <>
 5468 -----strbuf_addf: 49
 5469 -----die: 29
 5470 ----has_symlink_leading_path: int (const char *name, int len), <symlinks.c 208>
 5471 -----threaded_has_symlink_leading_path: int (struct cache_def cache, const char *name, int len), <symlinks.c 200>
 5472 ------lstat_cache: int (struct cache_def cache, const char *name, int len, int track_flags, int prefix_len_stat_func), <symlinks.c 186>
 5473 -------lstat_cache_matchlen: int (struct cache_def cache, const char *name, int len, int *ret_flags, int track_flags, int prefix_len_stat_func), <symlinks.c 69>
 5474 --------reset_lstat_cache: inline void (struct cache_def cache), <symlinks.c 40>
 5475 ---------strbuf_reset: <>
 5476 --------longest_path_match: int (const char *name_a, int len_a, const char *name_b, int len_b, int *previous_slash), <symlinks.c 10>
 5477 --------strbuf_grow: 53
 5478 --------stat: <>
 5479 --------lstat: <>
 5480 --------S_ISDIR: <>
 5481 --------S_ISLNK: <>
 5482 ----match: 1296
 5483 ----qsort: <>
 5484 ----pathspec_item_cmp: int (const void *a_, const void *b_), <pathspec.c 321>
 5485 -----strcmp: <>
 5486 ---prepare_show_merge: void (struct rev_info revs), <revision.c 1428>
 5487 ----get_sha1: 1182
 5488 ----die: 29
 5489 ----lookup_commit_or_die: struct commit (const unsigned char *sha1, const char *ref_name), <commit.c 36>
 5490 ----add_pending_object: 5127
 5491 ----get_merge_bases: struct commit_list (struct commit one, struct commit two), <commit.c 994>
 5492 ----add_rev_cmdline_list: 5261
 5493 ----add_pending_commit_list: 5264
 5494 ----free_commit_list: 1246
 5495 ----read_cache: <>
 5496 ----ce_stage: <>
 5497 ----ce_path_match: <>
 5498 ----REALLOC_ARRAY: <>
 5499 ----ce_same_name: int (const struct cache_entry *a, const struct cache_entry *b), <read-cache.c 756>
 5500 -----ce_namelen: <>
 5501 -----memcmp: <>
 5502 ----free_pathspec: void (struct pathspec pathspec), <pathspec.c 491>
 5503 -----free: <>
 5504 ----parse_pathspec: 5429
 5505 ---get_sha1_with_context: 1183
 5506 ---get_reference: struct object (struct rev_info revs, const char *name, const unsigned char *sha1, unsigned int flags), <revision.c 243>
 5507 ---add_pending_object_with_mode: 5128
 5508 ---DIFF_OPT_TST: <>
 5509 ---copy_pathspec: void (struct pathspec dst, const struct pathspec *src), <pathspec.c 483>
 5510 ----xmalloc: 172
 5511 ----memcpy: <>
 5512 ---diff_setup_done: void (struct diff_options options), <diff.c 3245>
 5513 ----die: 29
 5514 ----DIFF_XDL_TST: <>
 5515 ----DIFF_OPT_SET: <>
 5516 ----DIFF_OPT_CLR: <>
 5517 ----DIFF_OPT_TST: <>
 5518 ----strlen: <>
 5519 ----read_cache: <>
 5520 ---grep_commit_pattern_type: void (enum grep_pattern_type pattern_type, struct grep_opt opt), <grep.c 164>
 5521 ----grep_set_pattern_type_option: 5357
 5522 ---compile_grep_patterns: void (struct grep_opt opt), <grep.c 741>
 5523 ----compile_grep_patterns_real: void (struct grep_opt opt), <grep.c 698>
 5524 -----prep_header_patterns: struct grep_expr (struct grep_opt opt), <grep.c 634>
 5525 -----compile_regexp: void (struct grep_pat p, struct grep_opt opt), <grep.c 399>
 5526 ------is_fixed: int (const char *s, size_t len), <grep.c 381>
 5527 -------memchr: <>
 5528 -------is_regex_special: <>
 5529 ------kwsalloc: kwset_t (unsigned char const *trans), <kwset.c 89>
 5530 -------xmalloc: 172
 5531 -------obstack_init: <>
 5532 -------obstack_alloc: <>
 5533 -------kwsfree: void (kwset_t kws), <kwset.c 764>
 5534 --------obstack_free: void (struct obstack h, void *obj), <compat/obstack.c 338>
 5535 --------free: <>
 5536 ------kwsincr: const char * (kwset_t kws, char const *text, size_t len), <kwset.c 126>
 5537 -------U: <>
 5538 -------obstack_alloc: <>
 5539 -------obstack_free: void (struct obstack h, void *obj), <compat/obstack.c 338>
 5540 -------abort: <>
 5541 ------kwsprep: const char * (kwset_t kws), <kwset.c 379>
 5542 -------memset: <>
 5543 -------obstack_alloc: <>
 5544 -------U: <>
 5545 -------enqueue: void (struct tree tree, struct trie last), <kwset.c 286>
 5546 --------enqueue: 5545
 5547 -------treedelta: void (register struct tree const *tree, register unsigned int depth, unsigned char delta[]), <kwset.c 334>
 5548 --------treedelta: 5547
 5549 -------treefails: void (register struct tree const *tree, struct trie fail, struct trie recourse), <kwset.c 299>
 5550 --------treefails: 5549
 5551 -------hasevery: int (register struct tree const *a, register struct tree const *b), <kwset.c 348>
 5552 --------hasevery: 5551
 5553 -------treenext: void (struct tree tree, struct trie next[]), <kwset.c 367>
 5554 --------treenext: 5553
 5555 -------memcpy: <>
 5556 ------compile_pcre_regexp: void (struct grep_pat p, const struct grep_opt *opt), <grep.c 365>
 5557 -------error: 12
 5558 -------pcre_compile: <>
 5559 -------compile_regexp_failed: NORETURN void (const struct grep_pat *p, const char *error), <grep.c 303>
 5560 --------sprintf: <>
 5561 --------die: 29
 5562 -------pcre_study: <>
 5563 -------die: 29
 5564 ------regcomp: <>
 5565 ------regerror: <>
 5566 ------regfree: <>
 5567 ------compile_regexp_failed: 5559
 5568 -----compile_pattern_expr: struct grep_expr (struct grep_pat list), <grep.c 532>
 5569 -----die: 29
 5570 -----grep_splice_or: struct grep_expr (struct grep_expr x, struct grep_expr y), <grep.c 682>
 5571 -----grep_or_expr: struct grep_expr (struct grep_expr left, struct grep_expr right), <grep.c 625>
 5572 ----dump_grep_expression: void (struct grep_opt opt), <grep.c 608>
 5573 -----fprintf: <>
 5574 -----dump_grep_expression_1: void (struct grep_expr x, int in), <grep.c 575>
 5575 ------indent: void (int in), <grep.c 537>
 5576 -------fputc: <>
 5577 ------fprintf: <>
 5578 ------dump_grep_pat: void (struct grep_pat p), <grep.c 543>
 5579 -------fprintf: <>
 5580 -------fputc: <>
 5581 ------dump_grep_expression_1: 5574
 5582 -----fflush: <>
 5583 --prepare_revision_walk: int (struct rev_info revs), <revision.c 2731>
 5584 ---memcpy: <>
 5585 ---handle_commit: struct commit (struct rev_info revs, struct object_array_entry entry), <revision.c 266>
 5586 ---commit_list_append: struct commit_list (struct commit commit, struct commit_list next), <commit.c 1615>
 5587 ---object_array_clear: void (struct object_array array), <object.c 376>
 5588 ----object_array_release_entry: void (struct object_array_entry ent), <object.c 351>
 5589 -----free: <>
 5590 ----free: <>
 5591 ---limiting_can_increase_treesame: inline int (const struct rev_info *revs), <revision.c 621>
 5592 ---commit_list_sort_by_date: 1883
 5593 ---limit_list: int (struct rev_info revs), <revision.c 1073>
 5594 ----collect_bottom_commits: struct commit_list (struct commit_list list), <revision.c 1047>
 5595 ----die: 29
 5596 ----show: void (int *v), <test-prio-queue.c 10>
 5597 -----printf: <>
 5598 -----free: <>
 5599 ----free: <>
 5600 ----add_parents_to_list: int (struct rev_info revs, struct commit commit, struct commit_list list, struct commit_list cache_ptr), <revision.c 777>
 5601 -----parse_commit: 1191
 5602 -----mark_parents_uninteresting: void (struct commit commit), <revision.c 144>
 5603 ------commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 5604 ------free: <>
 5605 ------has_sha1_file: 1861
 5606 -----commit_list_insert_by_date_cached: void (struct commit p, struct commit_list head, struct commit_list cached_base, struct commit_list cache), <revision.c 763>
 5607 ------commit_list_insert_by_date: struct commit_list (struct commit item, struct commit_list list), <commit.c 448>
 5608 -----try_to_simplify_commit: void (struct rev_info revs, struct commit commit), <revision.c 636>
 5609 ------rev_same_tree_as_empty: int (struct rev_info revs, struct commit commit), <revision.c 508>
 5610 -------DIFF_OPT_CLR: <>
 5611 -------diff_tree_sha1: int (const unsigned char *old, const unsigned char *new, const char *base_str, struct diff_options opt), <tree-diff.c 687>
 5612 --------strbuf_init: 65
 5613 --------strbuf_addstr: <>
 5614 --------ll_diff_tree_sha1: int (const unsigned char *old, const unsigned char *new, struct strbuf base, struct diff_options opt), <tree-diff.c 667>
 5615 ---------emit_diff_first_parent_only: int (struct diff_options opt, struct combine_diff_path p), <tree-diff.c 63>
 5616 ---------diff_tree_paths: struct combine_diff_path (struct combine_diff_path p, const unsigned char *sha1, const unsigned char **parents_sha1, int nparent, struct strbuf base, struct diff_options opt), <tree-diff.c 540>
 5617 ---------free: <>
 5618 --------DIFF_OPT_TST: <>
 5619 --------diff_might_be_rename: inline int (void), <tree-diff.c 564>
 5620 ---------DIFF_FILE_VALID: <>
 5621 --------try_to_follow_renames: void (const unsigned char *old, const unsigned char *new, struct strbuf base, struct diff_options opt), <tree-diff.c 570>
 5622 ---------GUARD_PATHSPEC: <>
 5623 ---------die: 29
 5624 ---------diff_setup: 5035
 5625 ---------DIFF_OPT_SET: <>
 5626 ---------match: 1296
 5627 ---------diff_setup_done: 5512
 5628 ---------ll_diff_tree_sha1: 5614
 5629 ---------diffcore_std: void (struct diff_options options), <diff.c 4765>
 5630 ----------diffcore_skip_stat_unmatch: void (struct diff_options diffopt), <diff.c 4721>
 5631 -----------DIFF_QUEUE_CLEAR: <>
 5632 -----------diff_filespec_check_stat_unmatch: 5057
 5633 -----------diff_q: void (struct diff_queue_struct queue, struct diff_filepair dp), <diff.c 3959>
 5634 ------------ALLOC_GROW: <>
 5635 -----------DIFF_OPT_TST: <>
 5636 -----------diff_free_filepair: void (struct diff_filepair p), <diff.c 3977>
 5637 ------------free_filespec: void (struct diff_filespec spec), <diff.c 2569>
 5638 -------------diff_free_filespec_data: void (struct diff_filespec s), <diff.c 2797>
 5639 --------------diff_free_filespec_blob: void (struct diff_filespec s), <diff.c 2784>
 5640 ---------------free: <>
 5641 ---------------munmap: <>
 5642 --------------free: <>
 5643 -------------free: <>
 5644 ------------free: <>
 5645 -----------free: <>
 5646 ----------diffcore_break: void (int break_score), <diffcore-break.c 118>
 5647 -----------DIFF_QUEUE_CLEAR: <>
 5648 -----------DIFF_FILE_VALID: <>
 5649 -----------object_type: <>
 5650 -----------strcmp: <>
 5651 -----------should_break: int (struct diff_filespec src, struct diff_filespec dst, int break_score, int *merge_score_p), <diffcore-break.c 8>
 5652 ------------max_size: inline size_t (size_t a, size_t b), <ewah/ewah_bitmap.c 29>
 5653 ------------S_ISREG: <>
 5654 ------------hashcmp: <>
 5655 ------------diff_populate_filespec: 5059
 5656 ------------diffcore_count_changes: int (struct diff_filespec src, struct diff_filespec dst, void **src_count_p, void **dst_count_p, unsigned long delta_limit, unsigned long *src_copied, unsigned long *literal_added), <diffcore-delta.c 166>
 5657 -------------hash_chars: struct spanhash_top (struct diff_filespec one), <diffcore-delta.c 123>
 5658 -------------free: <>
 5659 -----------alloc_filespec: struct diff_filespec (const char *path), <diff.c 2556>
 5660 -----------diff_queue: struct diff_filepair (struct diff_queue_struct queue, struct diff_filespec one, struct diff_filespec two), <diff.c 3965>
 5661 -----------diff_free_filespec_blob: 5639
 5662 -----------free: <>
 5663 -----------diff_free_filespec_data: 5638
 5664 -----------diff_q: 5633
 5665 ----------diffcore_rename: void (struct diff_options options), <diffcore-rename.c 444>
 5666 -----------DIFF_FILE_VALID: <>
 5667 -----------strcmp: <>
 5668 -----------DIFF_OPT_TST: <>
 5669 -----------is_empty_blob_sha1: <>
 5670 -----------add_rename_dst: int (struct diff_filespec two), <diffcore-rename.c 48>
 5671 ------------find_rename_dst: int (struct diff_filespec two), <diffcore-rename.c 18>
 5672 -------------strcmp: <>
 5673 ------------ALLOC_GROW: <>
 5674 ------------memmove: <>
 5675 ------------alloc_filespec: struct diff_filespec (const char *path), <diff.c 2556>
 5676 ------------fill_filespec: 5053
 5677 -----------warning: 552
 5678 -----------cleanup: 3440
 5679 -----------DIFF_PAIR_UNMERGED: <>
 5680 -----------register_rename_src: struct diff_rename_src (struct diff_filepair p), <diffcore-rename.c 75>
 5681 -----------find_exact_renames: int (struct diff_options options), <diffcore-rename.c 338>
 5682 ------------hashmap_init: 1150
 5683 ------------insert_file_table: void (struct hashmap table, int index, struct diff_filespec filespec), <diffcore-rename.c 320>
 5684 -------------xmalloc: 172
 5685 -------------hashmap_entry_init: <>
 5686 -------------hash_filespec: unsigned int (struct diff_filespec filespec), <diffcore-rename.c 261>
 5687 --------------diff_populate_filespec: 5059
 5688 --------------hash_sha1_file: 4131
 5689 --------------sha1hash: <>
 5690 -------------hashmap_add: 2003
 5691 ------------find_identical_files: int (struct hashmap srcs, int dst_index, struct diff_options options), <diffcore-rename.c 271>
 5692 -------------hashmap_get_from_hash: <>
 5693 -------------hash_filespec: 5686
 5694 -------------hashmap_get_next: void * (const struct hashmap *map, const void *entry), <hashmap.c 158>
 5695 --------------entry_equals: inline int (const struct hashmap *map, const struct hashmap_entry *e1, const struct hashmap_entry *e2, const void *keydata), <hashmap.c 77>
 5696 -------------hashcmp: <>
 5697 -------------S_ISREG: <>
 5698 -------------basename_same: int (struct diff_filespec src, struct diff_filespec dst), <diffcore-rename.c 107>
 5699 --------------strlen: <>
 5700 -------------record_rename_pair: void (int dst_index, int src_index, int score), <diffcore-rename.c 211>
 5701 --------------die: 29
 5702 --------------diff_queue: struct diff_filepair (struct diff_queue_struct queue, struct diff_filespec one, struct diff_filespec two), <diff.c 3965>
 5703 --------------strcmp: <>
 5704 ------------hashmap_free: 2145
 5705 -----------too_many_rename_candidates: int (int num_create, struct diff_options options), <diffcore-rename.c 380>
 5706 ------------DIFF_OPT_TST: <>
 5707 ------------diff_unmodified_pair: int (struct diff_filepair p), <diff.c 4042>
 5708 -------------DIFF_PAIR_UNMERGED: <>
 5709 -------------DIFF_FILE_VALID: <>
 5710 -------------DIFF_PAIR_MODE_CHANGED: <>
 5711 -------------strcmp: <>
 5712 -------------hashcmp: <>
 5713 -----------start_progress_delay: struct progress (const char *title, unsigned total, unsigned percent_treshold, unsigned delay), <progress.c 197>
 5714 -----------xcalloc: 1153
 5715 -----------diff_unmodified_pair: 5707
 5716 -----------estimate_similarity: int (struct diff_filespec src, struct diff_filespec dst, int minimum_score), <diffcore-rename.c 129>
 5717 ------------max_size: inline size_t (size_t a, size_t b), <ewah/ewah_bitmap.c 29>
 5718 ------------S_ISREG: <>
 5719 ------------diff_populate_filespec: 5059
 5720 ------------diffcore_count_changes: 5656
 5721 -----------basename_same: 5698
 5722 -----------record_if_better: void (struct diff_score m[], struct diff_score o), <diffcore-rename.c 359>
 5723 ------------score_compare: int (const void *a_, const void *b_), <diffcore-rename.c 239>
 5724 -----------diff_free_filespec_blob: 5639
 5725 -----------display_progress: int (struct progress progress, unsigned n), <progress.c 192>
 5726 ------------display: 2374
 5727 -----------stop_progress: void (struct progress p_progress), <progress.c 223>
 5728 ------------stop_progress_msg: void (struct progress p_progress, const char *msg), <progress.c 228>
 5729 -------------strlen: <>
 5730 -------------xmalloc: 172
 5731 -------------throughput_string: 2368
 5732 -------------strncpy: <>
 5733 -------------strbuf_release: 63
 5734 -------------sprintf: <>
 5735 -------------display: 2374
 5736 -------------free: <>
 5737 -------------clear_progress_signal: 2375
 5738 -----------qsort: <>
 5739 -----------score_compare: 5723
 5740 -----------find_renames: int (struct diff_score mx, int dst_cnt, int minimum_score, int copies), <diffcore-rename.c 423>
 5741 ------------record_rename_pair: 5700
 5742 -----------free: <>
 5743 -----------DIFF_QUEUE_CLEAR: <>
 5744 -----------diff_q: 5633
 5745 -----------locate_rename_dst: struct diff_rename_dst (struct diff_filespec two), <diffcore-rename.c 39>
 5746 -----------DIFF_PAIR_BROKEN: <>
 5747 -----------diff_free_filepair: 5636
 5748 -----------diff_debug_queue: void (const char *msg, struct diff_queue_struct q), <diff.c 4145>
 5749 ------------fprintf: <>
 5750 ------------diff_debug_filepair: void (const struct diff_filepair *p, int i), <diff.c 4136>
 5751 -------------diff_debug_filespec: void (struct diff_filespec s, int x, const char *one), <diff.c 4123>
 5752 --------------fprintf: <>
 5753 --------------DIFF_FILE_VALID: <>
 5754 --------------sha1_to_hex: 1194
 5755 -------------fprintf: <>
 5756 -----------free_filespec: 5637
 5757 ----------diffcore_merge_broken: void (void), <diffcore-break.c 262>
 5758 -----------DIFF_QUEUE_CLEAR: <>
 5759 -----------strcmp: <>
 5760 -----------merge_broken: void (struct diff_filepair p, struct diff_filepair pp, struct diff_queue_struct outq), <diffcore-break.c 227>
 5761 ------------DIFF_FILE_VALID: <>
 5762 ------------die: 29
 5763 ------------diff_queue: struct diff_filepair (struct diff_queue_struct queue, struct diff_filespec one, struct diff_filespec two), <diff.c 3965>
 5764 ------------diff_free_filespec_data: 5638
 5765 ------------free: <>
 5766 -----------diff_q: 5633
 5767 -----------free: <>
 5768 ----------diffcore_pickaxe: void (struct diff_options o), <diffcore-pickaxe.c 201>
 5769 -----------DIFF_OPT_TST: <>
 5770 -----------regcomp: <>
 5771 -----------regerror: <>
 5772 -----------regfree: <>
 5773 -----------die: 29
 5774 -----------kwsalloc: 5529
 5775 -----------kwsincr: 5536
 5776 -----------strlen: <>
 5777 -----------kwsprep: 5541
 5778 -----------pickaxe: void (struct diff_queue_struct q, struct diff_options o, regex_t *regexp, kwset_t kws, pickaxe_fn fn), <diffcore-pickaxe.c 163>
 5779 ------------DIFF_QUEUE_CLEAR: <>
 5780 ------------pickaxe_match: int (struct diff_filepair p, struct diff_options o, regex_t *regexp, kwset_t kws, pickaxe_fn fn), <diffcore-pickaxe.c 116>
 5781 -------------DIFF_FILE_VALID: <>
 5782 -------------DIFF_OPT_TST: <>
 5783 -------------get_textconv: struct userdiff_driver (struct diff_filespec one), <diff.c 2214>
 5784 -------------diff_unmodified_pair: 5707
 5785 -------------fill_textconv: size_t (struct userdiff_driver driver, struct diff_filespec df, char **outbuf), <diff.c 4987>
 5786 --------------DIFF_FILE_VALID: <>
 5787 --------------diff_populate_filespec: 5059
 5788 --------------die: 29
 5789 --------------notes_cache_get: char * (struct notes_cache c, unsigned char key_sha1[20], size_t *outsize), <notes-cache.c 69>
 5790 ---------------get_note: const unsigned char * (struct notes_tree t, const unsigned char *object_sha1), <notes.c 1107>
 5791 ----------------assert: <>
 5792 ----------------note_tree_find: struct leaf_node (struct notes_tree t, struct int_node tree, unsigned char n, const unsigned char *key_sha1), <notes.c 139>
 5793 ---------------read_sha1_file: <>
 5794 --------------run_textconv: char * (const char *pgm, struct diff_filespec spec, size_t *outsize), <diff.c 4950>
 5795 ---------------prepare_temp_file: struct diff_tempfile (const char *name, struct diff_filespec one), <diff.c 2841>
 5796 ---------------start_command: 255
 5797 ---------------remove_tempfile: void (void), <diff.c 569>
 5798 ----------------ARRAY_SIZE: <>
 5799 ----------------unlink_or_warn: 658
 5800 ---------------strbuf_read: 197
 5801 ---------------error: 12
 5802 ---------------close: <>
 5803 ---------------finish_command: 2027
 5804 ---------------strbuf_release: 63
 5805 ---------------strbuf_detach: 190
 5806 --------------notes_cache_put: int (struct notes_cache c, unsigned char key_sha1[20], const char *data, size_t size), <notes-cache.c 86>
 5807 ---------------write_sha1_file: int (const void *buf, unsigned long len, const char *type, unsigned char *returnsha1), <sha1_file.c 3005>
 5808 ----------------write_sha1_file_prepare: 4132
 5809 ----------------hashcpy: <>
 5810 ----------------freshen_loose_object: int (const unsigned char *sha1), <sha1_file.c 2994>
 5811 -----------------check_and_freshen: 1864
 5812 ----------------freshen_packed_object: int (const unsigned char *sha1), <sha1_file.c 2999>
 5813 -----------------find_pack_entry: 1482
 5814 -----------------freshen_file: 1868
 5815 ----------------write_loose_object: int (const unsigned char *sha1, char *hdr, int hdrlen, const void *buf, unsigned long len, time_t mtime), <sha1_file.c 2926>
 5816 -----------------sha1_file_name: 1583
 5817 -----------------create_tmpfile: int (char *buffer, size_t bufsiz, const char *filename), <sha1_file.c 2899>
 5818 ------------------directory_size: inline int (const char *filename), <sha1_file.c 2884>
 5819 -------------------strrchr: <>
 5820 ------------------memcpy: <>
 5821 ------------------strcpy: <>
 5822 ------------------git_mkstemp_mode: 2331
 5823 ------------------mkdir: <>
 5824 ------------------adjust_shared_perm: 702
 5825 -----------------error: 12
 5826 -----------------get_object_directory: 1423
 5827 -----------------strerror: <>
 5828 -----------------git_deflate_init: 2774
 5829 -----------------git_SHA1_Init: <>
 5830 -----------------git_deflate: 2784
 5831 -----------------git_SHA1_Update: <>
 5832 -----------------write_buffer: int (int fd, const void *buf, size_t len), <sha1_file.c 2858>
 5833 ------------------write_in_full: 240
 5834 ------------------error: 12
 5835 ------------------strerror: <>
 5836 -----------------die: 29
 5837 -----------------sha1_to_hex: 1194
 5838 -----------------git_deflate_end_gently: int (git_zstream *strm), <zlib.c 226>
 5839 ------------------zlib_pre_call: 1606
 5840 ------------------deflateEnd: <>
 5841 ------------------zlib_post_call: 1609
 5842 -----------------git_SHA1_Final: <>
 5843 -----------------hashcmp: <>
 5844 -----------------close_sha1_file: void (int fd), <sha1_file.c 2875>
 5845 ------------------fsync_or_die: 2446
 5846 ------------------close: <>
 5847 ------------------die_errno: 203
 5848 -----------------utime: <>
 5849 -----------------warning: 552
 5850 -----------------move_temp_to_file: 2485
 5851 ---------------add_note: int (struct notes_tree t, const unsigned char *object_sha1, const unsigned char *note_sha1, combine_notes_fn combine_notes), <notes.c 1074>
 5852 ----------------assert: <>
 5853 ----------------xmalloc: 172
 5854 ----------------hashcpy: <>
 5855 ----------------note_tree_insert: int (struct notes_tree t, struct int_node tree, unsigned char n, struct leaf_node entry, unsigned char type, combine_notes_fn combine_notes), <notes.c 241>
 5856 -----------------note_tree_search: void ** (struct notes_tree t, struct int_node tree, unsigned char *n, const unsigned char *key_sha1), <notes.c 94>
 5857 ------------------GET_PTR_TYPE: <>
 5858 ------------------CLR_PTR_TYPE: <>
 5859 ------------------SUBTREE_SHA1_PREFIXCMP: <>
 5860 ------------------load_subtree: void (struct notes_tree t, struct leaf_node subtree, struct int_node node, unsigned int n), <notes.c 410>
 5861 -------------------fill_tree_descriptor: void * (struct tree_desc desc, const unsigned char *sha1), <tree-walk.c 52>
 5862 --------------------read_object_with_reference: 1942
 5863 --------------------die: 29
 5864 --------------------sha1_to_hex: 1194
 5865 --------------------init_tree_desc: 1952
 5866 -------------------die: 29
 5867 -------------------sha1_to_hex: 1194
 5868 -------------------assert: <>
 5869 -------------------memcpy: <>
 5870 -------------------tree_entry: 2893
 5871 -------------------strlen: <>
 5872 -------------------get_sha1_hex_segment: int (const char *hex, unsigned int hex_len, unsigned char *sha1, unsigned int sha1_len), <notes.c 342>
 5873 --------------------hexval: <>
 5874 -------------------xcalloc: 1153
 5875 -------------------hashcpy: <>
 5876 -------------------S_ISDIR: <>
 5877 -------------------note_tree_insert: 5855
 5878 -------------------combine_notes_concatenate: int (unsigned char *cur_sha1, const unsigned char *new_sha1), <notes.c 794>
 5879 --------------------is_null_sha1: <>
 5880 --------------------read_sha1_file: <>
 5881 --------------------free: <>
 5882 --------------------hashcpy: <>
 5883 --------------------xmalloc: 172
 5884 --------------------memcpy: <>
 5885 --------------------write_sha1_file: 5807
 5886 -------------------strcpy: <>
 5887 -------------------add_non_note: void (struct notes_tree t, const char *path, unsigned int mode, const unsigned char *sha1), <notes.c 365>
 5888 --------------------xmalloc: 172
 5889 --------------------xstrdup: 73
 5890 --------------------hashcpy: <>
 5891 --------------------non_note_cmp: int (const struct non_note *a, const struct non_note *b), <notes.c 360>
 5892 ---------------------strcmp: <>
 5893 --------------------assert: <>
 5894 --------------------strcmp: <>
 5895 --------------------free: <>
 5896 -------------------free: <>
 5897 ------------------free: <>
 5898 ------------------note_tree_search: 5856
 5899 ------------------GET_NIBBLE: <>
 5900 -----------------assert: <>
 5901 -----------------GET_PTR_TYPE: <>
 5902 -----------------CLR_PTR_TYPE: <>
 5903 -----------------is_null_sha1: <>
 5904 -----------------free: <>
 5905 -----------------SET_PTR_TYPE: <>
 5906 -----------------hashcmp: <>
 5907 -----------------note_tree_remove: void (struct notes_tree t, struct int_node tree, unsigned char n, struct leaf_node entry), <notes.c 190>
 5908 ------------------note_tree_search: 5856
 5909 ------------------assert: <>
 5910 ------------------GET_PTR_TYPE: <>
 5911 ------------------CLR_PTR_TYPE: <>
 5912 ------------------hashcmp: <>
 5913 ------------------hashcpy: <>
 5914 ------------------free: <>
 5915 ------------------SET_PTR_TYPE: <>
 5916 ------------------GET_NIBBLE: <>
 5917 ------------------note_tree_consolidate: int (struct int_node tree, struct int_node parent, unsigned char index), <notes.c 159>
 5918 -------------------assert: <>
 5919 -------------------CLR_PTR_TYPE: <>
 5920 -------------------GET_PTR_TYPE: <>
 5921 -------------------free: <>
 5922 -----------------SUBTREE_SHA1_PREFIXCMP: <>
 5923 -----------------load_subtree: 5860
 5924 -----------------note_tree_insert: 5855
 5925 -----------------xcalloc: 1153
 5926 --------------notes_cache_write: int (struct notes_cache c), <notes-cache.c 47>
 5927 ---------------write_notes_tree: int (struct notes_tree t, unsigned char *result), <notes.c 1128>
 5928 ----------------assert: <>
 5929 ----------------strbuf_init: 65
 5930 ----------------for_each_note: int (struct notes_tree t, int flags, each_note_fn fn, void *cb_data), <notes.c 1119>
 5931 -----------------assert: <>
 5932 -----------------for_each_note_helper: int (struct notes_tree t, struct int_node tree, unsigned char n, unsigned char fanout, int flags, each_note_fn fn, void *cb_data), <notes.c 556>
 5933 ------------------determine_fanout: unsigned char (struct int_node tree, unsigned char n, unsigned char fanout), <notes.c 515>
 5934 -------------------GET_PTR_TYPE: <>
 5935 ------------------GET_PTR_TYPE: <>
 5936 ------------------for_each_note_helper: 5932
 5937 ------------------CLR_PTR_TYPE: <>
 5938 ------------------assert: <>
 5939 ------------------construct_path_with_fanout: void (const unsigned char *sha1, unsigned char fanout, char *path), <notes.c 541>
 5940 -------------------sha1_to_hex: 1194
 5941 -------------------assert: <>
 5942 -------------------strcpy: <>
 5943 ------------------load_subtree: 5860
 5944 ------------------free: <>
 5945 ----------------write_each_note: int (const unsigned char *object_sha1, const unsigned char *note_sha1, char *note_path, void *cb_data), <notes.c 749>
 5946 -----------------strlen: <>
 5947 -----------------assert: <>
 5948 -----------------write_each_non_note_until: int (const char *note_path, struct write_each_note_data d), <notes.c 729>
 5949 ------------------strcmp: <>
 5950 ------------------write_each_note_helper: int (struct tree_write_stack tws, const char *path, unsigned int mode, const unsigned char *sha1), <notes.c 687>
 5951 -------------------strlen: <>
 5952 -------------------matches_tree_write_stack: inline int (struct tree_write_stack tws, const char *full_path), <notes.c 634>
 5953 -------------------tree_write_stack_finish_subtree: int (struct tree_write_stack tws), <notes.c 666>
 5954 --------------------tree_write_stack_finish_subtree: 5953
 5955 --------------------write_sha1_file: 5807
 5956 --------------------strbuf_release: 63
 5957 --------------------free: <>
 5958 --------------------write_tree_entry: void (struct strbuf buf, unsigned int mode, const char *path, unsigned int path_len, const unsigned char *sha1), <notes.c 642>
 5959 ---------------------strbuf_addf: 49
 5960 ---------------------strbuf_add: 81
 5961 -------------------tree_write_stack_init_subtree: void (struct tree_write_stack tws, const char *path), <notes.c 650>
 5962 --------------------assert: <>
 5963 --------------------xmalloc: 172
 5964 --------------------strbuf_init: 65
 5965 -------------------assert: <>
 5966 -------------------memchr: <>
 5967 -------------------write_tree_entry: 5958
 5968 -----------------write_each_note_helper: 5950
 5969 ----------------write_each_non_note_until: 5948
 5970 ----------------tree_write_stack_finish_subtree: 5953
 5971 ----------------write_sha1_file: 5807
 5972 ----------------strbuf_release: 63
 5973 ---------------commit_tree: int (const char *msg, size_t msg_len, const unsigned char *tree, struct commit_list parents, unsigned char *ret, const char *author, const char *sign_commit), <commit.c 1384>
 5974 ----------------append_merge_tag_headers: void (struct commit_list parents, struct commit_extra_header tail), <commit.c 1261>
 5975 -----------------handle_signed_tag: void (struct commit parent, struct commit_extra_header tail), <commit.c 1190>
 5976 ------------------merge_remote_util: <>
 5977 ------------------read_sha1_file: <>
 5978 ------------------parse_signature: size_t (const char *buf, unsigned long size), <gpg-interface.c 69>
 5979 -------------------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 5980 -------------------memchr: <>
 5981 ------------------xcalloc: 1153
 5982 ------------------xstrdup: 73
 5983 ------------------free: <>
 5984 ----------------commit_tree_extended: int (const char *msg, size_t msg_len, const unsigned char *tree, struct commit_list parents, unsigned char *ret, const char *author, const char *sign_commit, struct commit_extra_header extra), <commit.c 1514>
 5985 -----------------assert_sha1_type: void (const unsigned char *sha1, enum object_type expect), <sha1_file.c 3295>
 5986 ------------------sha1_object_info: 1477
 5987 ------------------die: 29
 5988 ------------------sha1_to_hex: 1194
 5989 ------------------typename: 1237
 5990 -----------------memchr: <>
 5991 -----------------error: 12
 5992 -----------------is_encoding_utf8: int (const char *name), <utf8.c 403>
 5993 ------------------strcasecmp: <>
 5994 -----------------strbuf_init: 65
 5995 -----------------strbuf_addf: 49
 5996 -----------------sha1_to_hex: 1194
 5997 -----------------free: <>
 5998 -----------------git_author_info: const char * (int flag), <ident.c 348>
 5999 ------------------getenv: <>
 6000 ------------------fmt_ident: 3287
 6001 -----------------git_committer_info: 3285
 6002 -----------------add_extra_header: void (struct strbuf buffer, struct commit_extra_header extra), <commit.c 1271>
 6003 ------------------strbuf_addstr: <>
 6004 ------------------strbuf_add_lines: void (struct strbuf out, const char *prefix, const char *buf, size_t size), <strbuf.c 499>
 6005 -------------------add_lines: void (struct strbuf out, const char *prefix1, const char *prefix2, const char *buf, size_t size), <strbuf.c 222>
 6006 --------------------memchr: <>
 6007 --------------------strbuf_addstr: <>
 6008 --------------------strbuf_add: 81
 6009 --------------------strbuf_complete_line: <>
 6010 ------------------strbuf_addch: <>
 6011 -----------------strbuf_addch: <>
 6012 -----------------strbuf_add: 81
 6013 -----------------verify_utf8: int (struct strbuf buf), <commit.c 1483>
 6014 ------------------find_invalid_utf8: int (const char *buf, int len), <commit.c 1399>
 6015 ------------------strbuf_remove: 4576
 6016 ------------------strbuf_insert: 5336
 6017 -----------------fprintf: <>
 6018 -----------------do_sign_commit: int (struct strbuf buf, const char *keyid), <commit.c 1083>
 6019 ------------------strstr: <>
 6020 ------------------get_signing_key: const char * (void), <gpg-interface.c 100>
 6021 -------------------git_committer_info: 3285
 6022 ------------------sign_buffer: int (struct strbuf buffer, struct strbuf signature, const char *signing_key), <gpg-interface.c 113>
 6023 -------------------start_command: 255
 6024 -------------------error: 12
 6025 -------------------sigchain_push: 399
 6026 -------------------write_in_full: 240
 6027 -------------------close: <>
 6028 -------------------finish_command: 2027
 6029 -------------------strbuf_read: 197
 6030 -------------------sigchain_pop: 406
 6031 -------------------strbuf_setlen: <>
 6032 ------------------strbuf_release: 63
 6033 ------------------strchrnul: <>
 6034 ------------------strbuf_insert: 5336
 6035 -----------------write_sha1_file: 5807
 6036 -----------------strbuf_release: 63
 6037 ----------------free_commit_extra_headers: void (struct commit_extra_header extra), <commit.c 1373>
 6038 -----------------free: <>
 6039 ---------------strlen: <>
 6040 ---------------update_ref: int (const char *msg, const char *refname, const unsigned char *new_sha1, const unsigned char *old_sha1, unsigned int flags, enum action_on_err onerr), <refs.c 3665>
 6041 ----------------ref_transaction_begin: struct ref_transaction (struct strbuf err), <refs.c 3557>
 6042 ----------------ref_transaction_update: 3170
 6043 ----------------ref_transaction_commit: 3180
 6044 ----------------ref_transaction_free: 3418
 6045 ----------------error: 12
 6046 ----------------die: 29
 6047 ----------------strbuf_release: 63
 6048 -------------free: <>
 6049 -------------diff_free_filespec_data: 5638
 6050 ------------diff_free_filepair: 5636
 6051 ------------diff_q: 5633
 6052 ------------free: <>
 6053 -----------diff_grep: int (mmfile_t *one, mmfile_t *two, struct diff_options o, regex_t *regexp, kwset_t kws), <diffcore-pickaxe.c 41>
 6054 ------------regmatch: int (const regex_t *preg, char *line, char *eol, regmatch_t *match, int eflags), <grep.c 851>
 6055 -------------regexec: <>
 6056 ------------regexec: <>
 6057 ------------memset: <>
 6058 ------------xdi_diff_outf: int (mmfile_t *mf1, mmfile_t *mf2, xdiff_emit_consume_fn fn, void *consume_callback_data, xpparam_t const *xpp, xdemitconf_t const *xecfg), <xdiff-interface.c 139>
 6059 -------------memset: <>
 6060 -------------xdiff_outf: int (void *priv_, mmbuffer_t *mb, int nbuf), <xdiff-interface.c 73>
 6061 --------------strbuf_add: 81
 6062 --------------consume_one: void (void *priv_, char *s, unsigned long size), <xdiff-interface.c 59>
 6063 ---------------memchr: <>
 6064 --------------strbuf_reset: <>
 6065 -------------strbuf_init: 65
 6066 -------------xdi_diff: 3875
 6067 -------------strbuf_release: 63
 6068 ------------diffgrep_consume: void (void *priv, char *line, unsigned long len), <diffcore-pickaxe.c 20>
 6069 -------------regmatch: 6054
 6070 -------------regexec: <>
 6071 -----------has_changes: int (mmfile_t *one, mmfile_t *two, struct diff_options o, regex_t *regexp, kwset_t kws), <diffcore-pickaxe.c 107>
 6072 ------------contains: unsigned int (mmfile_t *mf, regex_t *regexp, kwset_t kws), <diffcore-pickaxe.c 70>
 6073 -------------regmatch: 6054
 6074 -------------assert: <>
 6075 -------------regexec: <>
 6076 -------------kwsexec: size_t (kwset_t kws, char const *text, size_t size, struct kwsmatch kwsmatch), <kwset.c 743>
 6077 --------------bmexec: size_t (kwset_t kws, char const *text, size_t size), <kwset.c 495>
 6078 ---------------memchr: <>
 6079 ---------------U: <>
 6080 --------------cwexec: size_t (kwset_t kws, char const *text, size_t len, struct kwsmatch kwsmatch), <kwset.c 581>
 6081 ---------------match: 1296
 6082 ---------------U: <>
 6083 -----------kwsfree: 5533
 6084 ----------diffcore_order: void (const char *orderfile), <diffcore-order.c 114>
 6085 -----------xmalloc: 172
 6086 -----------order_objects: void (const char *orderfile, obj_path_fn_t obj_path, struct obj_order objs, int nr), <diffcore-order.c 91>
 6087 ------------prepare_order: void (const char *orderfile), <diffcore-order.c 11>
 6088 -------------strbuf_read_file: int (struct strbuf sb, const char *path, size_t hint), <strbuf.c 484>
 6089 --------------open: <>
 6090 --------------strbuf_read: 197
 6091 --------------close: <>
 6092 -------------die_errno: 203
 6093 -------------strbuf_detach: 190
 6094 -------------xmemdupz: 120
 6095 -------------xmalloc: 172
 6096 ------------match_order: int (const char *path), <diffcore-order.c 60>
 6097 -------------strbuf_reset: <>
 6098 -------------strbuf_addstr: <>
 6099 -------------wildmatch: 4090
 6100 -------------strrchr: <>
 6101 ------------qsort: <>
 6102 ------------compare_objs_order: int (const void *a_, const void *b_), <diffcore-order.c 81>
 6103 -----------pair_pathtwo: const char * (void *obj), <diffcore-order.c 107>
 6104 -----------free: <>
 6105 ----------diff_resolve_rename_copy: void (void), <diff.c 4158>
 6106 -----------diff_debug_queue: 5748
 6107 -----------DIFF_PAIR_UNMERGED: <>
 6108 -----------DIFF_FILE_VALID: <>
 6109 -----------DIFF_PAIR_TYPE_CHANGED: <>
 6110 -----------DIFF_PAIR_RENAME: <>
 6111 -----------strcmp: <>
 6112 -----------hashcmp: <>
 6113 -----------is_null_sha1: <>
 6114 -----------error: 12
 6115 ----------diffcore_apply_filter: void (struct diff_options options), <diff.c 4634>
 6116 -----------DIFF_QUEUE_CLEAR: <>
 6117 -----------filter_bit_tst: unsigned (char status, const struct diff_options *opt), <diff.c 3559>
 6118 -----------match_filter: int (const struct diff_options *options, const struct diff_filepair *p), <diff.c 4623>
 6119 ------------filter_bit_tst: 6117
 6120 -----------diff_free_filepair: 5636
 6121 -----------diff_q: 5633
 6122 -----------free: <>
 6123 ----------DIFF_OPT_TST: <>
 6124 ----------DIFF_OPT_SET: <>
 6125 ----------DIFF_OPT_CLR: <>
 6126 ---------free_pathspec: 5502
 6127 ---------strcmp: <>
 6128 ---------parse_pathspec: 5429
 6129 ---------diff_free_filepair: 5636
 6130 --------strbuf_release: 63
 6131 ------relevant_commit: inline int (struct commit commit), <revision.c 387>
 6132 ------initialise_treesame: struct treesame_state (struct rev_info revs, struct commit commit), <revision.c 528>
 6133 ------parse_commit: 1191
 6134 ------die: 29
 6135 ------sha1_to_hex: 1194
 6136 ------rev_compare_tree: int (struct rev_info revs, struct commit parent, struct commit commit), <revision.c 471>
 6137 -------get_name_decoration: const struct name_decoration (const struct object *obj), <log-tree.c 85>
 6138 -------DIFF_OPT_CLR: <>
 6139 -------diff_tree_sha1: 5611
 6140 ----mark_parents_uninteresting: 5602
 6141 ----commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 6142 ----still_interesting: int (struct commit_list src, unsigned long date, int slop), <revision.c 943>
 6143 -----everybody_uninteresting: int (struct commit_list orig), <revision.c 348>
 6144 ----cherry_pick_list: void (struct commit_list list, struct rev_info revs), <revision.c 852>
 6145 -----init_patch_ids: int (struct patch_ids ids), <patch-ids.c 37>
 6146 ------memset: <>
 6147 ------diff_setup: 5035
 6148 ------DIFF_OPT_SET: <>
 6149 ------diff_setup_done: 5512
 6150 -----add_commit_patch_id: struct patch_id (struct commit commit, struct patch_ids ids), <patch-ids.c 101>
 6151 -----has_commit_patch_id: struct patch_id (struct commit commit, struct patch_ids ids), <patch-ids.c 95>
 6152 -----free_patch_ids: int (struct patch_ids ids), <patch-ids.c 46>
 6153 ------free: <>
 6154 ----limit_left_right: void (struct commit_list list, struct rev_info revs), <revision.c 1057>
 6155 ----limit_to_ancestry: void (struct commit_list bottom, struct commit_list list), <revision.c 976>
 6156 -----commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 6157 -----free_commit_list: 1246
 6158 ----free_commit_list: 1246
 6159 ----limiting_can_increase_treesame: inline int (const struct rev_info *revs), <revision.c 621>
 6160 ----update_treesame: unsigned (struct rev_info revs, struct commit commit), <revision.c 591>
 6161 -----lookup_decoration: void * (struct decoration n, const struct object *obj), <decorate.c 68>
 6162 ------hash_obj: 5311
 6163 -----die: 29
 6164 -----sha1_to_hex: 1194
 6165 -----relevant_commit: 6131
 6166 ---sort_in_topological_order: void (struct commit_list list, enum rev_sort_order sort_order), <commit.c 640>
 6167 ----init_indegree_slab: <>
 6168 ----memset: <>
 6169 ----compare_commits_by_commit_date: int (const void *a_, const void *b_, void *unused), <commit.c 626>
 6170 ----init_author_date_slab: <>
 6171 ----compare_commits_by_author_date: int (const void *a_, const void *b_, void *cb_data), <commit.c 610>
 6172 -----author_date_slab_at: <>
 6173 ----indegree_slab_at: <>
 6174 ----record_author_date: void (struct author_date_slab author_date, struct commit commit), <commit.c 584>
 6175 -----get_commit_buffer: 1231
 6176 -----find_commit_header: const char * (const char *msg, const char *key, size_t *out_len), <commit.c 1635>
 6177 ------strlen: <>
 6178 ------strchrnul: <>
 6179 ------strncmp: <>
 6180 -----split_ident_line: int (struct ident_split split, const char *line, int len), <ident.c 201>
 6181 ------memset: <>
 6182 ------isspace: <>
 6183 ------strspn: <>
 6184 -----strtoul: <>
 6185 -----author_date_slab_at: <>
 6186 -----unuse_commit_buffer: 1241
 6187 ----prio_queue_put: void (struct prio_queue queue, void *thing), <prio-queue.c 39>
 6188 -----ALLOC_GROW: <>
 6189 -----compare: inline int (struct prio_queue queue, int i, int j), <prio-queue.c 4>
 6190 -----swap: inline void (struct prio_queue queue, int i, int j), <prio-queue.c 13>
 6191 ----prio_queue_reverse: void (struct prio_queue queue), <prio-queue.c 20>
 6192 -----die: 29
 6193 -----swap: inline void (struct prio_queue queue, int i, int j), <prio-queue.c 13>
 6194 ----free_commit_list: 1246
 6195 ----prio_queue_get: void * (struct prio_queue queue), <prio-queue.c 61>
 6196 -----compare: 6189
 6197 -----swap: inline void (struct prio_queue queue, int i, int j), <prio-queue.c 13>
 6198 ----commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 6199 ----clear_indegree_slab: <>
 6200 ----clear_prio_queue: void (struct prio_queue queue), <prio-queue.c 30>
 6201 -----free: <>
 6202 ----clear_author_date_slab: <>
 6203 ---line_log_filter: int (struct rev_info rev), <line-log.c 1230>
 6204 ----process_ranges_arbitrary_commit: int (struct rev_info rev, struct commit commit), <line-log.c 1196>
 6205 -----lookup_line_range: struct line_log_data (struct rev_info revs, struct commit commit), <line-log.c 725>
 6206 -----process_ranges_ordinary_commit: int (struct rev_info rev, struct commit commit, struct line_log_data range), <line-log.c 1116>
 6207 ------queue_diffs: void (struct line_log_data range, struct diff_options opt, struct diff_queue_struct queue, struct commit commit, struct commit parent), <line-log.c 819>
 6208 -------assert: <>
 6209 -------DIFF_QUEUE_CLEAR: <>
 6210 -------diff_tree_sha1: 5611
 6211 -------filter_diffs_for_paths: void (struct line_log_data range, int keep_deletions), <line-log.c 777>
 6212 --------DIFF_QUEUE_CLEAR: <>
 6213 --------DIFF_FILE_VALID: <>
 6214 --------diff_q: 5633
 6215 --------diff_free_filepair: 5636
 6216 --------strcmp: <>
 6217 --------free: <>
 6218 -------diff_might_be_rename: inline int (void), <line-log.c 807>
 6219 --------DIFF_FILE_VALID: <>
 6220 -------diffcore_std: 5629
 6221 -------move_diff_queue: void (struct diff_queue_struct dst, struct diff_queue_struct src), <line-log.c 769>
 6222 --------assert: <>
 6223 --------memcpy: <>
 6224 --------DIFF_QUEUE_CLEAR: <>
 6225 ------process_all_files: int (struct line_log_data range_out, struct rev_info rev, struct diff_queue_struct queue, struct line_log_data range), <line-log.c 1068>
 6226 -------line_log_data_copy: struct line_log_data (struct line_log_data r), <line-log.c 637>
 6227 -------process_diff_filepair: int (struct rev_info rev, struct diff_filepair pair, struct line_log_data range, struct diff_ranges diff_out), <line-log.c 995>
 6228 --------assert: <>
 6229 --------strcmp: <>
 6230 --------diff_populate_filespec: 5059
 6231 --------diff_ranges_init: void (struct diff_ranges diff), <line-log.c 228>
 6232 ---------range_set_init: void (struct range_set rs, size_t prealloc), <line-log.c 26>
 6233 ----------range_set_grow: void (struct range_set rs, size_t extra), <line-log.c 18>
 6234 -----------ALLOC_GROW: <>
 6235 --------collect_diff: void (mmfile_t *parent, mmfile_t *target, struct diff_ranges out), <line-log.c 328>
 6236 ---------memset: <>
 6237 ---------collect_diff_cb: int (long start_a, long count_a, long start_b, long count_b, void *data), <line-log.c 314>
 6238 ----------range_set_append: void (struct range_set rs, long a, long b), <line-log.c 68>
 6239 -----------assert: <>
 6240 -----------range_set_append_unsafe: void (struct range_set rs, long a, long b), <line-log.c 59>
 6241 ------------assert: <>
 6242 ------------range_set_grow: 6233
 6243 ---------xdi_diff: 3875
 6244 --------free: <>
 6245 --------xstrdup: 73
 6246 --------range_set_init: 6232
 6247 --------range_set_map_across_diff: void (struct range_set out, struct range_set rs, struct diff_ranges diff, struct diff_ranges touched_out), <line-log.c 452>
 6248 ---------xmalloc: 172
 6249 ---------diff_ranges_init: 6231
 6250 ---------diff_ranges_filter_touched: void (struct diff_ranges out, struct diff_ranges diff, struct range_set rs), <line-log.c 396>
 6251 ----------assert: <>
 6252 ----------ranges_overlap: int (struct range a, struct range b), <line-log.c 386>
 6253 ----------range_set_append: 6238
 6254 ---------range_set_difference: void (struct range_set out, struct range_set a, struct range_set b), <line-log.c 186>
 6255 ----------range_set_append: 6238
 6256 ---------range_set_shift_diff: void (struct range_set out, struct range_set rs, struct diff_ranges diff), <line-log.c 425>
 6257 ----------range_set_append: 6238
 6258 ---------range_set_union: void (struct range_set out, struct range_set a, struct range_set b), <line-log.c 143>
 6259 ----------assert: <>
 6260 ----------range_set_grow: 6233
 6261 ---------range_set_release: void (struct range_set rs), <line-log.c 34>
 6262 ----------free: <>
 6263 --------range_set_release: 6261
 6264 --------range_set_move: void (struct range_set dst, struct range_set src), <line-log.c 48>
 6265 ---------range_set_release: 6261
 6266 --------diff_ranges_release: void (struct diff_ranges diff), <line-log.c 234>
 6267 ---------range_set_release: 6261
 6268 -------strcmp: <>
 6269 -------assert: <>
 6270 -------diff_filepair_dup: struct diff_filepair (struct diff_filepair pair), <line-log.c 1049>
 6271 -------memcpy: <>
 6272 ------add_line_range: void (struct rev_info revs, struct commit commit, struct line_log_data range), <line-log.c 698>
 6273 -------lookup_decoration: 6161
 6274 -------line_log_data_merge: struct line_log_data (struct line_log_data a, struct line_log_data b), <line-log.c 656>
 6275 -------free_line_log_data: void (struct line_log_data r), <line-log.c 253>
 6276 --------line_log_data_clear: void (struct line_log_data r), <line-log.c 246>
 6277 ---------range_set_release: 6261
 6278 ---------diff_free_filepair: 5636
 6279 --------free: <>
 6280 -------line_log_data_copy: struct line_log_data (struct line_log_data r), <line-log.c 637>
 6281 -------add_decoration: 5307
 6282 -----process_ranges_merge_commit: int (struct rev_info rev, struct commit commit, struct line_log_data range), <line-log.c 1134>
 6283 ------commit_list_count: unsigned (const struct commit_list *l), <commit.c 420>
 6284 ------xmalloc: 172
 6285 ------queue_diffs: 6207
 6286 ------process_all_files: 6225
 6287 ------add_line_range: 6272
 6288 ------clear_commit_line_range: void (struct rev_info revs, struct commit commit), <line-log.c 715>
 6289 -------lookup_decoration: 6161
 6290 -------free_line_log_data: 6275
 6291 -------add_decoration: 5307
 6292 ------commit_list_append: struct commit_list (struct commit commit, struct commit_list next), <commit.c 1615>
 6293 ------free: <>
 6294 ------free_diffqueues: void (int n, struct diff_queue_struct dq), <line-log.c 1059>
 6295 -------diff_free_filepair: 5636
 6296 -------free: <>
 6297 ----free: <>
 6298 ----rewrite_parents: int (struct rev_info revs, struct commit commit, rewrite_parent_fn_t rewrite_parent), <revision.c 2798>
 6299 -----remove_duplicate_parents: int (struct rev_info revs, struct commit commit), <revision.c 2361>
 6300 ------lookup_decoration: 6161
 6301 ------compact_treesame: int (struct rev_info revs, struct commit commit, unsigned nth_parent), <revision.c 544>
 6302 -------die: 29
 6303 -------rev_same_tree_as_empty: 5609
 6304 -------lookup_decoration: 6161
 6305 -------memmove: <>
 6306 -------free: <>
 6307 -------add_decoration: 5307
 6308 ----line_log_rewrite_one: enum rewrite_result (struct rev_info rev, struct commit pp), <line-log.c 1214>
 6309 ---simplify_merges: void (struct rev_info revs), <revision.c 2664>
 6310 ----commit_list_insert: struct commit_list (struct commit item, struct commit_list list_p), <commit.c 411>
 6311 ----free: <>
 6312 ----simplify_one: struct commit_list (struct rev_info revs, struct commit commit, struct commit_list tail), <revision.c 2553>
 6313 ----locate_simplify_state: struct merge_simplify_state (struct rev_info revs, struct commit commit), <revision.c 2394>
 6314 ---set_children: void (struct rev_info revs), <revision.c 2714>
 6315 ----add_child: void (struct rev_info revs, struct commit parent, struct commit child), <revision.c 2353>
 6316 -----xcalloc: 1153
 6317 -----add_decoration: 5307
 6318 --mark_edges_uninteresting: void (struct rev_info revs, show_edge_fn show_edge), <list-objects.c 150>
 6319 ---mark_tree_uninteresting: void (struct tree tree), <revision.c 132>
 6320 ----mark_tree_contents_uninteresting: void (struct tree tree), <revision.c 99>
 6321 -----has_sha1_file: 1861
 6322 -----parse_tree: 4403
 6323 -----die: 29
 6324 -----sha1_to_hex: 1194
 6325 -----init_tree_desc: 1952
 6326 -----tree_entry: 2893
 6327 -----object_type: <>
 6328 -----mark_tree_uninteresting: 6319
 6329 -----lookup_tree: struct tree (const unsigned char *sha1), <tree.c 188>
 6330 -----mark_blob_uninteresting: void (struct blob blob), <revision.c 90>
 6331 -----lookup_blob: struct blob (const unsigned char *sha1), <blob.c 6>
 6332 -----free_tree_buffer: 4416
 6333 ---mark_edge_parents_uninteresting: void (struct commit commit, struct rev_info revs, show_edge_fn show_edge), <list-objects.c 132>
 6334 ----mark_tree_uninteresting: 6319
 6335 --get_delta: int (struct rev_info revs, struct remote_lock lock), <http-push.c 1337>
 6336 ---get_revision: struct commit (struct rev_info revs), <revision.c 3270>
 6337 ---process_tree: struct object_list (struct tree tree, struct object_list p, struct name_path path, const char *name), <http-push.c 1294>
 6338 ---add_send_request: int (struct object obj, struct remote_lock lock), <http-push.c 661>
 6339 ----check_locks: 4750
 6340 ----get_remote_object_list: 4763
 6341 ----find_sha1_pack: struct packed_git (const unsigned char *sha1, struct packed_git packs), <sha1_file.c 2513>
 6342 ----xmalloc: 172
 6343 ----fill_active_slots: 4501
 6344 ----step_active_slots: 4491
 6345 ---add_one_object: struct object_list (struct object obj, struct object_list p), <http-push.c 1269>
 6346 ---process_blob: struct object_list (struct blob blob, struct object_list p, struct name_path path, const char *name), <http-push.c 1278>
 6347 ---die: 29
 6348 ---sha1_to_hex: 1194
 6349 --finish_all_active_slots: 4889
 6350 --update_remote: int (unsigned char *sha1, struct remote_lock lock), <http-push.c 1383>
 6351 ---get_dav_token_headers: struct curl_slist (struct remote_lock lock, enum dav_header_flag options), <http-push.c 210>
 6352 ---strbuf_addf: 49
 6353 ---sha1_to_hex: 1194
 6354 ---get_active_slot: struct active_request_slot (void), <http.c 562>
 6355 ---curl_setup_http: 4479
 6356 ---fwrite_null: size_t (char *ptr, size_t eltsize, size_t nmemb, void *strbuf), <http.c 118>
 6357 ---curl_easy_setopt: <>
 6358 ---start_active_slot: 4487
 6359 ---run_active_slot: 4490
 6360 ---strbuf_release: 63
 6361 ---fprintf: <>
 6362 --unlock_remote: 4536
 6363 --check_locks: 4750
 6364 --update_remote_info_refs: void (struct remote_lock lock), <http-push.c 1508>
 6365 ---remote_ls: 4686
 6366 ---add_remote_info_ref: void (struct remote_ls_ctx ls), <http-push.c 1458>
 6367 ----alloc_ref: struct ref (const char *name), <remote.c 963>
 6368 ----http_fetch_ref: 4730
 6369 ----fprintf: <>
 6370 ----free: <>
 6371 ----parse_object: struct object (const unsigned char *sha1), <object.c 244>
 6372 ----sha1_to_hex: 1194
 6373 ----strlen: <>
 6374 ----xcalloc: 1153
 6375 ----sprintf: <>
 6376 ----fwrite_buffer: 4484
 6377 ----deref_tag: struct object (struct object o, const char *warn, int warnlen), <tag.c 9>
 6378 ---get_dav_token_headers: struct curl_slist (struct remote_lock lock, enum dav_header_flag options), <http-push.c 210>
 6379 ---get_active_slot: struct active_request_slot (void), <http.c 562>
 6380 ---curl_setup_http: 4479
 6381 ---fwrite_null: size_t (char *ptr, size_t eltsize, size_t nmemb, void *strbuf), <http.c 118>
 6382 ---curl_easy_setopt: <>
 6383 ---start_active_slot: 4487
 6384 ---run_active_slot: 4490
 6385 ---fprintf: <>
 6386 ---strbuf_release: 63
 6387 --release_request: 4824
 6388 --setup_git_directory_gently: 2136
 6389 --git_imap_config: void (void), <imap-send.c 1329>
 6390 ---git_config_get_bool: 1147
 6391 ---git_config_get_string: 3648
 6392 ---git_config_get_value: 3504
 6393 ---git_die_config: <>
 6394 ---starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 6395 ---xstrdup: 73
 6396 ---git_config_get_int: 2248
 6397 --read_message: int (FILE *f, struct strbuf all_msgs), <imap-send.c 1259>
 6398 ---strbuf_fread: 2754
 6399 ---feof: <>
 6400 ---ferror: <>
 6401 --count_messages: int (struct strbuf all_msgs), <imap-send.c 1269>
 6402 ---starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 6403 ---strstr: <>
 6404 --append_msgs_to_imap: int (struct imap_server_conf server, struct strbuf all_msgs, int total), <imap-send.c 1360>
 6405 ---imap_open_store: struct imap_store (struct imap_server_conf srvc, char *folder), <imap-send.c 931>
 6406 ---fprintf: <>
 6407 ---split_msg: int (struct strbuf all_msgs, struct strbuf msg, int *ofs), <imap-send.c 1298>
 6408 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 6409 ----strchr: <>
 6410 ----strstr: <>
 6411 ----strbuf_add: 81
 6412 ---wrap_in_html: void (struct strbuf msg), <imap-send.c 1233>
 6413 ----strstr: <>
 6414 ----strbuf_add: 81
 6415 ----strbuf_addstr: <>
 6416 ----strbuf_addch: <>
 6417 ----strbuf_addstr_xml_quoted: 4470
 6418 ----strbuf_release: 63
 6419 ---imap_store_msg: int (struct imap_store ctx, struct strbuf msg), <imap-send.c 1210>
 6420 ----lf_to_crlf: void (struct strbuf msg), <imap-send.c 1178>
 6421 -----xmalloc: 172
 6422 -----strbuf_attach: 2732
 6423 ----memset: <>
 6424 ----strbuf_detach: 190
 6425 ----strcmp: <>
 6426 ----imap_exec_m: int (struct imap_store ctx, struct imap_cmd_cb cb, const char *fmt, ...), <imap-send.c 598>
 6427 -----va_start: <>
 6428 -----issue_imap_cmd: struct imap_cmd (struct imap_store ctx, struct imap_cmd_cb cb, const char *fmt, va_list ap), <imap-send.c 516>
 6429 -----va_end: <>
 6430 -----get_cmd_result: int (struct imap_store ctx, struct imap_cmd tcmd), <imap-send.c 720>
 6431 ------buffer_gets: int (struct imap_buffer b, char **s), <imap-send.c 402>
 6432 -------assert: <>
 6433 -------memmove: <>
 6434 -------socket_read: int (struct imap_socket sock, char *buf, int len), <imap-send.c 353>
 6435 --------SSL_read: <>
 6436 --------xread: 199
 6437 --------socket_perror: void (const char *func, struct imap_socket sock, int ret), <imap-send.c 195>
 6438 ---------SSL_get_error: <>
 6439 ---------perror: <>
 6440 ---------ssl_socket_perror: void (const char *func), <imap-send.c 189>
 6441 ----------fprintf: <>
 6442 ----------ERR_error_string: <>
 6443 ----------ERR_get_error: <>
 6444 ---------fprintf: <>
 6445 --------close: <>
 6446 -------puts: <>
 6447 ------next_arg: char * (char **s), <imap-send.c 474>
 6448 -------isspace: <>
 6449 -------strchr: <>
 6450 ------fprintf: <>
 6451 ------strcmp: <>
 6452 ------skip_list: void (char **sp), <imap-send.c 659>
 6453 -------skip_imap_list_l: int (char **sp, int level), <imap-send.c 617>
 6454 --------isspace: <>
 6455 --------skip_imap_list_l: 6453
 6456 ------parse_response_code: int (struct imap_store ctx, struct imap_cmd_cb cb, char *s), <imap-send.c 677>
 6457 -------strchr: <>
 6458 -------fprintf: <>
 6459 -------next_arg: 6447
 6460 -------strcmp: <>
 6461 -------atoi: <>
 6462 -------parse_capability: void (struct imap imap, char *cmd), <imap-send.c 664>
 6463 --------next_arg: 6447
 6464 --------ARRAY_SIZE: <>
 6465 --------strcmp: <>
 6466 -------isspace: <>
 6467 ------parse_capability: 6462
 6468 ------offsetof: <>
 6469 ------socket_write: int (struct imap_socket sock, const char *buf, int len), <imap-send.c 371>
 6470 -------SSL_write: <>
 6471 -------write_in_full: 240
 6472 -------socket_perror: 6437
 6473 -------close: <>
 6474 ------free: <>
 6475 ------cont: <>
 6476 ------atoi: <>
 6477 ------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 6478 ------done: <>
 6479 ---imap_close_store: void (struct imap_store ctx), <imap-send.c 844>
 6480 ----imap_close_server: void (struct imap_store ictx), <imap-send.c 833>
 6481 -----imap_exec: <>
 6482 -----socket_shutdown: void (struct imap_socket sock), <imap-send.c 389>
 6483 ------SSL_shutdown: <>
 6484 ------SSL_free: <>
 6485 ------close: <>
 6486 -----free: <>
 6487 ----free: <>
 6488 --curl_append_msgs_to_imap: int (struct imap_server_conf server, struct strbuf all_msgs, int total), <imap-send.c 1448>
 6489 ---setup_curl: CURL * (struct imap_server_conf srvc), <imap-send.c 1399>
 6490 ----curl_global_init: <>
 6491 ----die: 29
 6492 ----curl_easy_init: <>
 6493 ----curl_easy_setopt: <>
 6494 ----strbuf_addstr: <>
 6495 ----strbuf_addch: <>
 6496 ----strbuf_release: 63
 6497 ----fread_buffer: 4481
 6498 ----getenv: <>
 6499 ---curl_easy_setopt: <>
 6500 ---fprintf: <>
 6501 ---split_msg: 6407
 6502 ---wrap_in_html: 6412
 6503 ---lf_to_crlf: 6420
 6504 ---curl_easy_perform: <>
 6505 ---curl_easy_strerror: <>
 6506 ---curl_easy_cleanup: <>
 6507 ---curl_global_cleanup: <>
 6508 --isatty: <>
 6509 --remote_get: struct remote (const char *name), <remote.c 732>
 6510 --end_url_with_slash: 3764
 6511 --strbuf_getline: 564
 6512 --ferror: <>
 6513 --parse_fetch: void (struct strbuf buf), <remote-curl.c 793>
 6514 ---skip_prefix: <>
 6515 ---strlen: <>
 6516 ---get_sha1_hex: 931
 6517 ---die: 29
 6518 ---alloc_ref: struct ref (const char *name), <remote.c 963>
 6519 ---hashcpy: <>
 6520 ---ALLOC_GROW: <>
 6521 ---strbuf_reset: <>
 6522 ---strbuf_getline: 564
 6523 ---fetch: int (int nr_heads, struct ref to_fetch), <remote-curl.c 784>
 6524 ----discover_refs: struct discovery (const char *service, int for_push), <remote-curl.c 233>
 6525 ----fetch_git: int (struct discovery heads, int nr_heads, struct ref to_fetch), <remote-curl.c 722>
 6526 -----strbuf_addf: 49
 6527 -----strbuf_detach: 190
 6528 -----die: 29
 6529 -----packet_buf_write: void (struct strbuf buf, const char *fmt, ...), <pkt-line.c 99>
 6530 ------va_start: <>
 6531 ------format_packet: 861
 6532 ------va_end: <>
 6533 -----sha1_to_hex: 1194
 6534 -----packet_buf_flush: void (struct strbuf buf), <pkt-line.c 60>
 6535 ------packet_trace: 821
 6536 ------strbuf_add: 81
 6537 -----memset: <>
 6538 -----rpc_service: int (struct rpc_state rpc, struct discovery heads), <remote-curl.c 629>
 6539 ------start_command: 255
 6540 ------exit: <>
 6541 ------write_or_die: 247
 6542 ------xmalloc: 172
 6543 ------strbuf_init: 65
 6544 ------strbuf_addf: 49
 6545 ------strbuf_detach: 190
 6546 ------packet_read: 813
 6547 ------post_rpc: int (struct rpc_state rpc), <remote-curl.c 477>
 6548 -------packet_read: 813
 6549 -------probe_rpc: int (struct rpc_state rpc, struct slot_results results), <remote-curl.c 448>
 6550 --------get_active_slot: struct active_request_slot (void), <http.c 562>
 6551 --------curl_slist_append: <>
 6552 --------curl_easy_setopt: <>
 6553 --------fwrite_buffer: 4484
 6554 --------run_slot: int (struct active_request_slot slot, struct slot_results results), <remote-curl.c 429>
 6555 ---------run_one_slot: 4581
 6556 ---------error: 12
 6557 --------curl_slist_free_all: <>
 6558 --------strbuf_release: 63
 6559 -------credential_fill: 4263
 6560 -------curl_slist_append: <>
 6561 -------get_active_slot: struct active_request_slot (void), <http.c 562>
 6562 -------curl_easy_setopt: <>
 6563 -------rpc_out: size_t (void *ptr, size_t eltsize, size_t nmemb, void *buffer_), <remote-curl.c 374>
 6564 --------max: <>
 6565 --------packet_read: 813
 6566 --------memcpy: <>
 6567 -------rpc_ioctl: curlioerr (CURL *handle, int cmd, void *clientp), <remote-curl.c 398>
 6568 --------error: 12
 6569 -------fprintf: <>
 6570 -------fflush: <>
 6571 -------git_deflate_init_gzip: void (git_zstream *strm, int level), <zlib.c 188>
 6572 --------do_git_deflate_init: void (git_zstream *strm, int level, int windowBits), <zlib.c 172>
 6573 ---------memset: <>
 6574 ---------zlib_pre_call: 1606
 6575 ---------deflateInit2: <>
 6576 ---------zlib_post_call: 1609
 6577 ---------die: 29
 6578 ---------zerr_to_string: 1612
 6579 -------git_deflate_bound: 2781
 6580 -------xmalloc: 172
 6581 -------git_deflate: 2784
 6582 -------die: 29
 6583 -------git_deflate_end_gently: 5838
 6584 -------rpc_in: size_t (char *ptr, size_t eltsize, size_t nmemb, void *buffer_), <remote-curl.c 420>
 6585 --------write_or_die: 247
 6586 -------run_slot: 6554
 6587 -------curl_slist_free_all: <>
 6588 -------free: <>
 6589 ------close: <>
 6590 ------strbuf_read: 197
 6591 ------xread: 199
 6592 ------finish_command: 2027
 6593 ------free: <>
 6594 ------strbuf_release: 63
 6595 -----write_or_die: 247
 6596 -----strbuf_release: 63
 6597 -----free: <>
 6598 ----fetch_dumb: int (int nr_heads, struct ref to_fetch), <remote-curl.c 695>
 6599 -----xmalloc: 172
 6600 -----die: 29
 6601 -----xstrdup: 73
 6602 -----sha1_to_hex: 1194
 6603 -----get_http_walker: struct walker (const char *url), <http-walker.c 558>
 6604 -----walker_fetch: 4364
 6605 -----walker_free: 4453
 6606 -----free: <>
 6607 -----error: 12
 6608 ---exit: <>
 6609 ---free_refs: void (struct ref ref), <remote.c 1006>
 6610 ----free_ref: void (struct ref ref), <remote.c 996>
 6611 -----free_ref: 6610
 6612 -----free: <>
 6613 ---free: <>
 6614 ---printf: <>
 6615 ---fflush: <>
 6616 --output_refs: void (struct ref refs), <remote-curl.c 343>
 6617 ---printf: <>
 6618 ---sha1_to_hex: 1194
 6619 ---fflush: <>
 6620 --get_refs: struct ref (int for_push), <remote-curl.c 331>
 6621 --parse_push: void (struct strbuf buf), <remote-curl.c 926>
 6622 ---starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 6623 ---ALLOC_GROW: <>
 6624 ---xstrdup: 73
 6625 ---die: 29
 6626 ---strbuf_reset: <>
 6627 ---strbuf_getline: 564
 6628 ---push: int (int nr_spec, char **specs), <remote-curl.c 913>
 6629 ----discover_refs: struct discovery (const char *service, int for_push), <remote-curl.c 233>
 6630 ----push_git: int (struct discovery heads, int nr_spec, char **specs), <remote-curl.c 867>
 6631 -----argv_array_init: 269
 6632 -----argv_array_pushl: void (struct argv_array array, ...), <argv-array.c 41>
 6633 ------va_start: <>
 6634 ------va_arg: <>
 6635 ------argv_array_push: 1108
 6636 ------va_end: <>
 6637 -----argv_array_push: 1108
 6638 -----for_each_string_list_item: <>
 6639 -----packet_buf_write: 6529
 6640 -----packet_buf_flush: 6534
 6641 -----memset: <>
 6642 -----rpc_service: 6538
 6643 -----write_or_die: 247
 6644 -----strbuf_release: 63
 6645 -----argv_array_clear: 267
 6646 ----push_dav: int (int nr_spec, char **specs), <remote-curl.c 845>
 6647 -----xmalloc: 172
 6648 -----run_command_v_opt: 3631
 6649 -----die: 29
 6650 -----free: <>
 6651 ----free_discovery: void (struct discovery d), <remote-curl.c 194>
 6652 -----free: <>
 6653 -----free_refs: 6609
 6654 ---printf: <>
 6655 ---fflush: <>
 6656 ---exit: <>
 6657 ---free: <>
 6658 --set_option: int (const char *name, const char *value), <remote-curl.c 34>
 6659 ---strcmp: <>
 6660 ---strtol: <>
 6661 ---strtoul: <>
 6662 ---strbuf_addf: 49
 6663 ---string_list_append: 768
 6664 ---strbuf_release: 63
 6665 --fflush: <>
 6666 --strbuf_reset: <>
 6667 --url_decode: 597
 6668 --strbuf_addf: 49
 6669 --get_git_dir: 986
 6670 --do_command: int (struct strbuf line), <remote-testsvn.c 240>
 6671 ---for_each_string_list_item: <>
 6672 ---terminate_batch: void (void), <remote-testsvn.c 45>
 6673 ----printf: <>
 6674 ----fflush: <>
 6675 ---string_list_clear: 544
 6676 ---starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 6677 ---die: 29
 6678 ---string_list_append: 768
 6679 ---strlen: <>
 6680 --strbuf_release: 63
 6681 --cd_to_homedir: void (void), <shell.c 52>
 6682 ---getenv: <>
 6683 ---die: 29
 6684 ---chdir: <>
 6685 --run_shell: void (void), <shell.c 61>
 6686 ---access: <>
 6687 ---run_command_v_opt: 3631
 6688 ---exit: <>
 6689 ---fprintf: <>
 6690 ---strbuf_getline: 564
 6691 ---strbuf_release: 63
 6692 ---strbuf_trim: 1118
 6693 ---strbuf_detach: 190
 6694 ---xstrdup: 73
 6695 ---split_cmdline: 3662
 6696 ---split_cmdline_strerror: 3668
 6697 ---free: <>
 6698 ---strcmp: <>
 6699 ---is_valid_cmd_name: int (const char *cmd), <shell.c 41>
 6700 ----strcspn: <>
 6701 ---make_cmd: char * (const char *prog), <shell.c 47>
 6702 ----xstrfmt: 1972
 6703 --strncmp: <>
 6704 --isspace: <>
 6705 --split_cmdline: 3662
 6706 --is_valid_cmd_name: 6699
 6707 --make_cmd: 6701
 6708 --execv: <>
 6709 --split_cmdline_strerror: 3668
 6710 --note_variables: void (const char *string), <sh-i18n--envsubst.c 285>
 6711 ---string_list_init: 2002
 6712 ---find_variables: void (const char *string, void (*callback) (const char *var_ptr, size_t var_len)), <sh-i18n--envsubst.c 124>
 6713 ---note_variable: void (const char *var_ptr, size_t var_len), <sh-i18n--envsubst.c 276>
 6714 ----xmemdupz: 120
 6715 ----string_list_append: 768
 6716 ---string_list_sort: 1505
 6717 --subst_from_stdin: void (void), <sh-i18n--envsubst.c 316>
 6718 ---do_getc: int (void), <sh-i18n--envsubst.c 294>
 6719 ----getc: <>
 6720 ----ferror: <>
 6721 ----error: 12
 6722 ---xrealloc: 176
 6723 ---do_ungetc: inline void (int c), <sh-i18n--envsubst.c 308>
 6724 ----ungetc: <>
 6725 ---sorted_string_list_member: int (const string_list_ty *slp, const char *s), <sh-i18n--envsubst.c 239>
 6726 ----strcmp: <>
 6727 ---getenv: <>
 6728 ---fputs: <>
 6729 ---putchar: <>
 6730 ---fwrite: <>
 6731 --print_variables: void (const char *string), <sh-i18n--envsubst.c 179>
 6732 ---find_variables: 6712
 6733 ---print_variable: void (const char *var_ptr, size_t var_len), <sh-i18n--envsubst.c 170>
 6734 ----fwrite: <>
 6735 ----putchar: <>
 6736 --fread: <>
 6737 --htonl: <>
 6738 --ntohl: <>
 6739 --timespec_arg: int (const char *arg, long int *set_time, int *set_eq), <test-chmtime.c 35>
 6740 ---strtol: <>
 6741 ---fprintf: <>
 6742 ---time: <>
 6743 --stat: <>
 6744 --chmod: <>
 6745 --utime: <>
 6746 --git_configset_init: 1149
 6747 --git_config_get_value: 3504
 6748 --git_config_get_value_multi: const struct string_list (const char *key), <config.c 1535>
 6749 --git_config_get_int: 2248
 6750 --git_config_get_bool: 1147
 6751 --git_config_get_string_const: 3650
 6752 --git_configset_add_file: int (struct config_set cs, const char *filename), <config.c 1410>
 6753 ---git_config_from_file: 1055
 6754 ---config_set_callback: 1995
 6755 --git_configset_get_value: 2014
 6756 --git_configset_get_value_multi: const struct string_list (struct config_set cs, const char *key), <config.c 1432>
 6757 --git_configset_clear: 2140
 6758 --TEST_CLASS: <>
 6759 --isdigit: <>
 6760 --isalpha: <>
 6761 --isalnum: <>
 6762 --is_glob_special: <>
 6763 --is_regex_special: <>
 6764 --is_pathspec_magic: <>
 6765 --gettimeofday: 290
 6766 --show_dates: void (char **argv, struct timeval now), <test-date.c 8>
 6767 ---atoi: <>
 6768 ---show_date_relative: 1782
 6769 ---printf: <>
 6770 ---strbuf_release: 63
 6771 --parse_dates: void (char **argv, struct timeval now), <test-date.c 20>
 6772 ---strbuf_reset: <>
 6773 ---parse_date: 2942
 6774 ---sscanf: <>
 6775 ---printf: <>
 6776 ---show_date: 1778
 6777 ---strbuf_release: 63
 6778 --parse_approxidate: void (char **argv, struct timeval now), <test-date.c 39>
 6779 ---approxidate_relative: unsigned long (const char *date, const struct timeval *tv), <date.c 1106>
 6780 ----parse_date_basic: 1719
 6781 ----approxidate_str: 1752
 6782 ---printf: <>
 6783 ---show_date: 1778
 6784 --open: <>
 6785 --fstat: <>
 6786 --perror: <>
 6787 --mmap: <>
 6788 --close: <>
 6789 --diff_delta: <>
 6790 --patch_delta: 2714
 6791 --write_in_full: 240
 6792 --cache_tree: struct cache_tree (void), <cache-tree.c 11>
 6793 --cache_tree_update: int (struct index_state istate, int flags), <cache-tree.c 419>
 6794 ---verify_cache: int (struct cache_entry cache, int entries, int flags), <cache-tree.c 155>
 6795 ----ce_stage: <>
 6796 ----fprintf: <>
 6797 ----sha1_to_hex: 1194
 6798 ----strlen: <>
 6799 ----strncmp: <>
 6800 ---update_one: int (struct cache_tree it, struct cache_entry cache, int entries, const char *base, int baselen, int *skip_count, int flags), <cache-tree.c 239>
 6801 ----assert: <>
 6802 ----has_sha1_file: 1861
 6803 ----ce_namelen: <>
 6804 ----memcmp: <>
 6805 ----strchr: <>
 6806 ----find_subtree: struct cache_tree_sub (struct cache_tree it, const char *path, int pathlen, int create), <cache-tree.c 66>
 6807 ----cache_tree: struct cache_tree (void), <cache-tree.c 11>
 6808 ----update_one: 6800
 6809 ----die: 29
 6810 ----discard_unused_subtrees: void (struct cache_tree it), <cache-tree.c 208>
 6811 -----cache_tree_free: void (struct cache_tree it_p), <cache-tree.c 18>
 6812 ------cache_tree_free: 6811
 6813 ------cache_tree: struct cache_tree (void), <cache-tree.c 11>
 6814 ------free: <>
 6815 -----free: <>
 6816 ----strbuf_init: 65
 6817 ----strbuf_release: 63
 6818 ----error: 12
 6819 ----sha1_to_hex: 1194
 6820 ----strbuf_grow: 53
 6821 ----strbuf_addf: 49
 6822 ----strbuf_add: 81
 6823 ----fprintf: <>
 6824 ----hash_sha1_file: 4131
 6825 ----hashcpy: <>
 6826 ----write_sha1_file: 5807
 6827 --dump_cache_tree: int (struct cache_tree it, struct cache_tree ref, const char *pfx), <test-dump-cache-tree.c 17>
 6828 ---dump_one: void (struct cache_tree it, const char *pfx, const char *x), <test-dump-cache-tree.c 6>
 6829 ----printf: <>
 6830 ----sha1_to_hex: 1194
 6831 ---hashcmp: <>
 6832 ---cache_tree_sub: struct cache_tree_sub (struct cache_tree it, const char *path), <cache-tree.c 96>
 6833 ---sprintf: <>
 6834 ---dump_cache_tree: 6827
 6835 --do_read_index: int (struct index_state istate, const char *path, int must_exist), <read-cache.c 1514>
 6836 ---open: <>
 6837 ---die_errno: 203
 6838 ---fstat: <>
 6839 ---xsize_t: <>
 6840 ---die: 29
 6841 ---xmmap: 1456
 6842 ---close: <>
 6843 ---verify_hdr: int (struct cache_header hdr, unsigned long size), <read-cache.c 1342>
 6844 ----htonl: <>
 6845 ----error: 12
 6846 ----ntohl: <>
 6847 ----git_SHA1_Init: <>
 6848 ----git_SHA1_Update: <>
 6849 ----git_SHA1_Final: <>
 6850 ----hashcmp: <>
 6851 ---hashcpy: <>
 6852 ---ntohl: <>
 6853 ---alloc_nr: <>
 6854 ---xcalloc: 1153
 6855 ---create_from_disk: struct cache_entry (struct ondisk_cache_entry ondisk, unsigned long *ent_size, struct strbuf previous_name), <read-cache.c 1445>
 6856 ---set_index_entry: void (struct index_state istate, int nr, struct cache_entry ce), <read-cache.c 51>
 6857 ----add_name_hash: void (struct index_state istate, struct cache_entry ce), <name-hash.c 138>
 6858 -----hash_index_entry: void (struct index_state istate, struct cache_entry ce), <name-hash.c 101>
 6859 ------hashmap_entry_init: <>
 6860 ------memihash: unsigned int (const void *buf, size_t len), <hashmap.c 40>
 6861 -------hash: 1400
 6862 ------ce_namelen: <>
 6863 ------hashmap_add: 2003
 6864 ------add_dir_entry: void (struct index_state istate, struct cache_entry ce), <name-hash.c 78>
 6865 -------hash_dir_entry: struct dir_entry (struct index_state istate, struct cache_entry ce, int namelen), <name-hash.c 35>
 6866 -------ce_namelen: <>
 6867 ---strbuf_release: 63
 6868 ---ST_MTIME_NSEC: <>
 6869 ---memcpy: <>
 6870 ---read_index_extension: int (struct index_state istate, const char *ext, void *data, unsigned long sz), <read-cache.c 1361>
 6871 ----CACHE_EXT: <>
 6872 ----cache_tree_read: struct cache_tree (const char *buffer, unsigned long size), <cache-tree.c 563>
 6873 ----resolve_undo_read: struct string_list (const char *data, unsigned long size), <resolve-undo.c 52>
 6874 ----read_link_extension: int (struct index_state istate, const void *data_, unsigned long sz), <split-index.c 14>
 6875 -----error: 12
 6876 -----init_split_index: struct split_index (struct index_state istate), <split-index.c 5>
 6877 -----hashcpy: <>
 6878 -----ewah_new: struct ewah_bitmap (void), <ewah/ewah_bitmap.c 281>
 6879 -----ewah_read_mmap: int (struct ewah_bitmap self, const void *map, size_t len), <ewah/ewah_io.c 113>
 6880 ------get_be32: <>
 6881 ------ewah_realloc: <>
 6882 ------memcpy: <>
 6883 ------ntohll: <>
 6884 ----error: 12
 6885 ----fprintf: <>
 6886 ---munmap: <>
 6887 --ce_stage: <>
 6888 --ewah_each_bit: void (struct ewah_bitmap self, void (*callback) (size_t, void *), void *payload), <ewah/ewah_bitmap.c 248>
 6889 ---rlw_get_run_bit: <>
 6890 ---rlw_get_running_len: <>
 6891 ---rlw_get_literal_words: <>
 6892 --show_bit: void (size_t pos, void *data), <test-dump-split-index.c 5>
 6893 ---printf: <>
 6894 --putchar: <>
 6895 --hashmap_init: 1150
 6896 --test_entry_cmp_icase: int (const struct test_entry *e1, const struct test_entry *e2, const char *key), <test-hashmap.c 22>
 6897 ---strcasecmp: <>
 6898 --test_entry_cmp: int (const struct test_entry *e1, const struct test_entry *e2, const char *key), <test-hashmap.c 16>
 6899 ---strcmp: <>
 6900 --fgets: <>
 6901 --strtok: <>
 6902 --strihash: unsigned int (const char *str), <hashmap.c 18>
 6903 ---hash: 1400
 6904 --strhash: 1402
 6905 --memhash: unsigned int (const void *buf, size_t len), <hashmap.c 29>
 6906 ---hash: 1400
 6907 --memihash: 6860
 6908 --alloc_test_entry: struct test_entry (int hash, char *key, int klen, char *value, int vlen), <test-hashmap.c 28>
 6909 --hashmap_add: 2003
 6910 --hashmap_put: void * (struct hashmap map, void *entry), <hashmap.c 200>
 6911 ---hashmap_remove: void * (struct hashmap map, const void *key, const void *keydata), <hashmap.c 181>
 6912 ----find_entry_ptr: inline struct hashmap_entry ** (const struct hashmap *map, const struct hashmap_entry *key, const void *keydata), <hashmap.c 109>
 6913 ----rehash: 2005
 6914 ---hashmap_add: 2003
 6915 --puts: <>
 6916 --get_value: const char * (const struct test_entry *e), <test-hashmap.c 11>
 6917 ---strlen: <>
 6918 --hashmap_get_from_hash: <>
 6919 --hashmap_get_next: 5694
 6920 --hashmap_entry_init: <>
 6921 --hashmap_remove: 6911
 6922 --hashmap_iter_init: 2141
 6923 --hashmap_iter_next: 2142
 6924 --strintern: <>
 6925 --perf_hashmap: void (unsigned int method, unsigned int rounds), <test-hashmap.c 76>
 6926 ---malloc: <>
 6927 ---snprintf: <>
 6928 ---alloc_test_entry: struct test_entry (int hash, char *key, int klen, char *value, int vlen), <test-hashmap.c 28>
 6929 ---strlen: <>
 6930 ---hash: 1400
 6931 ---hashmap_init: 1150
 6932 ---test_entry_cmp: 6898
 6933 ---hashmap_entry_init: <>
 6934 ---hashmap_add: 2003
 6935 ---hashmap_free: 2145
 6936 ---hashmap_get_from_hash: <>
 6937 --hashmap_free: 2145
 6938 --read: <>
 6939 --buffer_init: int (struct line_buffer buf, const char *filename), <vcs-svn/line_buffer.c 12>
 6940 ---fopen: <>
 6941 --buffer_fdinit: int (struct line_buffer buf, int fd), <vcs-svn/line_buffer.c 20>
 6942 ---fdopen: <>
 6943 --strtouint32: uint32_t (const char *s), <test-line-buffer.c 9>
 6944 ---strtoumax: <>
 6945 ---die: 29
 6946 --buffer_read_line: char * (struct line_buffer buf), <vcs-svn/line_buffer.c 73>
 6947 ---fgets: <>
 6948 ---strlen: <>
 6949 ---feof: <>
 6950 --handle_line: void (const char *line, struct line_buffer stdin_buf), <test-line-buffer.c 45>
 6951 ---strchr: <>
 6952 ---die: 29
 6953 ---handle_command: void (const char *command, const char *arg, struct line_buffer buf), <test-line-buffer.c 18>
 6954 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 6955 ----strbuf_addch: <>
 6956 ----buffer_read_binary: size_t (struct line_buffer buf, struct strbuf sb, size_t size), <vcs-svn/line_buffer.c 94>
 6957 -----strbuf_fread: 2754
 6958 ----strtouint32: 6943
 6959 ----fwrite: <>
 6960 ----strbuf_release: 63
 6961 ----buffer_copy_bytes: off_t (struct line_buffer buf, off_t nbytes), <vcs-svn/line_buffer.c 100>
 6962 -----done: <>
 6963 -----feof: <>
 6964 -----ferror: <>
 6965 -----fread: <>
 6966 -----fwrite: <>
 6967 -----buffer_skip_bytes: off_t (struct line_buffer buf, off_t nbytes), <vcs-svn/line_buffer.c 116>
 6968 ------done: <>
 6969 ------feof: <>
 6970 ------ferror: <>
 6971 ------fread: <>
 6972 ----buffer_skip_bytes: 6967
 6973 ----die: 29
 6974 --buffer_deinit: int (struct line_buffer buf), <vcs-svn/line_buffer.c 36>
 6975 ---ferror: <>
 6976 ---fclose: <>
 6977 --get_sha1: 1182
 6978 --parse_tree_indirect: struct tree (const unsigned char *sha1), <tree.c 235>
 6979 --shift_tree: void (const unsigned char *hash1, const unsigned char *hash2, unsigned char *shifted, int depth_limit), <match-trees.c 232>
 6980 ---score_trees: int (const unsigned char *hash1, const unsigned char *hash2), <match-trees.c 76>
 6981 ----fill_tree_desc_strict: void * (struct tree_desc desc, const unsigned char *hash), <match-trees.c 50>
 6982 -----read_sha1_file: <>
 6983 -----die: 29
 6984 -----sha1_to_hex: 1194
 6985 -----init_tree_desc: 1952
 6986 ----tree_entry: 2893
 6987 ----base_name_entries_compare: int (const struct name_entry *a, const struct name_entry *b), <match-trees.c 66>
 6988 -----base_name_compare: 2895
 6989 -----tree_entry_len: <>
 6990 ----score_missing: int (unsigned mode, const char *path), <match-trees.c 5>
 6991 -----S_ISDIR: <>
 6992 -----S_ISLNK: <>
 6993 ----hashcmp: <>
 6994 ----score_differs: int (unsigned mode1, unsigned mode2, const char *path), <match-trees.c 18>
 6995 -----S_ISDIR: <>
 6996 -----S_ISLNK: <>
 6997 ----score_matches: int (unsigned mode1, unsigned mode2, const char *path), <match-trees.c 31>
 6998 -----S_ISDIR: <>
 6999 -----S_ISLNK: <>
 7000 ----free: <>
 7001 ---xcalloc: 1153
 7002 ---match_trees: void (const unsigned char *hash1, const unsigned char *hash2, int *best_score, char **best_match, const char *base, int recurse_limit), <match-trees.c 122>
 7003 ----fill_tree_desc_strict: 6981
 7004 ----tree_entry_extract: <>
 7005 ----S_ISDIR: <>
 7006 ----score_trees: 6980
 7007 ----free: <>
 7008 ----xstrfmt: 1972
 7009 ----match_trees: 7002
 7010 ----update_tree_entry: 1962
 7011 ---hashcpy: <>
 7012 ---get_tree_entry: 1941
 7013 ---die: 29
 7014 ---sha1_to_hex: 1194
 7015 ---splice_tree: int (const unsigned char *hash1, const char *prefix, const unsigned char *hash2, unsigned char *result), <match-trees.c 164>
 7016 ----strchrnul: <>
 7017 ----read_sha1_file: <>
 7018 ----die: 29
 7019 ----sha1_to_hex: 1194
 7020 ----init_tree_desc: 1952
 7021 ----tree_entry_extract: <>
 7022 ----strlen: <>
 7023 ----memcmp: <>
 7024 ----S_ISDIR: <>
 7025 ----update_tree_entry: 1962
 7026 ----splice_tree: 7015
 7027 ----hashcpy: <>
 7028 ----write_sha1_file: 5807
 7029 ----free: <>
 7030 --strbuf_getwholeline: 565
 7031 --strbuf_detach: 190
 7032 --llist_mergesort: 1884
 7033 --get_next: void * (const void *a), <test-mergesort.c 9>
 7034 --set_next: void (void *a, void *b), <test-mergesort.c 14>
 7035 --compare_strings: int (const void *a, const void *b), <test-mergesort.c 19>
 7036 ---strcmp: <>
 7037 --xmkstemp: int (char *template), <wrapper.c 322>
 7038 ---strlcpy: <>
 7039 ---mkstemp: int (char *template), <compat/mingw.c 648>
 7040 ----mktemp: <>
 7041 ----open: <>
 7042 ---strlen: <>
 7043 ---absolute_path: 713
 7044 ---die_errno: 203
 7045 --OPT_COUNTUP: <>
 7046 --OPT_BIT: <>
 7047 --OPT_NEGBIT: <>
 7048 --OPT_GROUP: <>
 7049 --OPT_SET_INT: <>
 7050 --OPT_DATE: <>
 7051 --OPT_CALLBACK: <>
 7052 --length_callback: int (const struct option *opt, const char *arg, int unset), <test-parse-options.c 15>
 7053 ---printf: <>
 7054 ---strlen: <>
 7055 --OPT_FILENAME: <>
 7056 --OPT_NOOP_NOARG: <>
 7057 --OPT_STRING_LIST: <>
 7058 --OPT_ARGUMENT: <>
 7059 --OPT_NUMBER_CALLBACK: <>
 7060 --number_callback: int (const struct option *opt, const char *arg, int unset), <test-parse-options.c 26>
 7061 ---strtol: <>
 7062 --OPT__ABBREV: <>
 7063 --OPT__VERBOSE: <>
 7064 --OPT__DRY_RUN: <>
 7065 --OPT__QUIET: <>
 7066 --normalize_path_copy: 1347
 7067 --real_path: 949
 7068 --absolute_path: 713
 7069 --string_list_split: 2177
 7070 --filter_string_list: 2183
 7071 --normalize_ceiling_entry: int (struct string_list_item item, void *unused), <test-path-utils.c 9>
 7072 ---strlen: <>
 7073 ---die: 29
 7074 ---is_absolute_path: <>
 7075 ---normalize_path_copy: 1347
 7076 ---free: <>
 7077 ---xstrdup: 73
 7078 --longest_ancestor_length: 2192
 7079 --string_list_clear: 544
 7080 --prefix_path: 1902
 7081 --strip_path_suffix: 1046
 7082 --normalize_argv_string: void (const char **var, const char *input), <test-path-utils.c 31>
 7083 ---strcmp: <>
 7084 ---die: 29
 7085 --relative_path: const char * (const char *in, const char *prefix, struct strbuf sb), <path.c 448>
 7086 ---strlen: <>
 7087 ---have_same_root: int (const char *path1, const char *path2), <path.c 432>
 7088 ----is_absolute_path: <>
 7089 ----tolower: <>
 7090 ---has_dos_drive_prefix: <>
 7091 ---is_dir_sep: <>
 7092 ---strbuf_reset: <>
 7093 ---strbuf_grow: 53
 7094 ---strbuf_addstr: <>
 7095 --intcmp: int (const void *va, const void *vb, void *data), <test-prio-queue.c 4>
 7096 --show: 5596
 7097 --prio_queue_get: 6195
 7098 --malloc: <>
 7099 --prio_queue_put: 6187
 7100 --strtol: <>
 7101 --discard_cache: <>
 7102 --run_revision_walk: int (void), <test-revision-walking.c 26>
 7103 ---ARRAY_SIZE: <>
 7104 ---init_revisions: 5021
 7105 ---setup_revisions: 5108
 7106 ---prepare_revision_walk: 5583
 7107 ---die: 29
 7108 ---get_revision: struct commit (struct rev_info revs), <revision.c 3270>
 7109 ---print_commit: void (struct commit commit), <test-revision-walking.c 16>
 7110 ----format_commit_message: void (const struct commit *commit, const char *format, struct strbuf sb, const struct pretty_print_context *pretty_ctx), <pretty.c 1466>
 7111 -----memset: <>
 7112 -----logmsg_reencode: const char * (const struct commit *commit, char **commit_encoding, const char *output_encoding), <pretty.c 594>
 7113 ------get_commit_buffer: 1231
 7114 ------get_header: char * (const char *msg, const char *key), <pretty.c 556>
 7115 -------find_commit_header: 6176
 7116 -------xmemdupz: 120
 7117 ------same_encoding: int (const char *src, const char *dst), <utf8.c 412>
 7118 -------is_encoding_utf8: 5992
 7119 -------strcasecmp: <>
 7120 ------get_cached_commit_buffer: 1232
 7121 ------xstrdup: 73
 7122 ------reencode_string: <>
 7123 ------unuse_commit_buffer: 1241
 7124 ------replace_encoding_header: char * (char *buf, const char *encoding), <pretty.c 563>
 7125 -------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 7126 -------strchr: <>
 7127 -------strbuf_attach: 2732
 7128 -------strlen: <>
 7129 -------is_encoding_utf8: 5992
 7130 -------strbuf_remove: 4576
 7131 -------strbuf_splice: 1278
 7132 -------strbuf_detach: 190
 7133 ------free: <>
 7134 -----strbuf_expand: 875
 7135 -----format_commit_item: size_t (struct strbuf sb, const char *placeholder, void *context), <pretty.c 1388>
 7136 ------format_and_pad_commit: size_t (struct strbuf sb, const char *placeholder, struct format_commit_context c), <pretty.c 1287>
 7137 -------strrchr: <>
 7138 -------utf8_strnwidth: 105
 7139 -------format_commit_one: size_t (struct strbuf sb, const char *placeholder, void *context), <pretty.c 1049>
 7140 --------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 7141 --------parse_color: size_t (struct strbuf sb, const char *placeholder, struct format_commit_context c), <pretty.c 950>
 7142 ---------strchr: <>
 7143 ---------skip_prefix: <>
 7144 ---------want_color: int (int var), <color.c 297>
 7145 ----------check_auto_color: int (void), <color.c 285>
 7146 -----------isatty: <>
 7147 -----------pager_in_use: int (void), <pager.c 95>
 7148 ------------getenv: <>
 7149 ------------git_config_bool: 601
 7150 -----------getenv: <>
 7151 -----------strcmp: <>
 7152 ---------color_parse_mem: int (const char *value, int value_len, char *dst), <color.c 179>
 7153 ----------strncasecmp: <>
 7154 ----------strcpy: <>
 7155 ----------isspace: <>
 7156 ----------parse_color: int (struct color out, const char *name, int len), <color.c 63>
 7157 -----------match_word: int (const char *word, int len, const char *match), <color.c 48>
 7158 ------------strncasecmp: <>
 7159 -----------get_hex_color: int (const char *in, unsigned char *out), <color.c 53>
 7160 ------------hexval: <>
 7161 -----------ARRAY_SIZE: <>
 7162 -----------strtol: <>
 7163 ----------parse_attr: int (const char *name, int len), <color.c 126>
 7164 -----------ARRAY_SIZE: <>
 7165 -----------strncasecmp: <>
 7166 ----------color_empty: int (const struct color *c), <color.c 174>
 7167 ----------sprintf: <>
 7168 ----------color_output: char * (char *out, const struct color *c, char type), <color.c 153>
 7169 -----------sprintf: <>
 7170 ----------error: 12
 7171 ---------die: 29
 7172 ---------strbuf_addstr: <>
 7173 --------strbuf_addch: <>
 7174 --------strchr: <>
 7175 --------strtoul: <>
 7176 --------rewrap_message_tail: void (struct strbuf sb, struct format_commit_context c, size_t new_width, size_t new_indent1, size_t new_indent2), <pretty.c 917>
 7177 ---------strbuf_wrap: void (struct strbuf sb, size_t pos, size_t width, size_t indent1, size_t indent2), <pretty.c 904>
 7178 ----------strbuf_add: 81
 7179 ----------strbuf_add_wrapped_text: void (struct strbuf buf, const char *text, int indent1, int indent2, int width), <utf8.c 264>
 7180 -----------strbuf_add_indented_text: void (struct strbuf buf, const char *text, int indent, int indent2), <utf8.c 242>
 7181 ------------strchrnul: <>
 7182 ------------strbuf_addchars: void (struct strbuf sb, int c, size_t n), <strbuf.c 207>
 7183 -------------strbuf_grow: 53
 7184 -------------memset: <>
 7185 -------------strbuf_setlen: <>
 7186 ------------strbuf_add: 81
 7187 -----------display_mode_esc_sequence_len: 107
 7188 -----------isspace: <>
 7189 -----------strbuf_addchars: 7182
 7190 -----------strbuf_add: 81
 7191 -----------strbuf_addch: <>
 7192 -----------isalnum: <>
 7193 -----------utf8_width: 109
 7194 -----------strbuf_setlen: <>
 7195 ----------strbuf_swap: <>
 7196 ----------strbuf_release: 63
 7197 --------parse_padding_placeholder: size_t (struct strbuf sb, const char *placeholder, struct format_commit_context c), <pretty.c 983>
 7198 ---------strcspn: <>
 7199 ---------strtoul: <>
 7200 ---------strchr: <>
 7201 ---------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 7202 --------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 7203 --------strbuf_addstr: <>
 7204 --------diff_get_color: const char * (int diff_use_color, enum color_diff ix), <diff.c 1111>
 7205 ---------want_color: 7144
 7206 --------sha1_to_hex: 1194
 7207 --------add_again: int (struct strbuf sb, struct chunk chunk), <pretty.c 788>
 7208 ---------strbuf_adddup: void (struct strbuf sb, size_t pos, size_t len), <strbuf.c 200>
 7209 ----------strbuf_grow: 53
 7210 ----------memcpy: <>
 7211 ----------strbuf_setlen: <>
 7212 --------find_unique_abbrev: const char * (const unsigned char *sha1, int len), <sha1_name.c 370>
 7213 ---------memcpy: <>
 7214 ---------sha1_to_hex: 1194
 7215 ---------has_sha1_file: 1861
 7216 ---------get_short_sha1: 1414
 7217 --------get_revision_mark: char * (const struct rev_info *revs, const struct commit *commit), <revision.c 3304>
 7218 --------load_ref_decorations: 5296
 7219 --------format_decorations: <>
 7220 --------format_decorations_extended: void (struct strbuf sb, const struct commit *commit, int use_color, const char *prefix, const char *separator, const char *suffix), <log-tree.c 216>
 7221 ---------diff_get_color: 7204
 7222 ---------decorate_get_color: const char * (int decorate_use_color, enum decoration_type ix), <log-tree.c 27>
 7223 ----------want_color: 7144
 7224 ---------get_name_decoration: const struct name_decoration (const struct object *obj), <log-tree.c 85>
 7225 ---------current_pointed_by_HEAD: const struct name_decoration * (const struct name_decoration *decoration), <log-tree.c 179>
 7226 ---------strbuf_addstr: <>
 7227 --------get_reflog_selector: void (struct strbuf sb, struct reflog_walk_info reflog_info, enum date_mode dmode, int force_date, int shorten), <reflog-walk.c 250>
 7228 ---------shorten_unambiguous_ref: 1327
 7229 ---------strbuf_addf: 49
 7230 ---------strbuf_addstr: <>
 7231 ---------show_date: 1778
 7232 ---------strbuf_addch: <>
 7233 --------get_reflog_message: void (struct strbuf sb, struct reflog_walk_info reflog_info), <reflog-walk.c 284>
 7234 ---------strlen: <>
 7235 ---------strbuf_add: 81
 7236 --------format_reflog_person: int (struct strbuf sb, char part, struct reflog_walk_info log, enum date_mode dmode), <pretty.c 933>
 7237 ---------get_reflog_ident: const char * (struct reflog_walk_info reflog_info), <reflog-walk.c 301>
 7238 ---------format_person_part: size_t (struct strbuf sb, char part, const char *msg, int len, enum date_mode dmode), <pretty.c 673>
 7239 ----------split_ident_line: 6180
 7240 ----------mailmap_name: int (const char **email, size_t *email_len, const char **name, size_t *name_len), <pretty.c 662>
 7241 -----------xcalloc: 1153
 7242 -----------read_mailmap: int (struct string_list map, char **repo_abbrev), <mailmap.c 243>
 7243 ------------namemap_cmp: int (const char *a, const char *b), <mailmap.c 64>
 7244 -------------strcasecmp: <>
 7245 ------------is_bare_repository: 3213
 7246 ------------read_mailmap_file: int (struct string_list map, const char *filename, char **repo_abbrev), <mailmap.c 180>
 7247 -------------fopen: <>
 7248 -------------error: 12
 7249 -------------strerror: <>
 7250 -------------fgets: <>
 7251 -------------read_mailmap_line: void (struct string_list map, char *buffer, char **repo_abbrev), <mailmap.c 147>
 7252 --------------strlen: <>
 7253 --------------strncmp: <>
 7254 --------------free: <>
 7255 --------------xmalloc: 172
 7256 --------------isspace: <>
 7257 --------------strcpy: <>
 7258 --------------parse_name_and_email: char * (char *buffer, char **name, char **email, int allow_empty_email), <mailmap.c 118>
 7259 ---------------strchr: <>
 7260 ---------------isspace: <>
 7261 --------------add_mapping: void (struct string_list map, char *new_name, char *new_email, char *old_name, char *old_email), <mailmap.c 69>
 7262 ---------------string_list_insert: struct string_list_item (struct string_list list, const char *string), <string-list.c 60>
 7263 ---------------xcalloc: 1153
 7264 ---------------cmp: <>
 7265 ---------------namemap_cmp: 7243
 7266 ---------------debug_mm: inline void (const char *format, ...), <mailmap.c 10>
 7267 ---------------free: <>
 7268 ---------------xstrdup: 73
 7269 ---------------debug_str: inline const char * (const char *s), <mailmap.c 11>
 7270 -------------fclose: <>
 7271 ------------read_mailmap_blob: int (struct string_list map, const char *name, char **repo_abbrev), <mailmap.c 217>
 7272 -------------get_sha1: 1182
 7273 -------------read_sha1_file: <>
 7274 -------------error: 12
 7275 -------------read_mailmap_string: void (struct string_list map, char *buf, char **repo_abbrev), <mailmap.c 203>
 7276 --------------strchrnul: <>
 7277 --------------read_mailmap_line: 7251
 7278 -------------free: <>
 7279 -----------map_user: int (struct string_list map, const char **email, size_t *emaillen, const char **name, size_t *namelen), <mailmap.c 318>
 7280 ------------debug_mm: inline void (const char *format, ...), <mailmap.c 10>
 7281 ------------debug_str: inline const char * (const char *s), <mailmap.c 11>
 7282 ------------lookup_prefix: struct string_list_item (struct string_list map, const char *string, size_t len), <mailmap.c 271>
 7283 ------------strlen: <>
 7284 ----------strbuf_add: 81
 7285 ----------strbuf_addstr: <>
 7286 ----------show_ident_date: const char * (const struct ident_split *ident, enum date_mode mode), <pretty.c 401>
 7287 -----------strtoul: <>
 7288 -----------date_overflows: int (unsigned long t), <date.c 1135>
 7289 -----------strtol: <>
 7290 -----------show_date: 1778
 7291 ---------strlen: <>
 7292 --------result: 3863
 7293 --------check_commit_signature: void (const struct commit *commit, struct signature_check sigc), <commit.c 1230>
 7294 ---------parse_signed_commit: int (const struct commit *commit, struct strbuf payload, struct strbuf signature), <commit.c 1116>
 7295 ----------get_commit_buffer: 1231
 7296 ----------memchr: <>
 7297 ----------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 7298 ----------strbuf_add: 81
 7299 ----------unuse_commit_buffer: 1241
 7300 ---------verify_signed_buffer: int (const char *payload, size_t payload_size, const char *signature, size_t signature_size, struct strbuf gpg_output, struct strbuf gpg_status), <gpg-interface.c 171>
 7301 ----------git_mkstemp: int (char *path, size_t len, const char *template), <wrapper.c 345>
 7302 -----------getenv: <>
 7303 -----------snprintf: <>
 7304 -----------mkstemp: 7039
 7305 ----------error: 12
 7306 ----------strerror: <>
 7307 ----------write_in_full: 240
 7308 ----------close: <>
 7309 ----------start_command: 255
 7310 ----------unlink: <>
 7311 ----------strbuf_read: 197
 7312 ----------finish_command: 2027
 7313 ----------unlink_or_warn: 658
 7314 ----------strstr: <>
 7315 ----------strbuf_release: 63
 7316 ---------strbuf_detach: 190
 7317 ---------parse_gpg_output: void (struct signature_check sigc), <gpg-interface.c 37>
 7318 ----------ARRAY_SIZE: <>
 7319 ----------skip_prefix: <>
 7320 ----------strstr: <>
 7321 ----------strlen: <>
 7322 ----------result: 3863
 7323 ----------xmemdupz: 120
 7324 ----------strchrnul: <>
 7325 ---------strbuf_release: 63
 7326 --------parse_commit_header: void (struct format_commit_context context), <pretty.c 805>
 7327 ---------skip_prefix: <>
 7328 --------format_person_part: 7238
 7329 --------parse_commit_message: void (struct format_commit_context c), <pretty.c 889>
 7330 ---------skip_empty_lines: const char * (const char *msg), <pretty.c 517>
 7331 ----------get_one_line: int (const char *msg), <pretty.c 184>
 7332 ----------is_empty_line: int (const char *line, int *len_p), <pretty.c 508>
 7333 -----------isspace: <>
 7334 ---------format_subject: const char * (struct strbuf sb, const char *msg, const char *line_separator), <pretty.c 865>
 7335 ----------get_one_line: int (const char *msg), <pretty.c 184>
 7336 ----------is_empty_line: 7332
 7337 ----------strbuf_grow: 53
 7338 ----------strbuf_addstr: <>
 7339 ----------strbuf_add: 81
 7340 --------format_subject: 7334
 7341 --------format_sanitized_subject: void (struct strbuf sb, const char *msg), <pretty.c 837>
 7342 ---------istitlechar: int (char c), <pretty.c 831>
 7343 ---------strbuf_addch: <>
 7344 ---------strbuf_remove: 4576
 7345 -------display_mode_esc_sequence_len: 107
 7346 -------strbuf_insert: 5336
 7347 -------strbuf_setlen: <>
 7348 -------strbuf_utf8_replace: void (struct strbuf sb_src, int pos, int width, const char *subst), <utf8.c 354>
 7349 --------strlen: <>
 7350 --------strbuf_grow: 53
 7351 --------display_mode_esc_sequence_len: 107
 7352 --------memcpy: <>
 7353 --------utf8_width: 109
 7354 --------strbuf_setlen: <>
 7355 --------strbuf_swap: <>
 7356 --------strbuf_release: 63
 7357 -------strbuf_addbuf: <>
 7358 -------strbuf_addchars: 7182
 7359 -------memcpy: <>
 7360 -------strbuf_release: 63
 7361 ------format_commit_one: 7139
 7362 ------strbuf_setlen: <>
 7363 ------strbuf_insert: 5336
 7364 -----rewrap_message_tail: 7176
 7365 -----same_encoding: 7117
 7366 -----reencode_string_len: char * (const char *in, int insz, const char *out_encoding, const char *in_encoding, int *outsz), <utf8.c 492>
 7367 ------iconv_open: <>
 7368 ------is_encoding_utf8: 5992
 7369 ------reencode_string_iconv: 171
 7370 ------iconv_close: <>
 7371 -----strbuf_attach: 2732
 7372 -----free: <>
 7373 -----unuse_commit_buffer: 1241
 7374 ----printf: <>
 7375 ----strbuf_release: 63
 7376 ---reset_revision_walk: void (void), <revision.c 2726>
 7377 ----clear_object_flags: void (unsigned flags), <object.c 417>
 7378 --start_command: 255
 7379 --run_command: 3633
 7380 --hold_locked_index: int (struct lock_file lk, int die_on_error), <read-cache.c 1385>
 7381 ---hold_lock_file_for_update: 645
 7382 ---get_index_file: char * (void), <environment.c 263>
 7383 ----setup_git_env: 976
 7384 --write_locked_index: int (struct index_state istate, struct lock_file lock, unsigned flags), <read-cache.c 2157>
 7385 ---hashclr: <>
 7386 ---do_write_locked_index: int (struct index_state istate, struct lock_file lock, unsigned flags), <read-cache.c 2077>
 7387 ----do_write_index: int (struct index_state istate, int newfd, int strip_extensions), <read-cache.c 1957>
 7388 -----get_index_format_default: unsigned int (void), <read-cache.c 1264>
 7389 ------getenv: <>
 7390 ------git_config_get_int: 2248
 7391 ------warning: 552
 7392 ------strtoul: <>
 7393 -----getenv: <>
 7394 -----init_split_index: struct split_index (struct index_state istate), <split-index.c 5>
 7395 -----htonl: <>
 7396 -----git_SHA1_Init: <>
 7397 -----ce_write: int (git_SHA_CTX *context, int fd, void *data, unsigned int len), <read-cache.c 1699>
 7398 ------memcpy: <>
 7399 ------ce_write_flush: int (git_SHA_CTX *context, int fd), <read-cache.c 1687>
 7400 -------git_SHA1_Update: <>
 7401 -------write_in_full: 240
 7402 -----ce_uptodate: <>
 7403 -----is_racy_timestamp: int (const struct index_state *istate, const struct cache_entry *ce), <read-cache.c 273>
 7404 ------S_ISGITLINK: <>
 7405 -----ce_smudge_racily_clean_entry: void (struct cache_entry ce), <read-cache.c 1753>
 7406 ------lstat: <>
 7407 ------ce_match_stat_basic: int (const struct cache_entry *ce, struct stat st), <read-cache.c 229>
 7408 -------S_ISREG: <>
 7409 -------S_ISLNK: <>
 7410 -------S_ISDIR: <>
 7411 -------ce_compare_gitlink: int (const struct cache_entry *ce), <read-cache.c 192>
 7412 --------resolve_gitlink_ref: 3227
 7413 --------hashcmp: <>
 7414 -------die: 29
 7415 -------match_stat_data: int (const struct stat_data *sd, struct stat st), <read-cache.c 99>
 7416 --------ST_MTIME_NSEC: <>
 7417 --------ST_CTIME_NSEC: <>
 7418 -------is_empty_blob_sha1: <>
 7419 ------ce_modified_check_fs: int (const struct cache_entry *ce, struct stat st), <read-cache.c 209>
 7420 -------ce_compare_data: int (const struct cache_entry *ce, struct stat st), <read-cache.c 157>
 7421 --------open: <>
 7422 --------index_fd: int (unsigned char *sha1, int fd, struct stat st, enum object_type type, const char *path, unsigned flags), <sha1_file.c 3220>
 7423 ---------would_convert_to_git_filter_fd: int (const char *path), <convert.c 756>
 7424 ----------convert_attrs: 4037
 7425 ----------apply_filter: 4156
 7426 ---------index_stream_convert_blob: int (unsigned char *sha1, int fd, const char *path, unsigned flags), <sha1_file.c 3136>
 7427 ----------write_object: unsigned long (struct sha1file f, struct object_entry entry, off_t write_offset), <builtin/pack-objects.c 418>
 7428 -----------crc32_begin: 2803
 7429 -----------write_no_reuse_object: unsigned long (struct sha1file f, struct object_entry entry, unsigned long limit, int usable_delta), <builtin/pack-objects.c 236>
 7430 ------------open_istream: struct git_istream (const unsigned char *sha1, enum object_type type, unsigned long *size, struct stream_filter filter), <streaming.c 132>
 7431 ------------read_sha1_file: <>
 7432 ------------die: 29
 7433 ------------sha1_to_hex: 1194
 7434 ------------free: <>
 7435 ------------get_delta: void * (struct object_entry entry), <builtin/pack-objects.c 101>
 7436 -------------read_sha1_file: <>
 7437 -------------die: 29
 7438 -------------sha1_to_hex: 1194
 7439 -------------diff_delta: <>
 7440 -------------free: <>
 7441 ------------do_compress: unsigned long (void **pptr, unsigned long size), <builtin/pack-objects.c 122>
 7442 -------------git_deflate_init: 2774
 7443 -------------git_deflate_bound: 2781
 7444 -------------xmalloc: 172
 7445 -------------git_deflate: 2784
 7446 -------------git_deflate_end: 2791
 7447 -------------free: <>
 7448 ------------encode_in_pack_object_header: 2805
 7449 ------------close_istream: int (struct git_istream st), <streaming.c 95>
 7450 -------------close: <>
 7451 -------------free: <>
 7452 ------------sha1write: 2349
 7453 ------------write_large_blob_data: unsigned long (struct git_istream st, struct sha1file f, const unsigned char *sha1), <builtin/pack-objects.c 147>
 7454 -------------git_deflate_init: 2774
 7455 -------------read_istream: ssize_t (struct git_istream st, void *buf, size_t sz), <streaming.c 102>
 7456 --------------read: <>
 7457 -------------die: 29
 7458 -------------sha1_to_hex: 1194
 7459 -------------git_deflate: 2784
 7460 -------------sha1write: 2349
 7461 -------------git_deflate_end: 2791
 7462 -----------write_reuse_object: unsigned long (struct sha1file f, struct object_entry entry, unsigned long limit, int usable_delta), <builtin/pack-objects.c 344>
 7463 ------------encode_in_pack_object_header: 2805
 7464 ------------find_pack_revindex: struct revindex_entry (struct packed_git p, off_t ofs), <pack-revindex.c 238>
 7465 ------------check_pack_crc: 2654
 7466 ------------error: 12
 7467 ------------sha1_to_hex: 1194
 7468 ------------unuse_pack: 1671
 7469 ------------write_no_reuse_object: 7429
 7470 ------------check_pack_inflate: int (struct packed_git p, struct pack_window w_curs, off_t offset, off_t len, unsigned long expect), <builtin/pack-objects.c 190>
 7471 -------------memset: <>
 7472 -------------git_inflate_init: 1605
 7473 -------------use_pack: 1635
 7474 -------------git_inflate: 1613
 7475 -------------git_inflate_end: 1624
 7476 ------------sha1write: 2349
 7477 ------------copy_pack_data: void (struct sha1file f, struct packed_git p, struct pack_window w_curs, off_t offset, off_t len), <builtin/pack-objects.c 216>
 7478 -------------use_pack: 1635
 7479 -------------sha1write: 2349
 7480 -----------crc32: <>
 7481 -----------crc32_end: uint32_t (struct sha1file f), <csum-file.c 182>
 7482 ----------assert: <>
 7483 ----------would_convert_to_git_filter_fd: 7423
 7484 ----------convert_to_git_filter_fd: void (const char *path, int fd, struct strbuf dst, enum safe_crlf checksafe), <convert.c 806>
 7485 -----------convert_attrs: 4037
 7486 -----------assert: <>
 7487 -----------apply_filter: 4156
 7488 -----------die: 29
 7489 -----------input_crlf_action: enum crlf_action (enum crlf_action text_attr, enum eol eol_attr), <convert.c 706>
 7490 -----------crlf_to_git: 4227
 7491 -----------ident_to_git: 4241
 7492 ----------write_sha1_file: 5807
 7493 ----------typename: 1237
 7494 ----------hash_sha1_file: 4131
 7495 ----------strbuf_release: 63
 7496 ---------S_ISREG: <>
 7497 ---------index_pipe: int (unsigned char *sha1, int fd, enum object_type type, const char *path, unsigned flags), <sha1_file.c 3159>
 7498 ----------strbuf_read: 197
 7499 ----------index_mem: int (unsigned char *sha1, void *buf, size_t size, enum object_type type, const char *path, unsigned flags), <sha1_file.c 3097>
 7500 -----------convert_to_git: 4222
 7501 -----------strbuf_detach: 190
 7502 -----------check_tree: void (const void *buf, size_t size), <sha1_file.c 3069>
 7503 ------------init_tree_desc: 1952
 7504 ------------tree_entry: 2893
 7505 -----------check_commit: void (const void *buf, size_t size), <sha1_file.c 3081>
 7506 ------------memset: <>
 7507 ------------parse_commit_buffer: 1196
 7508 ------------die: 29
 7509 -----------check_tag: void (const void *buf, size_t size), <sha1_file.c 3089>
 7510 ------------memset: <>
 7511 ------------parse_tag_buffer: 4424
 7512 ------------die: 29
 7513 -----------write_sha1_file: 5807
 7514 -----------typename: 1237
 7515 -----------hash_sha1_file: 4131
 7516 -----------free: <>
 7517 ----------strbuf_release: 63
 7518 ---------would_convert_to_git: <>
 7519 ---------index_core: int (unsigned char *sha1, int fd, size_t size, enum object_type type, const char *path, unsigned flags), <sha1_file.c 3175>
 7520 ----------index_mem: 7499
 7521 ----------xmalloc: 172
 7522 ----------read_in_full: 245
 7523 ----------error: 12
 7524 ----------strerror: <>
 7525 ----------free: <>
 7526 ----------xmmap: 1456
 7527 ----------munmap: <>
 7528 ---------xsize_t: <>
 7529 ---------index_stream: int (unsigned char *sha1, int fd, size_t size, enum object_type type, const char *path, unsigned flags), <sha1_file.c 3213>
 7530 ----------index_bulk_checkin: int (unsigned char *sha1, int fd, size_t size, enum object_type type, const char *path, unsigned flags), <bulk-checkin.c 256>
 7531 -----------deflate_to_pack: int (struct bulk_checkin_state state, unsigned char result_sha1[], int fd, size_t size, enum object_type type, const char *path, unsigned flags), <bulk-checkin.c 186>
 7532 ------------lseek: <>
 7533 ------------error: 12
 7534 ------------sprintf: <>
 7535 ------------typename: 1237
 7536 ------------git_SHA1_Init: <>
 7537 ------------git_SHA1_Update: <>
 7538 ------------xcalloc: 1153
 7539 ------------prepare_to_stream: void (struct bulk_checkin_state state, unsigned flags), <bulk-checkin.c 171>
 7540 -------------create_tmp_packfile: struct sha1file (char **pack_tmp_name), <pack-write.c 328>
 7541 -------------reset_pack_idx_option: 2238
 7542 -------------write_pack_header: off_t (struct sha1file f, uint32_t nr_entries), <pack-write.c 179>
 7543 --------------htonl: <>
 7544 --------------sha1write: 2349
 7545 -------------die_errno: 203
 7546 ------------sha1file_checkpoint: 2815
 7547 ------------crc32_begin: 2803
 7548 ------------stream_to_pack: int (struct bulk_checkin_state state, git_SHA_CTX *ctx, off_t *already_hashed_to, int fd, size_t size, enum object_type type, const char *path, unsigned flags), <bulk-checkin.c 96>
 7549 -------------git_deflate_init: 2774
 7550 -------------encode_in_pack_object_header: 2805
 7551 -------------read_in_full: 245
 7552 -------------die: 29
 7553 -------------git_SHA1_Update: <>
 7554 -------------git_deflate: 2784
 7555 -------------git_deflate_abort: 2792
 7556 -------------sha1write: 2349
 7557 -------------git_deflate_end: 2791
 7558 ------------die: 29
 7559 ------------sha1file_truncate: 2834
 7560 ------------finish_bulk_checkin: void (struct bulk_checkin_state state), <bulk-checkin.c 25>
 7561 -------------close: <>
 7562 -------------unlink: <>
 7563 -------------sha1close: 2439
 7564 -------------fixup_pack_header_footer: 2454
 7565 -------------strbuf_addf: 49
 7566 -------------get_object_directory: 1423
 7567 -------------finish_tmp_packfile: void (struct strbuf name_buffer, const char *pack_tmp_name, struct pack_idx_entry written_list, uint32_t nr_written, struct pack_idx_option pack_idx_opts, unsigned char sha1[]), <pack-write.c 338>
 7568 --------------adjust_shared_perm: 702
 7569 --------------die_errno: 203
 7570 --------------write_idx_file: 2505
 7571 --------------strbuf_addf: 49
 7572 --------------sha1_to_hex: 1194
 7573 --------------free_pack_by_name: void (const char *pack_name), <sha1_file.c 848>
 7574 ---------------strcmp: <>
 7575 ---------------clear_delta_base_cache: 2432
 7576 ---------------close_pack_windows: 2435
 7577 ---------------close: <>
 7578 ---------------close_pack_index: 4680
 7579 ---------------free: <>
 7580 --------------rename: <>
 7581 --------------strbuf_setlen: <>
 7582 --------------free: <>
 7583 -------------free: <>
 7584 -------------memset: <>
 7585 -------------strbuf_release: 63
 7586 -------------reprepare_packed_git: 1631
 7587 ------------git_SHA1_Final: <>
 7588 ------------crc32_end: uint32_t (struct sha1file f), <csum-file.c 182>
 7589 ------------already_written: int (struct bulk_checkin_state state, unsigned char sha1[]), <bulk-checkin.c 64>
 7590 -------------has_sha1_file: 1861
 7591 -------------hashcmp: <>
 7592 ------------free: <>
 7593 ------------hashcpy: <>
 7594 ------------ALLOC_GROW: <>
 7595 -----------finish_bulk_checkin: 7560
 7596 ---------close: <>
 7597 --------hashcmp: <>
 7598 -------ce_compare_link: int (const struct cache_entry *ce, size_t expected_size), <read-cache.c 171>
 7599 --------strbuf_readlink: 687
 7600 --------read_sha1_file: <>
 7601 --------memcmp: <>
 7602 --------free: <>
 7603 --------strbuf_release: 63
 7604 -------xsize_t: <>
 7605 -------S_ISGITLINK: <>
 7606 -------ce_compare_gitlink: 7411
 7607 -----is_null_sha1: <>
 7608 -----git_env_bool: 1034
 7609 -----warning: 552
 7610 -----error: 12
 7611 -----ce_write_entry: int (git_SHA_CTX *c, int fd, struct cache_entry ce, struct strbuf previous_name), <read-cache.c 1834>
 7612 ------ce_namelen: <>
 7613 ------ondisk_ce_size: <>
 7614 ------xcalloc: 1153
 7615 ------copy_cache_entry_to_ondisk: char * (struct ondisk_cache_entry ondisk, struct cache_entry ce), <read-cache.c 1803>
 7616 -------htonl: <>
 7617 -------hashcpy: <>
 7618 -------ce_namelen: <>
 7619 -------htons: <>
 7620 ------memcpy: <>
 7621 ------encode_varint: int (uintmax_t value, unsigned char *buf), <varint.c 20>
 7622 -------memcpy: <>
 7623 ------offsetof: <>
 7624 ------strbuf_splice: 1278
 7625 ------ce_write: 7397
 7626 ------free: <>
 7627 -----strbuf_release: 63
 7628 -----write_link_extension: int (struct strbuf sb, struct index_state istate), <split-index.c 51>
 7629 ------strbuf_add: 81
 7630 ------ewah_serialize_to: int (struct ewah_bitmap self, int (*write_fun) (void *, const void *, size_t), void *data), <ewah/ewah_io.c 49>
 7631 -------htonl: <>
 7632 -------htonll: <>
 7633 ------write_strbuf: int (void *user_data, const void *data, size_t len), <split-index.c 44>
 7634 -------strbuf_add: 81
 7635 -----write_index_ext_header: int (git_SHA_CTX *context, int fd, unsigned int ext, unsigned int sz), <read-cache.c 1721>
 7636 ------htonl: <>
 7637 ------ce_write: 7397
 7638 -----cache_tree_write: void (struct strbuf sb, struct cache_tree root), <cache-tree.c 475>
 7639 ------write_one: void (struct strbuf buffer, struct cache_tree it, const char *path, int pathlen), <cache-tree.c 435>
 7640 -------strbuf_grow: 53
 7641 -------strbuf_add: 81
 7642 -------strbuf_addf: 49
 7643 -------fprintf: <>
 7644 -------sha1_to_hex: 1194
 7645 -------subtree_name_cmp: int (const char *one, int onelen, const char *two, int twolen), <cache-tree.c 35>
 7646 --------memcmp: <>
 7647 -------die: 29
 7648 -------write_one: 7639
 7649 -----resolve_undo_write: void (struct strbuf sb, struct string_list resolve_undo), <resolve-undo.c 31>
 7650 ------for_each_string_list_item: <>
 7651 ------strbuf_addstr: <>
 7652 ------strbuf_addch: <>
 7653 ------strbuf_addf: 49
 7654 ------strbuf_add: 81
 7655 -----ce_flush: int (git_SHA_CTX *context, int fd, unsigned char *sha1), <read-cache.c 1730>
 7656 ------git_SHA1_Update: <>
 7657 ------write_in_full: 240
 7658 ------git_SHA1_Final: <>
 7659 ------hashcpy: <>
 7660 -----fstat: <>
 7661 -----ST_MTIME_NSEC: <>
 7662 ----assert: <>
 7663 ----commit_locked_index: int (struct lock_file lk), <read-cache.c 2069>
 7664 -----commit_lock_file_to: 727
 7665 -----commit_lock_file: 723
 7666 ----close_lock_file: 653
 7667 ---getenv: <>
 7668 ---write_shared_index: int (struct index_state istate, struct lock_file lock, unsigned flags), <read-cache.c 2122>
 7669 ----git_pathdup: 983
 7670 ----mkstemp: 7039
 7671 ----free: <>
 7672 ----hashclr: <>
 7673 ----do_write_locked_index: 7386
 7674 ----atexit: <>
 7675 ----remove_temporary_sharedindex: void (void), <read-cache.c 2106>
 7676 -----unlink_or_warn: 658
 7677 -----free: <>
 7678 ----sigchain_push_common: 398
 7679 ----remove_temporary_sharedindex_on_signal: void (int signo), <read-cache.c 2115>
 7680 -----remove_temporary_sharedindex: 7675
 7681 -----sigchain_pop: 406
 7682 -----raise: <>
 7683 ----move_cache_to_base_index: void (struct index_state istate), <split-index.c 77>
 7684 -----xcalloc: 1153
 7685 -----ALLOC_GROW: <>
 7686 -----memcpy: <>
 7687 -----mark_base_index_entries: void (struct index_state base), <split-index.c 63>
 7688 ----do_write_index: 7387
 7689 ----close: <>
 7690 ----rename: <>
 7691 ----git_path: 1267
 7692 ----sha1_to_hex: 1194
 7693 ----hashcpy: <>
 7694 ---write_split_index: int (struct index_state istate, struct lock_file lock, unsigned flags), <read-cache.c 2093>
 7695 ----prepare_to_write_split_index: void (struct index_state istate), <split-index.c 186>
 7696 -----init_split_index: struct split_index (struct index_state istate), <split-index.c 5>
 7697 -----ewah_new: struct ewah_bitmap (void), <ewah/ewah_bitmap.c 281>
 7698 -----strcmp: <>
 7699 -----memcmp: <>
 7700 -----offsetof: <>
 7701 -----free: <>
 7702 -----ewah_set: void (struct ewah_bitmap self, size_t i), <ewah/ewah_bitmap.c 211>
 7703 ------assert: <>
 7704 ------add_empty_words: size_t (struct ewah_bitmap self, int v, size_t number), <ewah/ewah_bitmap.c 61>
 7705 -------rlw_get_run_bit: <>
 7706 -------rlw_size: <>
 7707 -------rlw_set_run_bit: <>
 7708 -------rlw_get_literal_words: <>
 7709 -------buffer_push_rlw: void (struct ewah_bitmap self, eword_t value), <ewah/ewah_bitmap.c 55>
 7710 --------buffer_push: inline void (struct ewah_bitmap self, eword_t value), <ewah/ewah_bitmap.c 47>
 7711 ---------buffer_grow: inline void (struct ewah_bitmap self, size_t new_size), <ewah/ewah_bitmap.c 34>
 7712 ----------ewah_realloc: <>
 7713 -------rlw_get_running_len: <>
 7714 -------min_size: inline size_t (size_t a, size_t b), <ewah/ewah_bitmap.c 24>
 7715 -------rlw_set_running_len: <>
 7716 ------add_literal: size_t (struct ewah_bitmap self, eword_t new_data), <ewah/ewah_bitmap.c 109>
 7717 -------rlw_get_literal_words: <>
 7718 -------buffer_push_rlw: 7709
 7719 -------rlw_set_literal_words: <>
 7720 -------buffer_push: 7710
 7721 -------assert: <>
 7722 ------rlw_get_literal_words: <>
 7723 ------rlw_set_running_len: <>
 7724 ------rlw_get_running_len: <>
 7725 ------rlw_set_literal_words: <>
 7726 ------add_empty_word: size_t (struct ewah_bitmap self, int v), <ewah/ewah_bitmap.c 166>
 7727 -------rlw_get_literal_words: <>
 7728 -------rlw_get_running_len: <>
 7729 -------rlw_set_run_bit: <>
 7730 -------assert: <>
 7731 -------rlw_get_run_bit: <>
 7732 -------rlw_set_running_len: <>
 7733 -------buffer_push_rlw: 7709
 7734 -----ALLOC_GROW: <>
 7735 -----assert: <>
 7736 ----do_write_locked_index: 7386
 7737 ----finish_writing_split_index: void (struct index_state istate), <split-index.c 274>
 7738 -----init_split_index: struct split_index (struct index_state istate), <split-index.c 5>
 7739 -----ewah_free: void (struct ewah_bitmap self), <ewah/ewah_bitmap.c 304>
 7740 ------free: <>
 7741 -----free: <>
 7742 --get_sha1_hex: 931
 7743 --sha1_array_append: void (struct sha1_array array, const unsigned char *sha1), <sha1-array.c 5>
 7744 ---ALLOC_GROW: <>
 7745 ---hashcpy: <>
 7746 --sha1_array_lookup: int (struct sha1_array array, const unsigned char *sha1), <sha1-array.c 29>
 7747 ---sha1_array_sort: void (struct sha1_array array), <sha1-array.c 17>
 7748 ----qsort: <>
 7749 ----void_hashcmp: int (const void *a, const void *b), <sha1-array.c 12>
 7750 -----hashcmp: <>
 7751 ---sha1_pos: int (const unsigned char *sha1, void *table, size_t nr, sha1_access_fn fn), <sha1-lookup.c 53>
 7752 ----take2: uint32_t (const unsigned char *sha1), <sha1-lookup.c 4>
 7753 ----die: 29
 7754 ----hashcmp: <>
 7755 ---sha1_access: const unsigned char * (size_t index, void *table), <sha1-array.c 23>
 7756 --sha1_array_clear: void (struct sha1_array array), <sha1-array.c 36>
 7757 ---free: <>
 7758 --sha1_array_for_each_unique: void (struct sha1_array array, for_each_sha1_fn fn, void *data), <sha1-array.c 45>
 7759 ---sha1_array_sort: 7747
 7760 ---hashcmp: <>
 7761 --print_sha1: void (const unsigned char sha1[20], void *data), <test-sha1-array.c 4>
 7762 ---puts: <>
 7763 ---sha1_to_hex: 1194
 7764 --git_SHA1_Init: <>
 7765 --xread: 199
 7766 --git_SHA1_Update: <>
 7767 --git_SHA1_Final: <>
 7768 --fwrite: <>
 7769 --write_list: void (const struct string_list *list), <test-string-list.c 18>
 7770 ---printf: <>
 7771 --string_list_split_in_place: 1427
 7772 --parse_string_list: void (struct string_list list, const char *arg), <test-string-list.c 10>
 7773 ---strcmp: <>
 7774 ---string_list_split: 2177
 7775 --prefix_cb: int (struct string_list_item item, void *cb_data), <test-string-list.c 38>
 7776 ---starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 7777 --write_list_compact: void (const struct string_list *list), <test-string-list.c 25>
 7778 ---printf: <>
 7779 --string_list_remove_duplicates: void (struct string_list list, int free_util), <string-list.c 95>
 7780 ---cmp: <>
 7781 ---strcmp: <>
 7782 ---free: <>
 7783 --setup_work_tree: 3558
 7784 --svndump_init: int (const char *filename), <vcs-svn/svndump.c 501>
 7785 ---buffer_init: 6939
 7786 ---error: 12
 7787 ---strerror: <>
 7788 ---init: void (int report_fd), <vcs-svn/svndump.c 485>
 7789 ----fast_export_init: void (int fd), <vcs-svn/fast_export.c 31>
 7790 -----buffer_fdinit: 6941
 7791 -----die_errno: 203
 7792 ----strbuf_init: 65
 7793 ----reset_dump_ctx: void (const char *url), <vcs-svn/svndump.c 83>
 7794 -----strbuf_reset: <>
 7795 -----strbuf_addstr: <>
 7796 ----reset_rev_ctx: void (uint32_t revision), <vcs-svn/svndump.c 74>
 7797 -----strbuf_reset: <>
 7798 ----reset_node_ctx: void (char *fname), <vcs-svn/svndump.c 59>
 7799 -----strbuf_reset: <>
 7800 -----strbuf_addstr: <>
 7801 --svndump_read: void (const char *url, const char *local_ref, const char *notes_ref), <vcs-svn/svndump.c 325>
 7802 ---reset_dump_ctx: 7793
 7803 ---buffer_read_line: 6946
 7804 ---strchr: <>
 7805 ---constcmp: <>
 7806 ---atoi: <>
 7807 ---die: 29
 7808 ---strbuf_reset: <>
 7809 ---strbuf_addstr: <>
 7810 ---handle_node: void (void), <vcs-svn/svndump.c 209>
 7811 ----die: 29
 7812 ----repo_delete: void (const char *path), <vcs-svn/repo_tree.c 45>
 7813 -----fast_export_delete: void (const char *path), <vcs-svn/fast_export.c 44>
 7814 ------putchar: <>
 7815 ------quote_c_style: 2917
 7816 ----repo_copy: void (uint32_t revision, const char *src, const char *dst), <vcs-svn/repo_tree.c 28>
 7817 -----strbuf_reset: <>
 7818 -----fast_export_ls_rev: int (uint32_t rev, const char *path, uint32_t *mode, struct strbuf dataref), <vcs-svn/fast_export.c 302>
 7819 ------ls_from_rev: void (uint32_t rev, const char *path), <vcs-svn/fast_export.c 130>
 7820 -------printf: <>
 7821 -------quote_c_style: 2917
 7822 -------putchar: <>
 7823 -------fflush: <>
 7824 ------parse_ls_response: int (const char *response, uint32_t *mode, struct strbuf dataref), <vcs-svn/fast_export.c 261>
 7825 -------assert: <>
 7826 -------strlen: <>
 7827 -------die: 29
 7828 -------memchr: <>
 7829 -------strbuf_add: 81
 7830 ------get_response_line: const char * (void), <vcs-svn/fast_export.c 148>
 7831 -------buffer_read_line: 6946
 7832 -------buffer_ferror: int (struct line_buffer buf), <vcs-svn/line_buffer.c 62>
 7833 --------ferror: <>
 7834 -------die_errno: 203
 7835 -------die: 29
 7836 -----die_errno: 203
 7837 -----fast_export_delete: 7813
 7838 -----fast_export_modify: void (const char *path, uint32_t mode, const char *dataref), <vcs-svn/fast_export.c 58>
 7839 ------fast_export_truncate: void (const char *path, uint32_t mode), <vcs-svn/fast_export.c 52>
 7840 -------fast_export_modify: 7838
 7841 -------printf: <>
 7842 ------printf: <>
 7843 ------quote_c_style: 2917
 7844 ------putchar: <>
 7845 ----repo_read_path: const char * (const char *path, uint32_t *mode_out), <vcs-svn/repo_tree.c 11>
 7846 -----strbuf_reset: <>
 7847 -----fast_export_ls: int (const char *path, uint32_t *mode, struct strbuf dataref), <vcs-svn/fast_export.c 309>
 7848 ------ls_from_active_commit: void (const char *path), <vcs-svn/fast_export.c 139>
 7849 -------printf: <>
 7850 -------quote_c_style: 2917
 7851 -------fflush: <>
 7852 ------parse_ls_response: 7824
 7853 ------get_response_line: 7830
 7854 -----die_errno: 203
 7855 ----read_props: void (void), <vcs-svn/svndump.c 154>
 7856 -----buffer_read_line: 6946
 7857 -----strcmp: <>
 7858 -----die: 29
 7859 -----atoi: <>
 7860 -----strbuf_reset: <>
 7861 -----buffer_read_binary: 6956
 7862 -----die_short_read: void (void), <vcs-svn/svndump.c 147>
 7863 ------buffer_ferror: 7832
 7864 ------die_errno: 203
 7865 ------die: 29
 7866 -----buffer_read_char: int (struct line_buffer buf), <vcs-svn/line_buffer.c 67>
 7867 ------fgetc: <>
 7868 -----strbuf_swap: <>
 7869 -----handle_property: void (const struct strbuf *key_buf, struct strbuf val, uint32_t *type_set), <vcs-svn/svndump.c 92>
 7870 ------constcmp: <>
 7871 ------die: 29
 7872 ------strbuf_swap: <>
 7873 ------strbuf_reset: <>
 7874 ------parse_date_basic: 1719
 7875 ------warning: 552
 7876 ------strlen: <>
 7877 ----assert: <>
 7878 ----fast_export_modify: 7838
 7879 ----fast_export_data: void (uint32_t mode, off_t len, struct line_buffer input), <vcs-svn/fast_export.c 244>
 7880 -----assert: <>
 7881 -----die: 29
 7882 -----buffer_skip_bytes: 6967
 7883 -----die_short_read: void (struct line_buffer input), <vcs-svn/fast_export.c 158>
 7884 ------buffer_ferror: 7832
 7885 ------die_errno: 203
 7886 ------die: 29
 7887 -----printf: <>
 7888 -----buffer_copy_bytes: 6961
 7889 -----fputc: <>
 7890 ----fast_export_blob_delta: void (uint32_t mode, uint32_t old_mode, const char *old_data, off_t len, struct line_buffer input), <vcs-svn/fast_export.c 315>
 7891 -----assert: <>
 7892 -----apply_delta: long (off_t len, struct line_buffer input, const char *old_data, uint32_t old_mode), <vcs-svn/fast_export.c 195>
 7893 ------SLIDING_VIEW_INIT: <>
 7894 ------init_postimage: int (void), <vcs-svn/fast_export.c 22>
 7895 -------buffer_tmpfile_init: int (struct line_buffer buf), <vcs-svn/line_buffer.c 28>
 7896 --------tmpfile: <>
 7897 ------buffer_tmpfile_rewind: FILE * (struct line_buffer buf), <vcs-svn/line_buffer.c 46>
 7898 -------rewind: <>
 7899 ------die: 29
 7900 ------printf: <>
 7901 ------fflush: <>
 7902 ------get_response_line: 7830
 7903 ------parse_cat_response_line: int (const char *header, off_t *len), <vcs-svn/fast_export.c 165>
 7904 -------ends_with: <>
 7905 -------error: 12
 7906 -------strstr: <>
 7907 -------strtoumax: <>
 7908 -------strlen: <>
 7909 -------memchr: <>
 7910 -------maximum_signed_value_of_type: <>
 7911 ------check_preimage_overflow: void (off_t a, off_t b), <vcs-svn/fast_export.c 189>
 7912 -------signed_add_overflows: <>
 7913 -------die: 29
 7914 ------strbuf_addstr: <>
 7915 ------strlen: <>
 7916 ------svndiff0_apply: int (struct line_buffer delta, off_t delta_len, struct sliding_view preimage, FILE *postimage), <vcs-svn/svndiff.c 291>
 7917 -------assert: <>
 7918 -------read_magic: int (struct line_buffer in, off_t *len), <vcs-svn/svndiff.c 89>
 7919 --------read_chunk: int (struct line_buffer delta, off_t *delta_len, struct strbuf buf, size_t len), <vcs-svn/svndiff.c 77>
 7920 ---------assert: <>
 7921 ---------strbuf_reset: <>
 7922 ---------buffer_read_binary: 6956
 7923 ---------error_short_read: int (struct line_buffer input), <vcs-svn/svndiff.c 70>
 7924 ----------buffer_ferror: 7832
 7925 ----------error: 12
 7926 ----------strerror: <>
 7927 --------strbuf_release: 63
 7928 --------memcmp: <>
 7929 --------error: 12
 7930 -------read_offset: int (struct line_buffer in, off_t *result, off_t *len), <vcs-svn/svndiff.c 146>
 7931 --------read_int: int (struct line_buffer in, uintmax_t *result, off_t *len), <vcs-svn/svndiff.c 106>
 7932 ---------buffer_read_char: 7866
 7933 ---------error_short_read: 7923
 7934 --------maximum_signed_value_of_type: <>
 7935 --------error: 12
 7936 -------read_length: int (struct line_buffer in, size_t *result, off_t *len), <vcs-svn/svndiff.c 157>
 7937 --------read_int: 7931
 7938 --------error: 12
 7939 -------move_window: int (struct sliding_view view, off_t off, size_t width), <vcs-svn/sliding_window.c 46>
 7940 --------assert: <>
 7941 --------check_offset_overflow: int (off_t offset, uintmax_t len), <vcs-svn/sliding_window.c 34>
 7942 ---------maximum_signed_value_of_type: <>
 7943 ---------error: 12
 7944 ---------signed_add_overflows: <>
 7945 --------error: 12
 7946 --------strbuf_remove: 4576
 7947 --------skip_or_whine: int (struct line_buffer file, off_t gap), <vcs-svn/sliding_window.c 18>
 7948 ---------buffer_skip_bytes: 6967
 7949 ---------input_error: int (struct line_buffer file), <vcs-svn/sliding_window.c 11>
 7950 ----------buffer_ferror: 7832
 7951 ----------error: 12
 7952 ----------strerror: <>
 7953 --------strbuf_setlen: <>
 7954 --------read_to_fill_or_whine: int (struct line_buffer file, struct strbuf buf, size_t width), <vcs-svn/sliding_window.c 25>
 7955 ---------buffer_read_binary: 6956
 7956 ---------input_error: 7949
 7957 -------apply_one_window: int (struct line_buffer delta, off_t *delta_len, struct sliding_view preimage, FILE *out), <vcs-svn/svndiff.c 259>
 7958 --------WINDOW_INIT: <>
 7959 --------assert: <>
 7960 --------read_length: 7936
 7961 --------read_chunk: 7919
 7962 --------strbuf_grow: 53
 7963 --------apply_window_in_core: int (struct window ctx), <vcs-svn/svndiff.c 240>
 7964 ---------execute_one_instruction: int (struct window ctx, const char **instructions, size_t *data_pos), <vcs-svn/svndiff.c 215>
 7965 ----------assert: <>
 7966 ----------parse_first_operand: int (const char **buf, size_t *out, const char *end), <vcs-svn/svndiff.c 205>
 7967 -----------result: 3863
 7968 -----------parse_int: int (const char **buf, size_t *result, const char *end), <vcs-svn/svndiff.c 127>
 7969 ------------error: 12
 7970 ----------copyfrom_source: int (struct window ctx, const char **instructions, size_t nbytes, const char *insns_end), <vcs-svn/svndiff.c 168>
 7971 -----------parse_int: 7968
 7972 -----------unsigned_add_overflows: <>
 7973 -----------error: 12
 7974 -----------strbuf_add: 81
 7975 ----------copyfrom_target: int (struct window ctx, const char **instructions, size_t nbytes, const char *instructions_end), <vcs-svn/svndiff.c 181>
 7976 -----------parse_int: 7968
 7977 -----------error: 12
 7978 -----------strbuf_addch: <>
 7979 ----------copyfrom_data: int (struct window ctx, size_t *data_pos, size_t nbytes), <vcs-svn/svndiff.c 194>
 7980 -----------unsigned_add_overflows: <>
 7981 -----------error: 12
 7982 -----------strbuf_add: 81
 7983 ----------error: 12
 7984 ---------error: 12
 7985 --------error: 12
 7986 --------write_strbuf: int (struct strbuf sb, FILE *out), <vcs-svn/svndiff.c 63>
 7987 ---------fwrite: <>
 7988 ---------error: 12
 7989 ---------strerror: <>
 7990 --------window_release: void (struct window ctx), <vcs-svn/svndiff.c 56>
 7991 ---------strbuf_release: 63
 7992 ------assert: <>
 7993 ------signed_add_overflows: <>
 7994 ------move_window: 7939
 7995 ------buffer_tmpfile_prepare_to_read: long (struct line_buffer buf), <vcs-svn/line_buffer.c 52>
 7996 -------ftell: <>
 7997 -------error: 12
 7998 -------strerror: <>
 7999 -------fseek: <>
 8000 ------strbuf_release: 63
 8001 -----buffer_skip_bytes: 6967
 8002 -----strlen: <>
 8003 -----printf: <>
 8004 -----buffer_copy_bytes: 6961
 8005 -----fputc: <>
 8006 ---begin_revision: void (const char *remote_ref), <vcs-svn/svndump.c 303>
 8007 ----fast_export_begin_commit: void (uint32_t revision, const char *author, const struct strbuf *log, const char *uuid, const char *url, unsigned long timestamp, const char *local_ref), <vcs-svn/fast_export.c 93>
 8008 -----snprintf: <>
 8009 -----printf: <>
 8010 -----strlen: <>
 8011 -----fwrite: <>
 8012 ---end_revision: void (const char *note_ref), <vcs-svn/svndump.c 312>
 8013 ----fast_export_end_commit: void (uint32_t revision), <vcs-svn/fast_export.c 125>
 8014 -----printf: <>
 8015 ----fast_export_begin_note: void (uint32_t revision, const char *author, const char *log, unsigned long timestamp, const char *note_ref), <vcs-svn/fast_export.c 70>
 8016 -----strlen: <>
 8017 -----printf: <>
 8018 -----fwrite: <>
 8019 -----fputc: <>
 8020 ----strbuf_addf: 49
 8021 ----fast_export_note: void (const char *committish, const char *dataref), <vcs-svn/fast_export.c 87>
 8022 -----printf: <>
 8023 ----fast_export_buf_to_data: void (const struct strbuf *data), <vcs-svn/fast_export.c 237>
 8024 -----printf: <>
 8025 -----fwrite: <>
 8026 -----fputc: <>
 8027 ---reset_rev_ctx: 7796
 8028 ---strbuf_addf: 49
 8029 ---strlen: <>
 8030 ---reset_node_ctx: 7798
 8031 ---strcmp: <>
 8032 ---fprintf: <>
 8033 ---strtoumax: <>
 8034 ---isdigit: <>
 8035 ---maximum_signed_value_of_type: <>
 8036 ---die_short_read: 7862
 8037 ---read_props: 7855
 8038 ---buffer_skip_bytes: 6967
 8039 ---buffer_ferror: 7832
 8040 --svndump_deinit: void (void), <vcs-svn/svndump.c 517>
 8041 ---fast_export_deinit: void (void), <vcs-svn/fast_export.c 38>
 8042 ----buffer_deinit: 6974
 8043 ----die_errno: 203
 8044 ---reset_dump_ctx: 7793
 8045 ---reset_rev_ctx: 7796
 8046 ---reset_node_ctx: 7798
 8047 ---strbuf_release: 63
 8048 ---buffer_deinit: 6974
 8049 ---fprintf: <>
 8050 ---ferror: <>
 8051 --svndump_reset: void (void), <vcs-svn/svndump.c 534>
 8052 ---strbuf_release: 63
 8053 --apply_delta: int (int argc, char *argv[]), <test-svn-fe.c 14>
 8054 ---SLIDING_VIEW_INIT: <>
 8055 ---usage: 623
 8056 ---buffer_init: 6939
 8057 ---die_errno: 203
 8058 ---svndiff0_apply: 7916
 8059 ---strtoumax: <>
 8060 ---buffer_deinit: 6974
 8061 ---strbuf_release: 63
 8062 --url_normalize: 3809
 8063 --wildmatch: 4090
 8064 --packet_trace_identity: void (const char *prog), <pkt-line.c 8>
 8065 ---xstrdup: 73
 8066 --upload_pack_config: int (const char *var, const char *value, void *unused), <upload-pack.c 788>
 8067 ---strcmp: <>
 8068 ---git_config_bool: 601
 8069 ---git_config_int: int (const char *name, const char *value), <config.c 597>
 8070 ---parse_hide_refs_config: int (const char *var, const char *value, const char *section), <refs.c 3933>
 8071 ----strcmp: <>
 8072 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 8073 ----strlen: <>
 8074 ----config_error_nonbool: 1137
 8075 ----xstrdup: 73
 8076 ----xcalloc: 1153
 8077 ----string_list_append: 768
 8078 --upload_pack: void (void), <upload-pack.c 761>
 8079 ---head_ref_namespaced: int (each_ref_fn fn, void *cb_data), <refs.c 2029>
 8080 ----strbuf_addf: 49
 8081 ----get_git_namespace: const char * (void), <environment.c 179>
 8082 -----setup_git_env: 976
 8083 ----read_ref_full: 3161
 8084 ----strbuf_release: 63
 8085 ---find_symref: int (const char *refname, const unsigned char *sha1, int flag, void *cb_data), <upload-pack.c 744>
 8086 ----resolve_ref_unsafe: 1341
 8087 ----die: 29
 8088 ----string_list_append: struct string_list_item (struct string_list list, const char *string), <string-list.c 206>
 8089 ----xstrdup: 73
 8090 ---reset_timeout: void (void), <upload-pack.c 52>
 8091 ----alarm: <>
 8092 ---send_ref: int (const char *refname, const unsigned char *sha1, int flag, void *cb_data), <upload-pack.c 712>
 8093 ----strip_namespace: const char * (const char *namespaced_ref), <environment.c 186>
 8094 -----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 8095 -----get_git_namespace: 8081
 8096 ----mark_our_ref: int (const char *refname, const unsigned char *sha1), <upload-pack.c 684>
 8097 -----lookup_unknown_object: struct object (const unsigned char *sha1), <object.c 176>
 8098 -----ref_is_hidden: int (const char *refname), <refs.c 3957>
 8099 ------for_each_string_list_item: <>
 8100 ------starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 8101 ------strlen: <>
 8102 ----format_symref_info: void (struct strbuf buf, struct string_list symref), <upload-pack.c 702>
 8103 -----for_each_string_list_item: <>
 8104 -----strbuf_addf: 49
 8105 ----packet_write: 858
 8106 ----sha1_to_hex: 1194
 8107 ----git_user_agent_sanitized: const char * (void), <version.c 20>
 8108 -----strbuf_addstr: <>
 8109 -----git_user_agent: 4355
 8110 -----strbuf_trim: 1118
 8111 ----strbuf_release: 63
 8112 ----peel_ref: int (const char *refname, unsigned char *sha1), <refs.c 1773>
 8113 -----strcmp: <>
 8114 -----peel_entry: enum peel_status (struct ref_entry entry, int repeel), <refs.c 1749>
 8115 -----hashcpy: <>
 8116 -----read_ref_full: 3161
 8117 -----get_packed_ref: struct ref_entry (const char *refname), <refs.c 1440>
 8118 -----peel_object: enum peel_status (const unsigned char *name, unsigned char *sha1), <refs.c 1717>
 8119 ---for_each_namespaced_ref: int (each_ref_fn fn, void *cb_data), <refs.c 2044>
 8120 ----strbuf_addf: 49
 8121 ----get_git_namespace: 8081
 8122 ----do_for_each_ref: 1815
 8123 ----strbuf_release: 63
 8124 ---advertise_shallow_grafts: void (int fd), <shallow.c 289>
 8125 ----is_repository_shallow: int (void), <shallow.c 41>
 8126 -----git_path: 1267
 8127 -----fopen: <>
 8128 -----stat_validity_clear: 1855
 8129 -----stat_validity_update: void (struct stat_validity sv, int fd), <read-cache.c 2297>
 8130 ------fstat: <>
 8131 ------S_ISREG: <>
 8132 ------stat_validity_clear: 1855
 8133 ------xcalloc: 1153
 8134 ------fill_stat_data: void (struct stat_data sd, struct stat st), <read-cache.c 86>
 8135 -------ST_CTIME_NSEC: <>
 8136 -------ST_MTIME_NSEC: <>
 8137 -----fileno: <>
 8138 -----fgets: <>
 8139 -----get_sha1_hex: 931
 8140 -----die: 29
 8141 -----register_shallow: int (const unsigned char *sha1), <shallow.c 28>
 8142 ------xmalloc: 172
 8143 ------lookup_commit: struct commit (const unsigned char *sha1), <commit.c 48>
 8144 ------hashcpy: <>
 8145 ------register_commit_graft: int (struct commit_graft graft, int ignore_dups), <commit.c 111>
 8146 -------commit_graft_pos: int (const unsigned char *sha1), <commit.c 105>
 8147 --------sha1_pos: 7751
 8148 --------commit_graft_sha1_access: const unsigned char * (size_t index, void *table), <commit.c 99>
 8149 -------free: <>
 8150 -------ALLOC_GROW: <>
 8151 -------memmove: <>
 8152 -----fclose: <>
 8153 ----for_each_commit_graft: 5319
 8154 ----advertise_shallow_grafts_cb: int (const struct commit_graft *graft, void *cb), <shallow.c 281>
 8155 -----packet_write: 858
 8156 -----sha1_to_hex: 1194
 8157 ---packet_flush: void (int fd), <pkt-line.c 54>
 8158 ----packet_trace: 821
 8159 ----write_or_die: 247
 8160 ---check_ref: int (const char *refname, const unsigned char *sha1, int flag, void *cb_data), <upload-pack.c 696>
 8161 ----mark_our_ref: 8096
 8162 ---string_list_clear: 544
 8163 ---receive_needs: void (void), <upload-pack.c 534>
 8164 ----packet_read_line: char * (int fd, int *len_p), <pkt-line.c 208>
 8165 -----packet_read_line_generic: char * (int fd, char **src, size_t *src_len, int *dst_len), <pkt-line.c 196>
 8166 ------packet_read: 813
 8167 ----reset_timeout: 8090
 8168 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 8169 ----get_sha1_hex: 931
 8170 ----die: 29
 8171 ----parse_object: struct object (const unsigned char *sha1), <object.c 244>
 8172 ----sha1_to_hex: 1194
 8173 ----add_object_array: void (struct object obj, const char *name, struct object_array array), <object.c 342>
 8174 -----add_object_array_with_path: 5152
 8175 ----strtol: <>
 8176 ----parse_feature_request: int (const char *feature_list, const char *feature), <connect.c 216>
 8177 -----parse_feature_value: const char * (const char *feature_list, const char *feature, int *lenp), <connect.c 179>
 8178 ------strlen: <>
 8179 ------strstr: <>
 8180 ------isspace: <>
 8181 ------strcspn: <>
 8182 ----is_our_ref: int (struct object o), <upload-pack.c 443>
 8183 ----check_non_tip: void (void), <upload-pack.c 449>
 8184 -----error: 12
 8185 -----start_command: 255
 8186 -----sigchain_push: 399
 8187 -----get_max_object_index: unsigned int (void), <object.c 11>
 8188 -----get_indexed_object: struct object (unsigned int idx), <object.c 16>
 8189 -----is_our_ref: 8182
 8190 -----memcpy: <>
 8191 -----sha1_to_hex: 1194
 8192 -----write_in_full: 240
 8193 -----close: <>
 8194 -----sigchain_pop: 406
 8195 -----read_in_full: 245
 8196 -----finish_command: 2027
 8197 -----die: 29
 8198 ----is_repository_shallow: 8125
 8199 ----get_shallow_commits: struct commit_list (struct object_array heads, int depth, int shallow_flag, int not_shallow_flag), <shallow.c 75>
 8200 ----packet_write: 858
 8201 ----register_shallow: 8141
 8202 ----free_commit_list: 1246
 8203 ----unregister_shallow: int (const unsigned char *sha1), <commit.c 218>
 8204 -----commit_graft_pos: 8146
 8205 -----memmove: <>
 8206 ----parse_commit_or_die: void (struct commit item), <commit.c 385>
 8207 -----parse_commit: 1191
 8208 -----die: 29
 8209 -----sha1_to_hex: 1194
 8210 ----packet_flush: 8157
 8211 ----free: <>
 8212 ---get_common_commits: int (void), <upload-pack.c 371>
 8213 ----packet_read_line: 8164
 8214 ----reset_timeout: 8090
 8215 ----ok_to_give_up: int (void), <upload-pack.c 343>
 8216 -----deref_tag: struct object (struct object o, const char *warn, int warnlen), <tag.c 9>
 8217 -----reachable: int (struct commit want), <upload-pack.c 309>
 8218 ------commit_list_insert_by_date: struct commit_list (struct commit item, struct commit_list list), <commit.c 448>
 8219 ------free: <>
 8220 ------parse_object: struct object (const unsigned char *sha1), <object.c 244>
 8221 ------clear_commit_marks: 1248
 8222 ------free_commit_list: 1246
 8223 ----packet_write: 858
 8224 ----exit: <>
 8225 ----starts_with: int (const char *str, const char *prefix), <strbuf.c 5>
 8226 ----got_sha1: int (char *hex, unsigned char *sha1), <upload-pack.c 275>
 8227 -----get_sha1_hex: 931
 8228 -----die: 29
 8229 -----has_sha1_file: 1861
 8230 -----parse_object: struct object (const unsigned char *sha1), <object.c 244>
 8231 -----sha1_to_hex: 1194
 8232 -----add_object_array: 8173
 8233 ----sha1_to_hex: 1194
 8234 ----memcpy: <>
 8235 ----strcmp: <>
 8236 ----die: 29
 8237 ---create_pack_file: void (void), <upload-pack.c 81>
 8238 ----start_command: 255
 8239 ----die: 29
 8240 ----xfdopen: 559
 8241 ----for_each_commit_graft: 5319
 8242 ----write_one_shallow: int (const struct commit_graft *graft, void *cb_data), <upload-pack.c 73>
 8243 -----fprintf: <>
 8244 -----sha1_to_hex: 1194
 8245 ----fprintf: <>
 8246 ----sha1_to_hex: 1194
 8247 ----fflush: <>
 8248 ----fclose: <>
 8249 ----reset_timeout: 8090
 8250 ----poll: <>
 8251 ----error: 12
 8252 ----strerror: <>
 8253 ----sleep: 2112
 8254 ----xread: 199
 8255 ----send_client_data: ssize_t (int fd, const char *data, ssize_t sz), <upload-pack.c 57>
 8256 -----send_sideband: ssize_t (int fd, int band, const char *data, ssize_t sz, int packet_max), <sideband.c 127>
 8257 ------sprintf: <>
 8258 ------write_or_die: 247
 8259 -----xwrite: 241
 8260 -----write_or_die: 247
 8261 ----close: <>
 8262 ----write_or_die: 247
 8263 ----finish_command: 2027
 8264 ----packet_flush: 8157
